swagger: '2.0'
info:
description: API specification
version: '1.0'
title: L10 Orchestrator
basePath: ''
tags:
- name: Wager operations
- name: Wager operations V1.0
- name: Authentication
- name: Retrieve document Service
- name: Submit document Service
- name: Account Management
- name: Consumables Configuration
- name: Consumable Categories Configuration
- name: Game Family Configuration
- name: Ticket Categories Configuration
- name: Loyalty Profiles Configuration
- name: Ticket Status Configuration
- name: Tickets Configuration
- name: Products Configuration
- name: ChannelGames
- name: Operations
- name: ProductBundling
- name: Games
- name: GamesInfo
- name: Sample subscriber operations V1.0
- name: Draw operations V2.0
- name: Draw operations V3.0
- name: Draw operations V1.0
- name: Entity state operations
- name: Subscriber operations
- name: Game operations V1.0
- name: promotions
- name: Pulse Services
- name: Retailer Management - Services
- name: Accounting Terminal Reports
- name: Lottery Validations
schemes:
- http
- https
paths:
'/api/v1.0/sample/simple/update/{gameId}/{drawId}/{status}':
post:
tags:
- Sample subscriber operations V1.0
summary: Sample subscriber notification endpoint with no body
description: 'Sample subscriber notification endpoint with no body. The path and the path parameters can be changed as long as the properties have the specific names and format: {property} . The header parameters (stateId, previousStateId, namespace) are optional.'
operationId: simpleUpdateNoDody
produces:
- application/json
parameters:
- name: gameId
in: path
required: true
type: integer
format: int32
- name: drawId
in: path
required: true
type: integer
format: int32
- name: status
in: path
required: true
type: integer
format: int32
- name: stateId
in: header
required: false
type: integer
format: int64
- name: previousStateId
in: header
required: false
type: integer
format: int64
- name: namespace
in: header
required: false
type: string
responses:
'200':
description: OK
schema:
$ref: '#/definitions/infostoreEntityNotificationDTOResponse'
responseSchema:
$ref: '#/definitions/infostoreEntityNotificationDTOResponse'
'400':
description: VALIDATION_ERROR
'500':
description: ERROR
/api/v1.0/segments:
get:
tags:
- Pulse Services
summary: Retieve a page of Segments
description: ''
operationId: getSegments
produces:
- application/json
parameters:
- name: page
in: query
required: false
type: integer
default: 0
- name: limit
in: query
required: false
type: integer
default: 10
- name: sort
in: query
required: false
type: string
default: asc
- name: column
in: query
required: false
type: string
default: description
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/pulsePageSegmentDTO'
responseSchema:
$ref: '#/definitions/pulsePageSegmentDTO'
/api/v1.0/sample/simple/update:
post:
tags:
- Sample subscriber operations V1.0
summary: Sample subscriber notification endpoint with notification in body
description: ''
operationId: simpleUpdate
produces:
- application/json
parameters:
- in: body
name: body
required: false
schema:
$ref: '#/definitions/infostoreAn simple object that contains information about a state change of an entity'
responses:
'200':
description: OK
schema:
$ref: '#/definitions/infostoreEntityNotificationDTOResponse'
responseSchema:
$ref: '#/definitions/infostoreEntityNotificationDTOResponse'
'400':
description: VALIDATION_ERROR
'500':
description: ERROR
'/api/v1.0/program/{gameId}/{drawId}':
get:
tags:
- Operations
summary: Returns a list with all records for a specific MatchX game program
description: |-
<p>This API call returns all the the records for the given game. </p>
<p>See the table below the possible status codes it replies in case of a non 200 response.</p>
<table>
<thead>
<tr>
<th><em>Code</em></th>
<th><em>Description</em></th>
<th><em>Http Code</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>1004</td>
<td>Unauthorized</td>
<td>401</td>
</tr>
<tr>
<td>5004</td>
<td>Game not found</td>
<td>404</td>
</tr>
<tr>
<td>5006</td>
<td>Unexpected error</td>
<td>500</td>
</tr>
</tbody>
</table>
operationId: getV10ProgramGameidDrawid
parameters:
- name: authorization
in: header
description: Provide the JWT token. The value should start with Bearer
required: true
type: string
- name: guid
in: header
description: Provide GUID string
required: true
type: string
- name: gameId
in: path
description: The id of the game.
required: true
type: integer
- name: drawId
in: path
description: The id of the draw.
required: true
type: integer
responses:
'200':
description: OK
schema:
$ref: '#/definitions/gamemanagementMatchXProgram'
responseSchema:
$ref: '#/definitions/gamemanagementMatchXProgram'
'401':
description: The request is not authorized
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'404':
description: A game with the given id was not found
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'500':
description: Internal Server Error
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
/api/v1.0/submit:
post:
tags:
- Submit document Service
summary: Submits a document generated from L5.
description: Submits a document generated from L5.
operationId: submitDocument
consumes:
- application/json
produces:
- application/json
parameters:
- in: body
name: body
description: The submit document request from L5
required: true
schema:
$ref: '#/definitions/atsSubmitDocumentRequestDto'
responses:
'200':
description: Success
schema:
type: string
responseSchema:
type: string
'500':
description: Runtime Fault
schema:
$ref: '#/definitions/atsFaultInfo'
responseSchema:
$ref: '#/definitions/atsFaultInfo'
'/api/v1.0/wagers/{serialNumber}/winnings':
get:
tags:
- Wager operations
summary: Retrieve the winnings for the wager
description: Retrieve the detailed or summary description of winnings for the given wager
operationId: winnings
consumes:
- application/json
produces:
- application/json
parameters:
- name: serialNumber
in: path
description: The serial number
required: true
type: string
maxLength: 55
minLength: 30
- name: RetailerId
in: header
description: The retailer Id
required: true
type: integer
format: int32
- name: TerminalId
in: header
description: The terminal Id
required: true
type: integer
format: int32
- name: Operator
in: header
description: The Operator
required: true
type: integer
format: int32
- name: channel
in: header
description: The channel
required: true
type: integer
format: int32
- name: summaryOnly
in: query
description: Flag to return only summary results
required: false
type: boolean
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: Successful response
schema:
type: array
items:
$ref: '#/definitions/ValidationResponseDTO'
responseSchema:
type: array
items:
$ref: '#/definitions/ValidationResponseDTO'
/api/v1.0/states:
get:
tags:
- Entity state operations
summary: Get entity states
description: Get paginated entity states. From and to parameters are optional and allow to retrieve a subset of entity states.
operationId: getEntityStates
produces:
- application/json
parameters:
- name: from
in: query
description: The start state id
required: false
type: integer
format: int64
- name: to
in: query
description: The end state id
required: false
type: integer
format: int64
- name: subscriberId
in: query
description: Subscriber id
required: false
type: integer
format: int32
- name: page
in: query
description: Page number
required: false
type: integer
default: 0
- name: limit
in: query
description: Results per page
required: false
type: integer
default: 10
maximum: 100
minimum: 1
- name: sort
in: query
description: 'Sorting order. Options: asc, desc. Default is asc.'
required: false
type: string
default: asc
- name: column
in: query
description: 'Sorting column. Options: stateId'
required: false
type: string
default: stateId
responses:
'200':
description: OK
schema:
$ref: '#/definitions/infostorePageEntityStateDTO'
responseSchema:
$ref: '#/definitions/infostorePageEntityStateDTO'
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'500':
description: APPLICATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'502':
description: BAD GATEWAY
'503':
description: SERVICE UNAVAILABLE
'/api/v1.0/games/{gameId}/versions/active':
get:
tags:
- Games
summary: Returns the active record for the specified game
description: |-
<p>This API call returns the configuration for the <strong>active</strong> game record for the given game.</p>
<p>See the table below the possible status codes it replies in case of a non 200 response.</p>
<table>
<thead>
<tr>
<th><em>Code</em></th>
<th><em>Description</em></th>
<th><em>Http Code</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>1004</td>
<td>Unauthorized</td>
<td>401</td>
</tr>
<tr>
<td>5004</td>
<td>Active Game record not found</td>
<td>404</td>
</tr>
<tr>
<td>5006</td>
<td>Unexpected error</td>
<td>500</td>
</tr>
</tbody>
</table>
operationId: getV10GamesGameidVersionsActive
parameters:
- name: authorization
in: header
description: Provide the JWT token. The value should start with Bearer
required: true
type: string
- name: guid
in: header
description: Provide GUID string
required: true
type: string
- name: gameId
in: path
description: The id of the game.
required: true
type: integer
responses:
'200':
description: OK
schema:
$ref: '#/definitions/gamemanagementGameParametersResource'
responseSchema:
$ref: '#/definitions/gamemanagementGameParametersResource'
'401':
description: The request is not authorized
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'404':
description: A game with the given id was not found
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'500':
description: Internal Server Error
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
/api/v3.0/draws/active:
get:
tags:
- Draw operations V3.0
summary: Get active draws
description: Get all active draws for all games
operationId: getActiveDraws
produces:
- application/json
parameters:
- name: property
in: query
description: 'Specifies which properties to include, by default all properties are included in the response'
required: false
type: array
items:
type: string
collectionFormat: multi
- name: Etag
in: header
description: 'Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag'
required: false
type: string
- name: page
in: query
description: Page number
required: false
type: integer
default: 0
- name: limit
in: query
description: Results per page
required: false
type: integer
default: 10
maximum: 100
minimum: 1
- name: sort
in: query
description: 'Sorting order. Options: asc, desc. Default is desc.'
required: false
type: string
default: desc
- name: column
in: query
description: 'Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.'
required: false
type: string
default: gameId
responses:
'200':
description: OK
schema:
$ref: '#/definitions/infostorePageDrawV3'
responseSchema:
$ref: '#/definitions/infostorePageDrawV3'
'304':
description: NOT MODIFIED
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'500':
description: APPLICATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'502':
description: BAD GATEWAY
'503':
description: SERVICE UNAVAILABLE
/api/v1.0/subscribers:
get:
tags:
- Subscriber operations
summary: Get subscribers
description: ''
operationId: findAll
produces:
- application/json
parameters:
- name: subscriberId
in: query
description: Filter by subscriberId
required: false
type: integer
format: int32
- name: name
in: query
description: Filter by name
required: false
type: string
- name: gameIds
in: query
description: Filter by gameIds
required: false
type: array
items:
type: integer
format: int32
collectionFormat: multi
- name: entities
in: query
description: Filter by entities
required: false
type: array
items:
type: string
enum:
- draw
- transactions
- validations
collectionFormat: multi
- name: column
in: query
required: false
type: string
default: subscriberId
- name: sort
in: query
required: false
type: string
default: asc
responses:
'200':
description: successful operation
schema:
type: array
items:
$ref: '#/definitions/infostoreSubscriberDTO'
responseSchema:
type: array
items:
$ref: '#/definitions/infostoreSubscriberDTO'
post:
tags:
- Subscriber operations
summary: Register a subscriber
description: ''
operationId: register
produces:
- application/json
parameters:
- in: body
name: body
description: The subscriber data
required: false
schema:
$ref: '#/definitions/infostoreSubscriberRegistrationRequest'
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/infostoreSubscriberDTO'
responseSchema:
$ref: '#/definitions/infostoreSubscriberDTO'
'/api/v1.0/segments/snapshots/{id}/retailers':
get:
tags:
- Pulse Services
summary: Retieve a Segment Snapshot Retailers
description: ''
operationId: getSegmentSnapshotRetailers
produces:
- application/json
parameters:
- name: id
in: path
required: true
type: integer
format: int32
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
type: array
items:
type: integer
format: int32
responseSchema:
type: array
items:
type: integer
format: int32
'/api/v1.0/products/{id}':
get:
tags:
- ProductBundling
summary: Returns a specific Product
description: |-
<p>This API call returns the information for the given product. </p>
<p>See the table below the possible status codes it replies in case of a non 200 response.</p>
<table>
<thead>
<tr>
<th><em>Code</em></th>
<th><em>Description</em></th>
<th><em>Http Code</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>1004</td>
<td>Unauthorized</td>
<td>401</td>
</tr>
<tr>
<td>5004</td>
<td>Product not found</td>
<td>404</td>
</tr>
<tr>
<td>5006</td>
<td>Unexpected error</td>
<td>500</td>
</tr>
</tbody>
</table>
operationId: getV10ProductsId
parameters:
- name: authorization
in: header
description: Provide the JWT token. The value should start with Bearer
required: true
type: string
- name: guid
in: header
description: Provide GUID string
required: true
type: string
- name: id
in: path
description: The id of the product.
required: true
type: integer
responses:
'200':
description: OK
schema:
$ref: '#/definitions/gamemanagementProductFields'
responseSchema:
$ref: '#/definitions/gamemanagementProductFields'
'401':
description: The request is not authorized
'404':
description: A game with the given id was not found
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'500':
description: Internal Server Error
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'/api/v1.0/tickets/statuses/{id}':
get:
tags:
- Ticket Status Configuration
summary: Retrieve a single ticket status
description: Retrieve a single ticket status
operationId: getTicketStatus
produces:
- application/json
parameters:
- name: id
in: path
description: The ticket status id
required: true
type: integer
format: int32
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesTicketStatusDTO'
responseSchema:
$ref: '#/definitions/consumablesTicketStatusDTO'
put:
tags:
- Ticket Status Configuration
summary: Update a ticket status
description: Update a ticket status
operationId: updateTicketStatus
produces:
- application/json
parameters:
- name: id
in: path
description: The ticket status id
required: true
type: integer
format: int32
- in: body
name: body
required: false
schema:
$ref: '#/definitions/consumablesThe ticket status update request'
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesTicketStatusDTO'
responseSchema:
$ref: '#/definitions/consumablesTicketStatusDTO'
delete:
tags:
- Ticket Status Configuration
summary: Delete a ticket status
description: "\n Delete a ticket status\n\n Possible error codes:\n\n| *Code*|                *Description*                             |\n|-------|----------------------------------------------------------|\n| 10002  |\tCan not delete built in ticket status                 |\n|"
operationId: deleteTicketStatus
produces:
- application/json
parameters:
- name: id
in: path
description: The ticket status id
required: true
type: integer
format: int32
- name: Authorization
in: header
required: false
type: string
responses:
default:
description: successful operation
/api/v1.0/consumables/categories:
get:
tags:
- Consumable Categories Configuration
summary: Retrieve a page of all consumable categories
description: Retrieve a page of all consumable categories
operationId: findAllConsumableCategories
produces:
- application/json
parameters:
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
type: array
items:
$ref: '#/definitions/consumablesConsumableCategoryDTO'
responseSchema:
type: array
items:
$ref: '#/definitions/consumablesConsumableCategoryDTO'
post:
tags:
- Consumable Categories Configuration
summary: Register a new consumable category
description: Register a new consumable category
operationId: registerConsumableCategory
produces:
- application/json
parameters:
- in: body
name: body
required: false
schema:
$ref: '#/definitions/consumablesThe consumable category registration request'
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesConsumableCategoryDTO'
responseSchema:
$ref: '#/definitions/consumablesConsumableCategoryDTO'
/api/v1.0/sample/update:
post:
tags:
- Sample subscriber operations V1.0
summary: Sample subscriber notification endpoint with entity map in body
description: ''
operationId: update
produces:
- application/json
parameters:
- in: body
name: body
required: false
schema:
$ref: '#/definitions/infostoreAn object that contains information about a state change of an entity'
responses:
'200':
description: OK
schema:
$ref: '#/definitions/infostoreEntityNotificationDTOResponse'
responseSchema:
$ref: '#/definitions/infostoreEntityNotificationDTOResponse'
'400':
description: VALIDATION_ERROR
'500':
description: ERROR
'/api/v2.0/draws/{gameId}/last/{limit}':
get:
tags:
- Draw operations V2.0
summary: Get last draws for a game
description: Get last draws for a game. By default the active draw is included in the response if it exists.
operationId: getLastDraws
produces:
- application/json
parameters:
- name: gameId
in: path
description: Game identifier
required: true
type: integer
format: int32
- name: limit
in: path
description: 'Limit, the number of total draws'
required: true
type: integer
maximum: 100
minimum: 1
format: int32
- name: includeActive
in: query
description: Whether to include the active draw if it exists
required: false
type: boolean
- name: status
in: query
description: The status in which the last draws should be. By default all non-active and non-future draws are included.
required: false
type: array
items:
type: integer
format: int32
collectionFormat: multi
responses:
'200':
description: OK
schema:
type: array
items:
$ref: '#/definitions/infostoreDrawV2'
responseSchema:
type: array
items:
$ref: '#/definitions/infostoreDrawV2'
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'/api/v1.0/consumables/categories/{id}':
get:
tags:
- Consumable Categories Configuration
summary: Retrieve a single consumable category
description: Retrieve a single consumable category
operationId: getConsumableCategory
produces:
- application/json
parameters:
- name: id
in: path
description: The consumable category id
required: true
type: integer
format: int32
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesConsumableCategoryDTO'
responseSchema:
$ref: '#/definitions/consumablesConsumableCategoryDTO'
put:
tags:
- Consumable Categories Configuration
summary: Update a consumable category
description: Update a consumable category
operationId: updateConsumableCategory
produces:
- application/json
parameters:
- name: id
in: path
description: The consumable category id
required: true
type: integer
format: int32
- in: body
name: body
required: false
schema:
$ref: '#/definitions/consumablesThe consumable category update request'
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesConsumableCategoryDTO'
responseSchema:
$ref: '#/definitions/consumablesConsumableCategoryDTO'
delete:
tags:
- Consumable Categories Configuration
summary: Delete a consumable category
description: Delete a consumable category
operationId: deleteConsumableCategory
produces:
- application/json
parameters:
- name: id
in: path
description: The consumable category id
required: true
type: integer
format: int32
- name: Authorization
in: header
required: false
type: string
responses:
default:
description: successful operation
/api/v1.0/products/active:
get:
tags:
- ProductBundling
summary: Returns a list with all of Defined Active Products
description: |-
<p>This API call returns a list with the information for all <strong>active</strong> product. </p>
<p>See the table below the possible status codes it replies in case of a non 200 response.</p>
<table>
<thead>
<tr>
<th><em>Code</em></th>
<th><em>Description</em></th>
<th><em>Http Code</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>1004</td>
<td>Unauthorized</td>
<td>401</td>
</tr>
<tr>
<td>5006</td>
<td>Unexpected error</td>
<td>500</td>
</tr>
</tbody>
</table>
operationId: getV10ProductsActive
parameters:
- name: authorization
in: header
description: Provide the JWT token. The value should start with Bearer
required: true
type: string
- name: guid
in: header
description: Provide GUID string
required: true
type: string
responses:
'200':
description: OK
schema:
$ref: '#/definitions/gamemanagementProducts'
responseSchema:
$ref: '#/definitions/gamemanagementProducts'
'401':
description: The request is not authorized
'404':
description: A game with the given id was not found
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'500':
description: Internal Server Error
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'/api/v1.0/promotions/{promoId}/messages':
get:
tags:
- promotions
summary: messages for a specific promotion
description: messages for a specific promotion
operationId: getMessagesByPromoId
produces:
- application/json
parameters:
- name: promoId
in: path
description: The id of the promotion to retrieve messages
required: true
type: integer
exclusiveMaximum: false
exclusiveMinimum: false
format: int32
- name: Guid
in: header
description: Guid
required: true
type: string
responses:
'200':
description: Expected response to a valid request
schema:
type: array
items:
$ref: '#/definitions/promotionengineMessage'
responseSchema:
type: array
items:
$ref: '#/definitions/promotionengineMessage'
default:
description: unexpected error
schema:
$ref: '#/definitions/promotionengineError'
responseSchema:
$ref: '#/definitions/promotionengineError'
'/api/v1.0/gamesInfo/{id}':
get:
tags:
- GamesInfo
summary: Returns basic information for a specific game
description: |-
<p>This API call returns basic information for the given game, including the operators list. </p>
<p>See the table below the possible status codes it replies in case of a non 200 response.</p>
<table>
<thead>
<tr>
<th><em>Code</em></th>
<th><em>Description</em></th>
<th><em>Http Code</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>1004</td>
<td>Unauthorized</td>
<td>401</td>
</tr>
<tr>
<td>5004</td>
<td>Game not found</td>
<td>404</td>
</tr>
<tr>
<td>5006</td>
<td>Unexpected error</td>
<td>500</td>
</tr>
</tbody>
</table>
operationId: getV10GamesinfoId
parameters:
- name: authorization
in: header
description: Provide the JWT token. The value should start with Bearer
required: true
type: string
- name: guid
in: header
description: Provide GUID string
required: true
type: string
- name: id
in: path
description: Provide the id of game.
required: true
type: integer
responses:
'200':
description: OK
schema:
$ref: '#/definitions/gamemanagementGameInfo'
responseSchema:
$ref: '#/definitions/gamemanagementGameInfo'
'400':
description: Bad Request
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'401':
description: Unauthorized Access
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'500':
description: Internal Server Error
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
default:
description: OK
'/api/v1.0/tickets/categories/{id}':
get:
tags:
- Ticket Categories Configuration
summary: Retrieve a single ticket category
description: Retrieve a single ticket category
operationId: getTicketCategory
produces:
- application/json
parameters:
- name: id
in: path
description: The ticket category id
required: true
type: integer
format: int32
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesTicketCategoryDTO'
responseSchema:
$ref: '#/definitions/consumablesTicketCategoryDTO'
put:
tags:
- Ticket Categories Configuration
summary: Update a ticket category
description: Update a ticket category
operationId: updateTicketCategory
produces:
- application/json
parameters:
- name: id
in: path
description: The ticket category id
required: true
type: integer
format: int32
- in: body
name: body
required: false
schema:
$ref: '#/definitions/consumablesTicketCategoryUpdateRequest'
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesTicketCategoryDTO'
responseSchema:
$ref: '#/definitions/consumablesTicketCategoryDTO'
delete:
tags:
- Ticket Categories Configuration
summary: Delete a ticket category
description: Delete a ticket category
operationId: deleteTicketCategory
produces:
- application/json
parameters:
- name: id
in: path
description: The ticket category id
required: true
type: integer
format: int32
- name: Authorization
in: header
required: false
type: string
responses:
default:
description: successful operation
'/api/v2.0/draws/{gameId}/draw-date/{fromDate}/{toDate}':
get:
tags:
- Draw operations V2.0
summary: Get draws for a game by date range
description: Get draws for a game by date range.
operationId: getDrawsForGameByDate
produces:
- application/json
parameters:
- name: gameId
in: path
description: Game identifier
required: true
type: integer
format: int32
- name: fromDate
in: path
description: The fromDate date in UTC in milliseconds
required: true
type: integer
format: int64
- name: toDate
in: path
description: The toDate date in UTC in milliseconds
required: true
type: integer
format: int64
- name: page
in: query
description: Page number
required: false
type: integer
default: 0
- name: limit
in: query
description: Results per page
required: false
type: integer
default: 10
maximum: 100
minimum: 1
- name: sort
in: query
description: 'Sorting order. Options: asc, desc. Default is desc.'
required: false
type: string
default: desc
- name: column
in: query
description: 'Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.'
required: false
type: string
default: drawId
responses:
'200':
description: OK
schema:
$ref: '#/definitions/infostorePageDrawV2'
responseSchema:
$ref: '#/definitions/infostorePageDrawV2'
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'/api/v1.0/retailers/{id}/loyalty/status':
get:
tags:
- Retailer Management - Services
summary: Retieve Retailer Loyalty Status
description: ''
operationId: getRetailerLoyaltyStatus
produces:
- application/json
parameters:
- name: id
in: path
required: true
type: integer
format: int32
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/pulseRetailerLoyaltyStatus'
responseSchema:
$ref: '#/definitions/pulseRetailerLoyaltyStatus'
/api/v1.0/consumables:
get:
tags:
- Consumables Configuration
summary: Retrieve a page of all consumables
description: Retrieve a page of all consumables
operationId: findAllConsumables
produces:
- application/json
parameters:
- name: categoryId
in: query
description: The consumable category id
required: false
type: integer
format: int32
- name: status
in: query
description: 'The consumable status (0 -> INACTIVE, 1 -> ACTIVE)'
required: false
type: integer
format: int32
- name: Authorization
in: header
required: false
type: string
- name: page
in: query
required: false
type: integer
default: 0
- name: limit
in: query
required: false
type: integer
default: 10
- name: sort
in: query
required: false
type: string
default: asc
- name: column
in: query
required: false
type: string
default: id
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesPageConsumableDTO'
responseSchema:
$ref: '#/definitions/consumablesPageConsumableDTO'
post:
tags:
- Consumables Configuration
summary: Register a new consumable
description: Register a new consumable
operationId: registerConsumable
produces:
- application/json
parameters:
- in: body
name: body
required: false
schema:
$ref: '#/definitions/consumablesThe consumable registration request'
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesConsumableDTO'
responseSchema:
$ref: '#/definitions/consumablesConsumableDTO'
'/api/v1.0/promotions/retailer/happyhours/{retailerId}':
get:
tags:
- promotions
summary: Info/messages for a specific promotions
description: Info/messages for a specific promotions
operationId: getRetailerHappyhoursByRetailerId
produces:
- application/json
parameters:
- name: retailerId
in: path
description: The id of the retailer to retrieve hours and messages
required: true
type: integer
exclusiveMaximum: false
exclusiveMinimum: false
format: int32
- name: Guid
in: header
description: Guid
required: true
type: string
responses:
'200':
description: Expected response to a valid request
examples: {}
schema:
type: array
items:
$ref: '#/definitions/promotionengineGetHappyHoursReply'
responseSchema:
type: array
items:
$ref: '#/definitions/promotionengineGetHappyHoursReply'
default:
description: unexpected error
schema:
$ref: '#/definitions/promotionengineError'
responseSchema:
$ref: '#/definitions/promotionengineError'
/auth/api/v1.0/user:
get:
tags:
- Account Management
summary: retrieve authenticated user profile
description: ''
operationId: getMyProfile
produces:
- application/json
- application/xml
parameters:
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/authUserDTO'
responseSchema:
$ref: '#/definitions/authUserDTO'
'/api/v1.0/retailers/{id}/games':
get:
tags:
- Retailer Management - Services
summary: Retieve Retailer Games
description: ''
operationId: getRetailerGames
produces:
- application/json
parameters:
- name: id
in: path
required: true
type: integer
format: int32
responses:
'200':
description: successful operation
schema:
type: array
items:
$ref: '#/definitions/pulseRetailerGameView'
responseSchema:
type: array
items:
$ref: '#/definitions/pulseRetailerGameView'
'/api/v1.0/segments/{id}/retailers':
get:
tags:
- Pulse Services
summary: Retieve a Segment Retailers
description: ''
operationId: getSegmentRetailers
produces:
- application/json
parameters:
- name: id
in: path
required: true
type: integer
format: int32
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: Successful response
schema:
type: array
items:
type: integer
format: int32
responseSchema:
type: array
items:
type: integer
format: int32
/api/v1.0/terminal-actions/signon:
post:
tags:
- Authentication
summary: Grant authorization token
description: ''
operationId: terminalSignon_1
consumes:
- application/json
produces:
- application/json
parameters:
- name: Authorization
in: header
required: true
type: string
- name: TerminalId
in: header
required: true
type: integer
format: int32
- in: body
name: body
required: false
schema:
$ref: '#/definitions/TerminalSignonRequest'
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/TokenResponse'
responseSchema:
$ref: '#/definitions/TokenResponse'
'/lottery-validations/api/v1.0/wagers/{wagerId}/claim':
post:
tags:
- Lottery Validations
summary: Claim a wager
description: Claims the wager passed as parameter
operationId: createLotteryClaim
consumes:
- application/json
produces:
- application/json
parameters:
- in: body
name: body
required: false
schema:
$ref: '#/definitions/validationsLotteryClaimRequest'
- name: wagerId
in: path
description: Internal transaction identifier
required: true
type: integer
format: int64
- name: channel
in: header
description: Channel identifier
required: true
type: integer
format: int32
- name: operator
in: header
description: Operator identifier
required: true
type: integer
format: int32
- name: team
in: header
description: Team index
required: false
type: integer
format: int32
- name: Authorization
in: header
description: OAuth2 token
required: true
type: string
responses:
'200':
description: Claim successfully created
schema:
type: array
items:
$ref: '#/definitions/validationsValidationResponseDTO'
responseSchema:
type: array
items:
$ref: '#/definitions/validationsValidationResponseDTO'
'400':
description: "Bad request\r\n| Error code | Description |\r\n| :-: | - |\r\n| 26 | Validation Error: [...] |\r\n"
'401':
description: "Unauthorized\r\n| Error code | Description |\r\n| :-: | - |\r\n| - | Full authentication is required to access this resource |\r\n| - | Access token expired: {token} |\r\n"
'404':
description: "Not found\r\n| Error code | Description |\r\n| :-: | - |\r\n| - | Not found |\r\n| 30 | Entity of class: {class}, id: {id} not found |\r\n"
schema:
$ref: '#/definitions/validationsFaultInfo'
responseSchema:
$ref: '#/definitions/validationsFaultInfo'
'500':
description: "Internal server error\r\n| Error code | Description |\r\n| :-: | - |\r\n| 25 | System Error |\r\n| 9000 | No processed draws found for wager {id} |\r\n| 9004 | Wager {id} found in status {status} |\r\n| 9005 | Game parameters not implemented for game code {code} |\r\n| 9006 | Wager {id} winning amount is below minimum payable limit |\r\n| 9007 | Nothing to pay for wager {id} |\r\n| 9008 | Client request to service {service} failed with message: {text} |\r\n| 9009 | Wager {id} has been paid already |\r\n| 9010 | All draws have expired for wager {id} |\r\n| 9011 | Wager {id} has been exchanged |\r\n| 9012 | Exchange wager ID same as wager ID {id} |\r\n| 9013 | No draws found for wager {id} |\r\n| 9014 | Draw {id} not found |\r\n| 9016 | Not allowed to pay wager {id} |\r\n| 9017 | Auditing registration failed for action {text} and result {text} with error: {text}\r\n| 9018 | Wager {id} operator {id} does not match the current request {id}\r\n| 9019 | Wager {id} requires team index\r\n| 9020 | Wager {id} does not require team index\r\n| 9021 | Wager {id} team index {index} exceeds team shares {shares}\r\n| 9022 | Claim creation failed for wager {id} with message: {text}\r\n| 9023 | Claim already issued for wager {id}\r\n| 9024 | Claim validation failed for claim {id} with message: {text}\r\n| 9025 | Claim creation not allowed for wager {id}, validation status: {status}"
schema:
$ref: '#/definitions/validationsFaultInfo'
responseSchema:
$ref: '#/definitions/validationsFaultInfo'
/api/v1.0/tickets/categories:
get:
tags:
- Ticket Categories Configuration
summary: Retrieve a page of all ticket categories
description: Retrieve a page of all ticket categories
operationId: findAllTicketCategories
produces:
- application/json
parameters:
- name: type
in: query
description: The ticket category type
required: false
type: integer
format: int32
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
type: array
items:
$ref: '#/definitions/consumablesTicketCategoryDTO'
responseSchema:
type: array
items:
$ref: '#/definitions/consumablesTicketCategoryDTO'
post:
tags:
- Ticket Categories Configuration
summary: Register a new ticket category
description: Register a new ticket category
operationId: registerTicketCategory
produces:
- application/json
parameters:
- in: body
name: body
required: false
schema:
$ref: '#/definitions/consumablesThe ticket category registration request'
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesTicketCategoryDTO'
responseSchema:
$ref: '#/definitions/consumablesTicketCategoryDTO'
/api/v1.0/promotions/outcomes:
get:
tags:
- promotions
summary: Query a promotion
description: Query a promotion
operationId: getPromotionsOutcomes
produces:
- application/json
parameters:
- name: Guid
in: header
description: Guid
required: true
type: string
- name: xactionid
in: query
description: transaction id
required: false
type: integer
format: int32
- name: outcomeid
in: query
description: outcome id
required: false
type: integer
format: int32
responses:
'200':
description: Expected response to a valid request
examples: {}
schema:
type: array
items:
$ref: '#/definitions/promotionengineOutcomeReply'
responseSchema:
type: array
items:
$ref: '#/definitions/promotionengineOutcomeReply'
default:
description: Error
schema:
$ref: '#/definitions/promotionengineError'
responseSchema:
$ref: '#/definitions/promotionengineError'
put:
tags:
- promotions
summary: Redeem a promotion
description: Redeem a promotion
operationId: putPromotionsOutcomes
produces:
- application/json
parameters:
- name: outcomeid
in: query
description: outcome id
required: true
type: integer
format: int32
- name: Guid
in: header
description: Guid
required: true
type: string
responses:
'200':
description: Expected response to a valid request
examples: {}
schema:
$ref: '#/definitions/promotionenginePromoReply'
responseSchema:
$ref: '#/definitions/promotionenginePromoReply'
default:
description: Error
schema:
$ref: '#/definitions/promotionengineError'
responseSchema:
$ref: '#/definitions/promotionengineError'
delete:
tags:
- promotions
summary: Undo redeem a promotion
description: Undo redeem a promotion
operationId: deletePromotionsOutcomes
produces:
- application/json
parameters:
- name: outcomeid
in: query
description: outcome id
required: true
type: integer
format: int32
- name: Guid
in: header
description: Guid
required: true
type: string
responses:
'200':
description: Expected response to a valid request
default:
description: Error
schema:
$ref: '#/definitions/promotionengineError'
responseSchema:
$ref: '#/definitions/promotionengineError'
'/api/v2.0/draws/{gameId}/visual-draw/{visualDraw}':
get:
tags:
- Draw operations V2.0
summary: Get draw for a game by visual draw number
description: 'Get draw for a game by visual draw number. The visual draw number depending on the game is either the same as the draw id, or is a number where the first four digits denote the year and the rest digits a yearly recurring draw number.'
operationId: getDrawForGameByVisualDraw
produces:
- application/json
parameters:
- name: gameId
in: path
description: Game identifier
required: true
type: integer
format: int32
- name: visualDraw
in: path
description: Visual draw number
required: true
type: integer
format: int32
responses:
'200':
description: OK
schema:
$ref: '#/definitions/infostoreDrawV3'
responseSchema:
$ref: '#/definitions/infostoreDrawV3'
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'404':
description: NOT FOUND
'500':
description: APPLICATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'502':
description: BAD GATEWAY
'503':
description: SERVICE UNAVAILABLE
/api/v1.0/promotions:
get:
tags:
- promotions
summary: get promotions from database
description: get promotions from database
operationId: getPromotions
produces:
- application/json
parameters:
- name: Guid
in: header
description: Guid
required: true
type: string
- name: status
in: query
description: promo status
required: false
type: string
enum:
- Active
- Inactive
- Suspension
- name: type
in: query
description: promo type
required: false
type: string
enum:
- BUYXGETY
- NTICKET
- IW
- SC
- SCD
- NSVOUCHER
- SVOUCHER
- name: id
in: query
description: promotion id
required: false
type: integer
format: int32
- name: operator
in: query
description: operator
required: false
type: integer
format: int32
- name: channel
in: query
description: channel
required: false
type: integer
format: int32
- name: client
in: query
description: client
required: false
type: integer
format: int32
responses:
'200':
description: Expected response to a valid request
examples: {}
schema:
type: array
items:
$ref: '#/definitions/promotionengineGetPromotionReply'
responseSchema:
type: array
items:
$ref: '#/definitions/promotionengineGetPromotionReply'
default:
description: Error
schema:
$ref: '#/definitions/promotionengineError'
responseSchema:
$ref: '#/definitions/promotionengineError'
post:
tags:
- promotions
summary: evaluate a promotion
description: evaluate a promotion
operationId: postPromotions
produces:
- application/json
parameters:
- name: type
in: query
description: 'The type of evaluation, default play'
required: false
type: string
enum:
- play
- voucher
- name: xactionid
in: query
description: transaction id
required: true
type: integer
format: int32
- name: Operator
in: header
description: Operator
required: true
type: integer
format: int32
- name: Client
in: header
description: Client
required: true
type: integer
format: int32
- name: Channel
in: header
description: Channel
required: true
type: integer
format: int32
- name: Guid
in: header
description: Guid
required: true
type: string
- name: outcomeid
in: query
description: transaction id
required: false
type: integer
format: int32
- name: Retailer
in: header
description: Retailer
required: false
type: integer
format: int32
- name: PlayerId
in: header
description: PlayerId
required: false
type: integer
format: int32
- name: PlayerType
in: header
description: PlayerType
required: false
type: integer
format: int32
- name: TerminalType
in: header
description: TerminalType
required: false
type: integer
format: int32
- in: body
name: body
description: object that needs to verify promotion
required: true
schema:
$ref: '#/definitions/promotionenginePromotionBody'
responses:
'200':
description: Expected response to a valid request
examples: {}
schema:
type: array
items:
$ref: '#/definitions/promotionenginePromoReply'
responseSchema:
type: array
items:
$ref: '#/definitions/promotionenginePromoReply'
default:
description: Error
schema:
$ref: '#/definitions/promotionengineError'
responseSchema:
$ref: '#/definitions/promotionengineError'
/api/v2.0/draws/active:
get:
tags:
- Draw operations V2.0
summary: Get active draws
description: Get all active draws for all games
operationId: getActiveDraws
produces:
- application/json
parameters:
- name: page
in: query
description: Page number
required: false
type: integer
default: 0
- name: limit
in: query
description: Results per page
required: false
type: integer
default: 10
maximum: 100
minimum: 1
- name: sort
in: query
description: 'Sorting order. Options: asc, desc. Default is desc.'
required: false
type: string
default: desc
- name: column
in: query
description: 'Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.'
required: false
type: string
default: gameId
responses:
'200':
description: OK
schema:
$ref: '#/definitions/infostorePageDrawV2'
responseSchema:
$ref: '#/definitions/infostorePageDrawV2'
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'/api/v1.0/wagers/{serialNumber}/validation':
put:
tags:
- Wager operations
summary: Validate a wager
description: |-
This method validates and pays the wager passed as parameter.

The method takes into account game options that were in effect at the time when the wager was played. These include, but are not limited to, payment authorization limits, taxation limits, rounding options, etc.
operationId: validation
consumes:
- application/json
produces:
- application/json
parameters:
- in: body
name: body
required: false
schema:
$ref: '#/definitions/MetadataModel'
- name: serialNumber
in: path
description: The serial number
required: true
type: string
maxLength: 55
minLength: 30
- name: RetailerId
in: header
description: The retailer Id
required: true
type: integer
format: int32
- name: TerminalId
in: header
description: The terminal Id
required: true
type: integer
format: int32
- name: Operator
in: header
description: The Operator
required: true
type: integer
format: int32
- name: channel
in: header
description: The channel
required: true
type: integer
format: int32
- name: pin
in: query
description: Authorization PIN
required: false
type: string
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: Successful response
schema:
type: array
items:
$ref: '#/definitions/ValidationResponseDTO'
responseSchema:
type: array
items:
$ref: '#/definitions/ValidationResponseDTO'
'/api/v3.0/draws/{gameId}/visual-draw/{visualDraw}':
get:
tags:
- Draw operations V3.0
summary: Get draw for a game by visual draw number
description: 'Get draw for a game by visual draw number. The visual draw number depending on the game is either the same as the draw id, or is a number where the first four digits denote the year and the rest digits a yearly recurring draw number.'
operationId: getDrawForGameByVisualDraw
produces:
- application/json
parameters:
- name: gameId
in: path
description: Game identifier
required: true
type: integer
format: int32
- name: visualDraw
in: path
description: Visual draw number
required: true
type: integer
format: int32
- name: status
in: query
description: 'Status filter. If the draw found is not in one of the specified statuses, the response will be empty. Multiple statuses filters allowed. By default no status filter is applied.'
required: false
type: array
items:
type: string
enum:
- future
- active
- pendingResults
- results
collectionFormat: multi
- name: property
in: query
description: 'Specifies which properties to include, by default all properties are included in the response'
required: false
type: array
items:
type: string
collectionFormat: multi
- name: Etag
in: header
description: 'Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag'
required: false
type: string
responses:
'200':
description: OK
schema:
$ref: '#/definitions/infostoreDrawV3'
responseSchema:
$ref: '#/definitions/infostoreDrawV3'
'304':
description: NOT MODIFIED
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'404':
description: NOT FOUND
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'500':
description: APPLICATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'502':
description: BAD GATEWAY
'503':
description: SERVICE UNAVAILABLE
'/api/v1.0/draws/{gameStateId}/{drawNumber}/results':
get:
tags:
- Draw operations V1.0
summary: Get results for a draw by draw number
description: Get draw results information for a specific draw number.
operationId: getDrawResultsForDrawNumber
produces:
- application/json
parameters:
- name: gameStateId
in: path
description: The game identifier
required: true
type: integer
format: int32
- name: drawNumber
in: path
description: Draw number to search for
required: true
type: integer
format: int32
responses:
'200':
description: OK
schema:
$ref: '#/definitions/infostoreDrawV1'
responseSchema:
$ref: '#/definitions/infostoreDrawV1'
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreIIFApplicationException'
responseSchema:
$ref: '#/definitions/infostoreIIFApplicationException'
'401':
description: AUTHENTICATION ERROR
schema:
$ref: '#/definitions/infostoreIIFApplicationException'
responseSchema:
$ref: '#/definitions/infostoreIIFApplicationException'
'/api/v1.0/tickets/categories/{id}/sub-categories':
get:
tags:
- Ticket Categories Configuration
summary: Retrieve subcategories for a ticket category
description: Retrieve subcategories for a ticket category
operationId: getTicketCategorySubCategories
produces:
- application/json
parameters:
- name: id
in: path
description: The ticket category id
required: true
type: integer
format: int32
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
type: array
items:
$ref: '#/definitions/consumablesTicketSubCategoryDTO'
responseSchema:
type: array
items:
$ref: '#/definitions/consumablesTicketSubCategoryDTO'
post:
tags:
- Ticket Categories Configuration
summary: Register a new subcategory for a ticket category
description: Register a new subcategory for a ticket category
operationId: registerTicketCategorySubCategy
produces:
- application/json
parameters:
- name: id
in: path
description: The ticket category id
required: true
type: integer
format: int32
- in: body
name: body
required: false
schema:
$ref: '#/definitions/consumablesThe subcategory registration request'
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesTicketSubCategoryDTO'
responseSchema:
$ref: '#/definitions/consumablesTicketSubCategoryDTO'
/api/v1.0/promotions/verification:
post:
tags:
- promotions
summary: evaluate a promotion
description: evaluate a promotion
operationId: postPromotionsVerification
produces:
- application/json
parameters:
- name: type
in: query
description: The type of evaluation
required: false
type: string
enum:
- play
- voucher
- name: xactionid
in: query
description: transaction id
required: true
type: integer
format: int32
- name: Operator
in: header
description: Operator
required: true
type: integer
format: int32
- name: Client
in: header
description: Client
required: true
type: integer
format: int32
- name: Channel
in: header
description: Channel
required: true
type: integer
format: int32
- name: Guid
in: header
description: Guid
required: true
type: string
- name: outcomeid
in: query
description: transaction id
required: false
type: integer
format: int32
- name: Retailer
in: header
description: Retailer
required: false
type: integer
format: int32
- name: PlayerId
in: header
description: PlayerId
required: false
type: integer
format: int32
- name: PlayerType
in: header
description: PlayerType
required: false
type: integer
format: int32
- name: TerminalType
in: header
description: TerminalType
required: false
type: integer
format: int32
- in: body
name: body
description: object that needs to verify promotion
required: true
schema:
$ref: '#/definitions/promotionenginePromotionBody'
responses:
'200':
description: Expected response to a valid request
examples: {}
schema:
type: array
items:
$ref: '#/definitions/promotionenginePromoReply'
responseSchema:
type: array
items:
$ref: '#/definitions/promotionenginePromoReply'
default:
description: Error
schema:
$ref: '#/definitions/promotionengineError'
responseSchema:
$ref: '#/definitions/promotionengineError'
'/api/v2.0/draws/{gameId}/draw-id/{fromDrawId}/{toDrawId}':
get:
tags:
- Draw operations V2.0
summary: Get draws for a game by draw id range
description: Get draws for a game using a draw number range.
operationId: getDrawsForGame
produces:
- application/json
parameters:
- name: gameId
in: path
description: Game identifier
required: true
type: integer
format: int32
- name: fromDrawId
in: path
description: The start draw id
required: true
type: integer
format: int32
- name: toDrawId
in: path
description: The end draw id
required: true
type: integer
format: int32
- name: page
in: query
description: Page number
required: false
type: integer
default: 0
- name: limit
in: query
description: Results per page
required: false
type: integer
default: 10
maximum: 100
minimum: 1
- name: sort
in: query
description: 'Sorting order. Options: asc, desc. Default is desc.'
required: false
type: string
default: desc
- name: column
in: query
description: 'Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.'
required: false
type: string
default: drawId
responses:
'200':
description: OK
schema:
$ref: '#/definitions/infostorePageDrawV2'
responseSchema:
$ref: '#/definitions/infostorePageDrawV2'
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'/api/v1.0/subscribers/{subscriberId}':
put:
tags:
- Subscriber operations
summary: Update a subscriber
description: ''
operationId: updateGame
produces:
- application/json
parameters:
- name: subscriberId
in: path
description: The subscriber id
required: true
type: integer
format: int32
- in: body
name: body
description: The subscriber data
required: false
schema:
$ref: '#/definitions/infostoreSubscriberUpdateRequest'
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/infostoreSubscriberDTO'
responseSchema:
$ref: '#/definitions/infostoreSubscriberDTO'
delete:
tags:
- Subscriber operations
summary: Delete a subscriber
description: ''
operationId: deleteGame
produces:
- application/json
parameters:
- name: subscriberId
in: path
description: The subscriber id
required: true
type: integer
format: int32
responses:
default:
description: successful operation
'/api/v3.0/draws/{gameId}/draw-id/{fromDrawId}/{toDrawId}':
get:
tags:
- Draw operations V3.0
summary: Get draws for a game by draw id range
description: Get draws for a game using a draw number range.
operationId: getDrawsForGame
produces:
- application/json
parameters:
- name: gameId
in: path
description: Game identifier
required: true
type: integer
format: int32
- name: fromDrawId
in: path
description: The start draw id
required: true
type: integer
format: int32
- name: toDrawId
in: path
description: The end draw id
required: true
type: integer
format: int32
- name: status
in: query
description: 'Filter draws by status, multiple statuses filters allowed. By default results status is used.'
required: false
type: array
items:
type: string
enum:
- future
- active
- pendingResults
- results
collectionFormat: multi
- name: property
in: query
description: 'Specifies which properties to include, by default all properties are included in the response'
required: false
type: array
items:
type: string
collectionFormat: multi
- name: Etag
in: header
description: 'Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag'
required: false
type: string
- name: page
in: query
description: Page number
required: false
type: integer
default: 0
- name: limit
in: query
description: Results per page
required: false
type: integer
default: 10
maximum: 100
minimum: 1
- name: sort
in: query
description: 'Sorting order. Options: asc, desc. Default is desc.'
required: false
type: string
default: desc
- name: column
in: query
description: 'Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.'
required: false
type: string
default: drawId
responses:
'200':
description: OK
schema:
$ref: '#/definitions/infostorePageDrawV3'
responseSchema:
$ref: '#/definitions/infostorePageDrawV3'
'304':
description: NOT MODIFIED
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'500':
description: APPLICATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'502':
description: BAD GATEWAY
'503':
description: SERVICE UNAVAILABLE
'/api/v1.0/promotions/{promoId}/conductDraw':
post:
tags:
- promotions
summary: Conduct Draw
description: Conduct Draw
operationId: postConductDraw
parameters:
- name: promoId
in: path
description: The promotion id to conduct draw
required: true
type: integer
format: int32
- name: Guid
in: header
description: Guid
required: true
type: string
responses:
'200':
description: Expected response to a valid request
default:
description: unexpected error
schema:
$ref: '#/definitions/promotionengineError'
responseSchema:
$ref: '#/definitions/promotionengineError'
'/api/v1.0/games/{gameId}/versions':
get:
tags:
- Games
summary: Returns a list with all records for a specific game
description: |-
<p>This API call returns all the configurations for the given game. A game is considered defined when there is a game record with status <strong>Inactive</strong>, <strong>Active</strong> or <strong>Expired</strong>.</p>
<p>See the table below the possible status codes it replies in case of a non 200 response.</p>
<table>
<thead>
<tr>
<th><em>Code</em></th>
<th><em>Description</em></th>
<th><em>Http Code</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>1004</td>
<td>Unauthorized</td>
<td>401</td>
</tr>
<tr>
<td>5004</td>
<td>Game not found</td>
<td>404</td>
</tr>
<tr>
<td>5006</td>
<td>Unexpected error</td>
<td>500</td>
</tr>
</tbody>
</table>
operationId: getV10GamesGameidVersions
parameters:
- name: authorization
in: header
description: Provide the JWT token. The value should start with Bearer
required: true
type: string
- name: guid
in: header
description: Provide GUID string
required: true
type: string
- name: gameId
in: path
description: The id of the game.
required: true
type: integer
responses:
'200':
description: OK
schema:
$ref: '#/definitions/gamemanagementGameParametersResources'
responseSchema:
$ref: '#/definitions/gamemanagementGameParametersResources'
'401':
description: The request is not authorized
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'404':
description: A game with the given id was not found
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'500':
description: Internal Server Error
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'/api/v1.0/states/{stateId}':
get:
tags:
- Entity state operations
summary: Get entity state by state id
description: Get entity by state id. It contains the entity body as well as a container object that stores the state id and the namespace.
operationId: getState
produces:
- application/json
parameters:
- name: stateId
in: path
description: State identifier
required: true
type: integer
format: int64
- name: subscriberId
in: query
description: Subscriber id
required: false
type: integer
format: int32
responses:
'200':
description: OK
schema:
$ref: '#/definitions/infostoreEntityStateDTO'
responseSchema:
$ref: '#/definitions/infostoreEntityStateDTO'
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'404':
description: NOT FOUND
'500':
description: APPLICATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'502':
description: BAD GATEWAY
'503':
description: SERVICE UNAVAILABLE
/api/v1.0/terminal-reports/accounting-period-summary:
get:
tags:
- Accounting Terminal Reports
summary: Summary Report
description: ''
operationId: getSummaryReportx
produces:
- application/json
parameters:
- name: retailerId
in: header
required: true
type: integer
format: int32
- name: terminalId
in: header
required: true
type: integer
format: int32
- name: operatorId
in: header
required: true
type: integer
format: int32
- name: qRetailerId
in: query
required: false
type: integer
format: int32
- name: qTerminalId
in: query
required: false
type: integer
format: int32
- name: date
in: query
required: false
type: string
format: date-time
- name: total
in: query
required: false
type: array
items:
type: string
collectionFormat: multi
- name: keyValue
in: query
required: false
type: array
items:
type: string
collectionFormat: multi
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/pulseRetailerSummaryReport'
responseSchema:
$ref: '#/definitions/pulseRetailerSummaryReport'
'/api/v3.0/draws/{gameId}/{drawId}':
get:
tags:
- Draw operations V3.0
summary: Get draw
description: Get draw for a game by draw id
operationId: getDrawForGame
produces:
- application/json
parameters:
- name: gameId
in: path
description: Game identifier
required: true
type: integer
format: int32
- name: drawId
in: path
description: Draw identifier
required: true
type: integer
format: int32
- name: status
in: query
description: 'Status filter. If the draw found is not in one of the specified statuses, the response will be empty. Multiple statuses filters allowed. By default no status filter is applied.'
required: false
type: array
items:
type: string
enum:
- future
- active
- pendingResults
- results
collectionFormat: multi
- name: property
in: query
description: 'Specifies which properties to include, by default all properties are included in the response'
required: false
type: array
items:
type: string
collectionFormat: multi
- name: includeAnimation
in: query
description: Parameter to force inclusion of animation object
required: false
type: boolean
- name: Etag
in: header
description: 'Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag'
required: false
type: string
responses:
'200':
description: OK
schema:
$ref: '#/definitions/infostoreDrawV3'
responseSchema:
$ref: '#/definitions/infostoreDrawV3'
'304':
description: NOT MODIFIED
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'404':
description: NOT FOUND
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'500':
description: APPLICATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'502':
description: BAD GATEWAY
'503':
description: SERVICE UNAVAILABLE
'/api/v1.0/draws/{gameStateId}/{drawNumber}/prizes':
get:
tags:
- Draw operations V1.0
summary: Get Prize Categories
description: 'Get the prize categories for a specific game and draw, as a list of <i>''DrawResult''</i> objects.'
operationId: getPrizeCategories
produces:
- application/json
- application/xml
parameters:
- name: gameStateId
in: path
description: The game identifier
required: true
type: integer
format: int32
- name: drawNumber
in: path
description: The draw number to search the prizes for
required: true
type: integer
format: int32
responses:
'200':
description: successful operation
schema:
type: array
items:
$ref: '#/definitions/infostorePrizeCategoryV1'
responseSchema:
type: array
items:
$ref: '#/definitions/infostorePrizeCategoryV1'
/api/v1.0/promotions/vouchers/prepared:
post:
tags:
- promotions
summary: redeem a prepared voucher
description: redeem a prepared voucher
operationId: redeemVouchersPrepared
produces:
- application/json
parameters:
- name: xactionid
in: query
description: transaction id
required: true
type: integer
format: int32
- name: voucherid
in: query
description: voucher id
required: true
type: integer
format: int32
- name: Operator
in: header
description: Operator
required: true
type: integer
format: int32
- name: Client
in: header
description: Client
required: true
type: integer
format: int32
- name: Channel
in: header
description: Channel
required: true
type: integer
format: int32
- name: Guid
in: header
description: Guid
required: true
type: string
- name: Cost
in: header
description: cost
required: true
type: integer
format: int32
- name: verify
in: query
description: verify flag
required: false
type: boolean
- name: Retailer
in: header
description: Retailer
required: false
type: integer
format: int32
- name: PlayerId
in: header
description: PlayerId
required: false
type: integer
format: int32
- name: PlayerType
in: header
description: PlayerType
required: false
type: integer
format: int32
- name: TerminalType
in: header
description: TerminalType
required: false
type: integer
format: int32
responses:
'200':
description: Expected response to a valid request
examples: {}
schema:
type: array
items:
$ref: '#/definitions/promotionenginePromoReply'
responseSchema:
type: array
items:
$ref: '#/definitions/promotionenginePromoReply'
default:
description: Error
schema:
$ref: '#/definitions/promotionengineError'
responseSchema:
$ref: '#/definitions/promotionengineError'
security: []
x-unitTests: []
x-operation-settings:
CollectParameters: false
AllowDynamicQueryParameters: false
AllowDynamicFormParameters: false
IsMultiContentStreaming: false
'/api/v3.0/draws/{gameId}/active':
get:
tags:
- Draw operations V3.0
summary: Get the active draw for a game
description: Get the active draw for a game
operationId: getActiveDrawForGame
produces:
- application/json
parameters:
- name: gameId
in: path
description: Game identifier
required: true
type: integer
format: int32
- name: property
in: query
description: 'Specifies which properties to include, by default all properties are included in the response'
required: false
type: array
items:
type: string
collectionFormat: multi
- name: Etag
in: header
description: 'Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag'
required: false
type: string
responses:
'200':
description: OK
schema:
$ref: '#/definitions/infostoreDrawV3'
responseSchema:
$ref: '#/definitions/infostoreDrawV3'
'304':
description: NOT MODIFIED
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'500':
description: APPLICATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'502':
description: BAD GATEWAY
'503':
description: SERVICE UNAVAILABLE
'/api/v2.0/draws/{gameId}/{drawId}':
get:
tags:
- Draw operations V2.0
summary: Get draw
description: Get draw for a game by draw id
operationId: getDrawForGame
produces:
- application/json
parameters:
- name: gameId
in: path
description: Game identifier
required: true
type: integer
format: int32
- name: drawId
in: path
description: Draw identifier
required: true
type: integer
format: int32
responses:
'200':
description: OK
schema:
$ref: '#/definitions/infostoreDrawV2'
responseSchema:
$ref: '#/definitions/infostoreDrawV2'
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
/api/v1.0/tickets/categories/bulk:
post:
tags:
- Ticket Categories Configuration
summary: Upload consumables
description: Upload consumables
operationId: bulkInsertConsumables
produces:
- application/json
parameters:
- in: body
name: body
required: false
schema:
type: array
items:
$ref: '#/definitions/consumablesTicketCategoryBulkItem'
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesThe consumable bulk insert response'
responseSchema:
$ref: '#/definitions/consumablesThe consumable bulk insert response'
'/api/v1.0/games/{gameId}/channels/versions/active':
get:
tags:
- ChannelGames
summary: Returns the active channel record
description: |-
<p>This API call returns the configuration for the <strong>active</strong> channel record for the given game, operator and channel.</p>
<p>See the table below the possible status codes it replies in case of a non 200 response.</p>
<table>
<thead>
<tr>
<th><em>Code</em></th>
<th><em>Description</em></th>
<th><em>Http Code</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>1004</td>
<td>Unauthorized</td>
<td>401</td>
</tr>
<tr>
<td>5004</td>
<td>Active channel record not found</td>
<td>404</td>
</tr>
<tr>
<td>5006</td>
<td>Something went wrong</td>
<td>500</td>
</tr>
</tbody>
</table>
operationId: getV10GamesGameidChannelsVersionsActive
parameters:
- name: authorization
in: header
description: Provide the JWT token. The value should start with Bearer
required: true
type: string
- name: guid
in: header
description: Provide GUID string
required: true
type: string
- name: gameId
in: path
description: The game id
required: true
type: integer
- name: operator
in: query
description: Operator Id
required: true
type: number
- name: channel
in: query
description: Channel Id
required: true
type: number
responses:
'200':
description: OK
schema:
$ref: '#/definitions/gamemanagementGameChannelResource'
responseSchema:
$ref: '#/definitions/gamemanagementGameChannelResource'
'401':
description: The request is not authorized
'404':
description: A game with the given id was not found
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'500':
description: Internal Server Error
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'/api/v2.0/draws/{gameId}/upcoming/{limit}':
get:
tags:
- Draw operations V2.0
summary: Get upcoming draws for a game
description: Get upcoming draws for a game. By default the active draw is included in the response if it exists.
operationId: getUpcomingDraws
produces:
- application/json
parameters:
- name: gameId
in: path
description: Game identifier
required: true
type: integer
format: int32
- name: limit
in: path
description: 'Limit, the number of total draws'
required: true
type: integer
maximum: 100
minimum: 1
format: int32
- name: includeActive
in: query
description: Whether to include the active draw if it exists
required: false
type: boolean
responses:
'200':
description: OK
schema:
type: array
items:
$ref: '#/definitions/infostoreDrawV2'
responseSchema:
type: array
items:
$ref: '#/definitions/infostoreDrawV2'
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
/api/v1.0/products/subscriptions:
get:
tags:
- ProductBundling
summary: Returns a list with all of Defined Active and Available for Subscriptions Products
description: |-
<p>This API call returns a list with the information for all <strong>active</strong> product that are also available for subscription. </p>
<p>See the table below the possible status codes it replies in case of a non 200 response.</p>
<table>
<thead>
<tr>
<th><em>Code</em></th>
<th><em>Description</em></th>
<th><em>Http Code</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>1004</td>
<td>Unauthorized</td>
<td>401</td>
</tr>
<tr>
<td>5006</td>
<td>Unexpected error</td>
<td>500</td>
</tr>
</tbody>
</table>
operationId: getV10ProductsSubscriptions
parameters:
- name: authorization
in: header
description: Provide the JWT token. The value should start with Bearer
required: true
type: string
- name: guid
in: header
description: Provide GUID string
required: true
type: string
responses:
'200':
description: OK
schema:
$ref: '#/definitions/gamemanagementProducts'
responseSchema:
$ref: '#/definitions/gamemanagementProducts'
'401':
description: The request is not authorized
'404':
description: A game with the given id was not found
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'500':
description: Internal Server Error
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
/api/v1.0/terminal-reports/date-range-summary:
get:
tags:
- Accounting Terminal Reports
summary: Summary Report
description: ''
operationId: getDailyReport
produces:
- application/json
parameters:
- name: retailerId
in: header
required: true
type: integer
format: int32
- name: terminalId
in: header
required: true
type: integer
format: int32
- name: operatorId
in: header
required: true
type: integer
format: int32
- name: qRetailerId
in: query
required: false
type: integer
format: int32
- name: qTerminalId
in: query
required: false
type: integer
format: int32
- name: period
in: query
description: '0: custom, 1: single day (offset), 2: current week'
required: true
type: integer
format: int32
- name: offset
in: query
required: false
type: integer
format: int32
- name: fromDate
in: query
required: false
type: string
format: date-time
- name: toDate
in: query
required: false
type: string
format: date-time
- name: total
in: query
required: false
type: array
items:
type: string
collectionFormat: multi
- name: keyValue
in: query
required: false
type: array
items:
type: string
collectionFormat: multi
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/pulseRetailerSummaryReport'
responseSchema:
$ref: '#/definitions/pulseRetailerSummaryReport'
/api/v1.0/consumables/bulk:
post:
tags:
- Consumables Configuration
summary: Upload consumables
description: Upload consumables
operationId: bulkInsertConsumables
produces:
- application/json
parameters:
- in: body
name: body
required: false
schema:
type: array
items:
$ref: '#/definitions/consumablesThe consumable bulk item'
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesThe consumable bulk insert response'
responseSchema:
$ref: '#/definitions/consumablesThe consumable bulk insert response'
'/api/v3.0/draws/{gameId}/last-result-and-active':
get:
tags:
- Draw operations V3.0
summary: Get the last draw with results or pending results and the active draw for a game.
description: Get the last draw with results or pending results and the active draw for a game. includeAnimation parameter can be used to force the retrieval of animation for the last resulted draw.
operationId: getLastAndActiveDraws
produces:
- application/json
parameters:
- name: gameId
in: path
description: Game identifier
required: true
type: integer
format: int32
- name: includeAnimation
in: query
description: Parameter to force inclusion of animation object
required: false
type: boolean
- name: status
in: query
description: The status in which the last draws should be. By default results and pendingResults are returned.
required: false
type: array
items:
type: string
enum:
- pendingResults
- results
collectionFormat: multi
- name: property
in: query
description: 'Specifies which properties to include, by default all properties are included in the response'
required: false
type: array
items:
type: string
collectionFormat: multi
- name: Etag
in: header
description: 'Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag'
required: false
type: string
responses:
'200':
description: OK
schema:
$ref: '#/definitions/infostoreLastResultDrawAndActiveV3'
responseSchema:
$ref: '#/definitions/infostoreLastResultDrawAndActiveV3'
'304':
description: NOT MODIFIED
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'404':
description: NOT FOUND
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'500':
description: APPLICATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'502':
description: BAD GATEWAY
'503':
description: SERVICE UNAVAILABLE
'/api/v1.0/retailers/{id}/operational-hours':
get:
tags:
- Retailer Management - Services
summary: Retieve Retailer Operational Hours
description: ''
operationId: getRetailerOperationalHours
produces:
- application/json
parameters:
- name: id
in: path
required: true
type: integer
format: int32
responses:
'200':
description: successful operation
schema:
type: array
items:
$ref: '#/definitions/pulseRetailerOperationalHourResponse'
responseSchema:
type: array
items:
$ref: '#/definitions/pulseRetailerOperationalHourResponse'
/oauth/refresh_token:
delete:
tags:
- Authentication
summary: Revoke the given refresh token
description: ''
operationId: revokeRefreshToken
parameters:
- name: token
in: query
required: true
type: string
- name: Authorization
in: header
description: Basic authorization
required: false
type: string
responses:
default:
description: successful operation
'/api/v1.0/tickets/{id}':
get:
tags:
- Tickets Configuration
summary: Retrieve a single ticket
description: Retrieve a single ticket
operationId: getTicket
produces:
- application/json
parameters:
- name: id
in: path
description: The ticket id
required: true
type: integer
format: int32
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesTicketDTO'
responseSchema:
$ref: '#/definitions/consumablesTicketDTO'
put:
tags:
- Tickets Configuration
summary: Update a ticket
description: "\n Update a ticket\n\n Possible error codes:\n\n| *Code*|                *Description*                             |\n|-------|----------------------------------------------------------|\n| 10002  |\tUnable to update closed ticket                 |\n|"
operationId: updateTicket
produces:
- application/json
parameters:
- name: id
in: path
description: The ticket id
required: true
type: integer
format: int32
- in: body
name: body
required: false
schema:
$ref: '#/definitions/consumablesThe ticket update request'
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesTicketDTO'
responseSchema:
$ref: '#/definitions/consumablesTicketDTO'
delete:
tags:
- Tickets Configuration
summary: Delete a ticket
description: Delete a ticket
operationId: deleteTicket
produces:
- application/json
parameters:
- name: id
in: path
description: The ticket id
required: true
type: integer
format: int32
- name: Authorization
in: header
required: false
type: string
responses:
default:
description: successful operation
'/api/v1.0/loyalty/profiles/{id}':
get:
tags:
- Loyalty Profiles Configuration
summary: Retrieve a single Loyalty Profile
description: ''
operationId: getLoyaltyProfile
produces:
- application/json
parameters:
- name: id
in: path
required: true
type: integer
format: int32
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesLoyaltyProfileDTO'
responseSchema:
$ref: '#/definitions/consumablesLoyaltyProfileDTO'
put:
tags:
- Loyalty Profiles Configuration
summary: Update a Loyalty Profile
description: ''
operationId: updateLoyaltyProfile
produces:
- application/json
parameters:
- name: id
in: path
required: true
type: integer
format: int32
- in: body
name: body
required: false
schema:
$ref: '#/definitions/consumablesLoyaltyProfileUpdateRequest'
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesLoyaltyProfileDTO'
responseSchema:
$ref: '#/definitions/consumablesLoyaltyProfileDTO'
delete:
tags:
- Loyalty Profiles Configuration
summary: Delete a Loyalty Profile
description: ''
operationId: deleteLoyaltyProfile
produces:
- application/json
parameters:
- name: id
in: path
required: true
type: integer
format: int32
- name: Authorization
in: header
required: false
type: string
responses:
default:
description: successful operation
'/api/v1.0/ats/documents/documentHash/{id}':
get:
tags:
- Retrieve document Service
summary: Get the report or status of it if not finished
description: Get the report or status of it if not finished
operationId: polling
consumes:
- application/json
produces:
- application/json
parameters:
- name: X-OECID
in: header
description: Execution Context ID Header. Will be received and must be used when logging and the same should be send back with the response in order to be able to correlate logs within the same context
required: true
type: string
- name: Authorization
in: header
description: Used to authenticate the caller. In the format of Authorization Bearer <Pre-Shared Access Token generated by the Gaming System>
required: true
type: string
- name: X-Auth-System-ID
in: header
description: Provided by the Gaming System and Identifies connecting System.
required: false
type: integer
format: int32
- name: id
in: path
description: The submitted report id
required: true
type: integer
format: int64
responses:
'200':
description: Report Created
headers:
X-OECID:
type: string
description: This is the same value as given in the request
schema:
$ref: '#/definitions/atsRetrieveDocumentsStatusCompleteDto'
responseSchema:
$ref: '#/definitions/atsRetrieveDocumentsStatusCompleteDto'
'202':
description: Accepted. The server is working on creating the data.
headers:
X-OECID:
type: string
description: This is the same value as given in the request
schema:
$ref: '#/definitions/atsRetrieveDocumentsStatusPendingDto'
responseSchema:
$ref: '#/definitions/atsRetrieveDocumentsStatusPendingDto'
'400':
description: Business Fault (e.g. Error talking to the Gaming System)
headers:
X-OECID:
type: string
description: This is the same value as given in the request
schema:
$ref: '#/definitions/atsAtsOpapErrorInfo'
responseSchema:
$ref: '#/definitions/atsAtsOpapErrorInfo'
'401':
description: Unauthorized Error
headers:
WWW_Authenticate:
type: string
description: UnauthorizedError
'404':
description: Document Not Found
headers:
X-OECID:
type: string
description: This is the same value as given in the request
schema:
type: string
responseSchema:
type: string
'500':
description: Runtime Fault
headers:
X-OECID:
type: string
description: This is the same value as given in the request
schema:
$ref: '#/definitions/atsAtsOpapErrorInfo'
responseSchema:
$ref: '#/definitions/atsAtsOpapErrorInfo'
put:
tags:
- Retrieve document Service
summary: Consumes ftp paths for given gameId and draws from L5.
description: Consumes ftp paths for given gameId and draws from L5.
operationId: updateDocuments
consumes:
- application/json
produces:
- application/json
parameters:
- name: id
in: path
description: The submitted report id
required: true
type: integer
format: int64
- in: body
name: body
description: L5 Retrieve Document when complete
required: true
schema:
$ref: '#/definitions/atsUpdateDocumentsRequest'
responses:
'200':
description: OK
schema:
type: string
responseSchema:
type: string
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/atsAtsOpapErrorInfo'
responseSchema:
$ref: '#/definitions/atsAtsOpapErrorInfo'
'404':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/atsAtsOpapErrorInfo'
responseSchema:
$ref: '#/definitions/atsAtsOpapErrorInfo'
'500':
description: APPLICATION ERROR
schema:
$ref: '#/definitions/atsAtsOpapErrorInfo'
responseSchema:
$ref: '#/definitions/atsAtsOpapErrorInfo'
'502':
description: BAD GATEWAY
'503':
description: SERVICE UNAVAILABLE
/api/v1.0/products:
get:
tags:
- Products Configuration
summary: Retrieve a page of all products
description: ''
operationId: findProducts
produces:
- application/json
parameters:
- name: Authorization
in: header
required: false
type: string
- name: page
in: query
required: false
type: integer
default: 0
- name: limit
in: query
required: false
type: integer
default: 10
- name: sort
in: query
required: false
type: string
default: asc
- name: column
in: query
required: false
type: string
default: name
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesPageProduct'
responseSchema:
$ref: '#/definitions/consumablesPageProduct'
/api/v1.0/wagers:
post:
tags:
- Wager operations V1.0
summary: it is used to play a wager
description: 'This method creates new wager resource(s) for Draw Based Games (dbg). </br></br><strong>Keno Game examples</strong><ul><li>Example 1: <a href="/swagger/examples/keno-request-sample-1.json">request</a> and <a href="/swagger/examples/keno-response-sample-1.json">response</a></br>In this example we have 1 board with a selection of 6 numbers.</li><li>Example 2: <a href="/swagger/examples/keno-request-sample-2.json">request</a> and <a href="/swagger/examples/keno-response-sample-2.json">response</a></br>In this example we have 1 board with a selection of 6 numbers, keno bonus, 3 multiple draws, 3 draw offsets and quick pick.</li><li>Example 3: <a href="/swagger/examples/keno-request-sample-3.json">request</a> and <a href="/swagger/examples/keno-response-sample-3.json">response</a></br>In this example we have a wager with 2 boards and 2 multiple draws. The first board has a selection of 4 numbers with multiplier 3, and the second board has a selection of 5 numbers with keno bonus and quick pick.</li></ul></br><strong>Joker Game examples</strong><ul><li>Example 1: <a href="/swagger/examples/joker-request-sample-1.json">request</a> and <a href="/swagger/examples/joker-response-sample-1.json">response</a></br>In this example we have 1 board with a selection of 5 numbers from the first panel and 1 number from the second panel.</li><li>Example 2: <a href="/swagger/examples/joker-request-sample-2.json">request</a> and <a href="/swagger/examples/joker-response-sample-2.json">response</a></br>In this example we have 2 boards. The first board has a selection of 6 numbers from the first panel and 1 number from the second panel andthe second has a selection of 5 number from the first panel and 2 number from the second panel.</li></ul></br><strong>Lotto Game examples</strong><ul><li>Example 1: <a href="/swagger/examples/lotto-request-sample-1.json">request</a> and <a href="/swagger/examples/lotto-response-sample-1.json">response</a></br>In this example we have 1 board with a selection of 6 numbers.</li><li>Example 2: <a href="/swagger/examples/lotto-request-sample-2.json">request</a> and <a href="/swagger/examples/lotto-response-sample-2.json">response</a></br>In this example we have 2 boards. The first board has a selection of 6 numbers and the second has a selection of 7 numbers.</li></ul></br><strong>Super3 Game examples</strong><ul><li>Example 1: <a href="/swagger/examples/super3-request-sample-1.json">request</a> and <a href="/swagger/examples/super3-response-sample-1.json">response</a></br>In this example we have 1 board.</li><li>Example 2: <a href="/swagger/examples/super3-request-sample-2.json">request</a> and <a href="/swagger/examples/super3-response-sample-2.json">response</a></br>In this example we have 2 boards.</li></ul></br><strong>Proto Game examples</strong><ul><li>Example 1: <a href="/swagger/examples/proto-request-sample-1.json">request</a> and <a href="/swagger/examples/proto-response-sample-1.json">response</a></br>In this example we have 1 board.</li><li>Example 2: <a href="/swagger/examples/proto-request-sample-2.json">request</a> and <a href="/swagger/examples/proto-response-sample-2.json">response</a></br>In this example we have 2 boards.</li></ul></br><strong>Propo Game examples</strong></br>The selections are: 1 for home win, 2 for visitor win and 4 for draw.<ul><li>Example 1: <a href="/swagger/examples/propo-request-sample-1.json">request</a> and <a href="/swagger/examples/propo-response-sample-1.json">response</a></br>In this example we have 1 board.</li><li>Example 2: <a href="/swagger/examples/propo-request-sample-2.json">request</a> and <a href="/swagger/examples/propo-response-sample-2.json">response</a></br>In this example we have 2 boards.</li></ul>'
operationId: postapiv10wagers_1
consumes:
- application/json
produces:
- application/json
parameters:
- name: Guid
in: header
required: true
type: string
- name: Channel
in: header
required: true
type: integer
format: int32
- name: Authorization
in: header
required: true
type: string
- name: Operator
in: header
required: true
type: integer
format: int32
- name: RetailerId
in: header
required: false
type: integer
format: int32
- name: TerminalId
in: header
required: false
type: integer
format: int32
- name: EmployeeId
in: header
required: false
type: integer
format: int32
- name: TerminalType
in: header
required: false
type: string
- name: Pin
in: header
required: false
type: integer
format: int32
- name: ParticipationMethod
in: header
required: false
type: string
- name: Bcode
in: header
required: false
type: integer
format: int32
- name: CrId
in: header
required: false
type: integer
format: int32
- in: body
name: body
required: false
schema:
$ref: '#/definitions/WagerPlayRequestModel'
responses:
'200':
description: OK
schema:
$ref: '#/definitions/PlayResponseModel'
responseSchema:
$ref: '#/definitions/PlayResponseModel'
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/FaultInfo'
responseSchema:
$ref: '#/definitions/FaultInfo'
'401':
description: AUTHORIZATION ERROR
'500':
description: APPLICATION ERROR
schema:
$ref: '#/definitions/FaultInfo'
responseSchema:
$ref: '#/definitions/FaultInfo'
'502':
description: BAD GATEWAY
'503':
description: SERVICE UNAVAILABLE
/api/v1.0/games/summary:
get:
tags:
- Game operations V1.0
summary: Get games
description: Get all games
operationId: getGamesSummary
produces:
- application/json
parameters: []
responses:
'200':
description: OK
schema:
type: array
items:
$ref: '#/definitions/infostoreGameSummaryDTO'
responseSchema:
type: array
items:
$ref: '#/definitions/infostoreGameSummaryDTO'
'304':
description: NOT MODIFIED
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'500':
description: APPLICATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'502':
description: BAD GATEWAY
'503':
description: SERVICE UNAVAILABLE
/oauth/check_token:
get:
tags:
- Authentication
summary: Validate the given token
description: ''
operationId: checkToken
parameters:
- name: token
in: query
required: true
type: string
- name: Authorization
in: header
description: Basic authorization
required: false
type: string
responses:
'200':
description: successful operation
schema:
type: object
additionalProperties:
type: object
properties: {}
responseSchema:
type: object
additionalProperties:
type: object
properties: {}
/api/v1.0/games/active:
get:
tags:
- Games
summary: Returns a list with all active records for all games
description: |-
<p>This API call returns the configuration for all <strong>active</strong> games.</p>
<p>See the table below the possible status codes it replies in case of a non 200 response.</p>
<table>
<thead>
<tr>
<th><em>Code</em></th>
<th><em>Description</em></th>
<th><em>Http Code</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>1004</td>
<td>Unauthorized</td>
<td>401</td>
</tr>
<tr>
<td>5006</td>
<td>Unexpected error</td>
<td>500</td>
</tr>
</tbody>
</table>
operationId: getV10GamesActive
parameters:
- name: authorization
in: header
description: Provide the JWT token. The value should start with Bearer
required: true
type: string
- name: guid
in: header
description: Provide GUID string
required: true
type: string
responses:
'200':
description: OK
schema:
$ref: '#/definitions/gamemanagementGameParametersResources'
responseSchema:
$ref: '#/definitions/gamemanagementGameParametersResources'
'401':
description: The request is not authorized
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'500':
description: Internal Server Error
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'/api/v1.0/retailers/{id}/games/{gameId}/payment-level':
get:
tags:
- Retailer Management - Services
summary: Retieve Retailer Payment Level
description: ''
operationId: getRetailerPayLevel
produces:
- application/json
parameters:
- name: id
in: path
required: true
type: integer
format: int32
- name: gameId
in: path
required: true
type: integer
format: int32
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/pulseRetailerPaymentLevelView'
responseSchema:
$ref: '#/definitions/pulseRetailerPaymentLevelView'
/api/v1.0/promotions/creation:
post:
tags:
- promotions
summary: Create vouchers
description: Create vouchers
operationId: postCreateVouchers
parameters:
- in: body
name: body
description: object that needs to create voucher
required: true
schema:
$ref: '#/definitions/promotionengineCreateVouchers'
responses:
'200':
description: Expected response to a valid request
default:
description: Error
schema:
$ref: '#/definitions/promotionengineError'
responseSchema:
$ref: '#/definitions/promotionengineError'
'/api/v1.0/retailers/{id}/incentives':
get:
tags:
- Retailer Management - Services
summary: Retieve a page of Retailer Incentives
description: ''
operationId: getRetailerIncentives
produces:
- application/json
parameters:
- name: id
in: path
required: true
type: integer
format: int32
- name: completed
in: query
required: false
type: boolean
- name: active
in: query
required: false
type: boolean
- name: page
in: query
required: false
type: integer
default: 0
- name: limit
in: query
required: false
type: integer
default: 10
- name: sort
in: query
required: false
type: string
default: asc
- name: column
in: query
required: false
type: string
default: description
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/pulsePageRetailerIncentiveDTO'
responseSchema:
$ref: '#/definitions/pulsePageRetailerIncentiveDTO'
/api/v1.0/segments/snapshots:
get:
tags:
- Pulse Services
summary: Retieve a page of Segment Snapshots
description: ''
operationId: getSegmentSnapshots
produces:
- application/json
parameters:
- name: page
in: query
required: false
type: integer
default: 0
- name: limit
in: query
required: false
type: integer
default: 10
- name: sort
in: query
required: false
type: string
default: asc
- name: column
in: query
required: false
type: string
default: description
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/pulsePageSegmentSnapshotDTO'
responseSchema:
$ref: '#/definitions/pulsePageSegmentSnapshotDTO'
/api/v1.0/games:
get:
tags:
- Games
summary: Returns a list with all records for all games
description: |-
<p>This API call returns the configuration for all defined games. A game is considered defined when there is a game record with status <strong>Inactive</strong>, <strong>Active</strong> or <strong>Expired</strong>.</p>
<p>See the table below the possible status codes it replies in case of a non 200 response.</p>
<table>
<thead>
<tr>
<th><em>Code</em></th>
<th><em>Description</em></th>
<th><em>Http Code</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>1004</td>
<td>Unauthorized</td>
<td>401</td>
</tr>
<tr>
<td>5006</td>
<td>Unexpected error</td>
<td>500</td>
</tr>
</tbody>
</table>
operationId: getV10Games
parameters:
- name: authorization
in: header
description: Provide the JWT token. The value should start with Bearer
required: true
type: string
- name: guid
in: header
description: Provide GUID string
required: true
type: string
responses:
'200':
description: OK
schema:
$ref: '#/definitions/gamemanagementGameParametersResources'
responseSchema:
$ref: '#/definitions/gamemanagementGameParametersResources'
'401':
description: The request is not authorized
'500':
description: Internal Server Error
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'/api/v2.0/draws/{gameId}/active':
get:
tags:
- Draw operations V2.0
summary: Get the active draw for a game
description: Get the active draw for a game
operationId: getActiveDrawForGame
produces:
- application/json
parameters:
- name: gameId
in: path
description: Game identifier
required: true
type: integer
format: int32
responses:
'200':
description: OK
schema:
$ref: '#/definitions/infostoreDrawV2'
responseSchema:
$ref: '#/definitions/infostoreDrawV2'
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'/api/v1.0/games/{gameId}/jackpot':
get:
tags:
- Game operations V1.0
summary: Get current jackpots for game
description: ''
operationId: getCurrentJackpot
produces:
- application/json
parameters:
- name: gameId
in: path
description: Game identifier
required: true
type: integer
format: int32
responses:
'200':
description: OK
schema:
$ref: '#/definitions/infostoreJackpotDTO'
responseSchema:
$ref: '#/definitions/infostoreJackpotDTO'
'304':
description: NOT MODIFIED
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'500':
description: APPLICATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'502':
description: BAD GATEWAY
'503':
description: SERVICE UNAVAILABLE
/api/v1.0/gamesinfo:
get:
tags:
- GamesInfo
summary: Returns basic information for all defined games
description: |-
<p>This API call returns basic information for all defined games, including the operators list. </p>
<p>Available filters</p>
<table>
<thead>
<tr>
<th><em>Name</em></th>
<th><em>Description</em></th>
<th><em>Required</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>gameFamilyId</td>
<td>Filter results by game family id</td>
<td>optional</td>
</tr>
<tr>
<td>onlyActive</td>
<td>Unexpected error</td>
<td>optional</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>See the table below the possible status codes it replies in case of a non 200 response.</p>
<table>
<thead>
<tr>
<th><em>Code</em></th>
<th><em>Description</em></th>
<th><em>Http Code</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>1004</td>
<td>Unauthorized</td>
<td>401</td>
</tr>
<tr>
<td>5006</td>
<td>Unexpected error</td>
<td>500</td>
</tr>
</tbody>
</table>
operationId: getV10Gamesinfo
parameters:
- name: authorization
in: header
description: Provide the JWT token. The value should start with Bearer
required: true
type: string
- name: guid
in: header
description: Provide GUID string
required: true
type: string
- name: gameFamilyId
in: query
description: Game Family Id
required: false
type: integer
- name: onlyActive
in: query
description: Return only games that are currently active
required: false
type: boolean
responses:
'200':
description: OK
schema:
$ref: '#/definitions/gamemanagementGamesInfo'
responseSchema:
$ref: '#/definitions/gamemanagementGamesInfo'
'401':
description: The request is not authorized
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'404':
description: A game with the given id was not found
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'500':
description: Unexpected error occurred
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
default:
description: OK
/api/v1.0/ats/documents/documentHash:
get:
tags:
- Retrieve document Service
summary: ATS will use this in order to instruct the server to create a document and generate its hash value for verification purposes.
description: ''
operationId: retrieveDocument
produces:
- application/json
parameters:
- name: X-OECID
in: header
description: Execution Context ID Header. Will be received and must be used when logging and the same should be send back with the response in order to be able to correlate logs within the same context
required: true
type: string
- name: Authorization
in: header
description: Used to authenticate the caller. In the format of Authorization Bearer <Pre-Shared Access Token generated by the Gaming System>
required: true
type: string
- name: X-Auth-System-ID
in: header
description: Provided by the Gaming System and Identifies connecting System.
required: false
type: integer
format: int32
- name: systemId
in: query
description: The systemId from which to get the hash.
required: true
type: integer
format: int32
- name: documentTypeId
in: query
description: The document type id from which to get the hash.
required: true
type: integer
format: int32
enum:
- 1
- 2
- name: documentId
in: query
description: The documentId from which to get the hash.
required: true
type: string
responses:
'200':
description: Success
schema:
$ref: '#/definitions/atsAtsRetrieveDocumentResponseDto'
responseSchema:
$ref: '#/definitions/atsAtsRetrieveDocumentResponseDto'
'400':
description: Business Fault (e.g. Error talking to the Gaming System)
headers:
X-OECID:
type: string
description: This is the same value as given in the request
schema:
$ref: '#/definitions/atsAtsOpapErrorInfo'
responseSchema:
$ref: '#/definitions/atsAtsOpapErrorInfo'
'401':
description: Unauthorized Error
headers:
WWW_Authenticate:
type: string
description: UnauthorizedError
'404':
description: Document Not Found
headers:
X-OECID:
type: string
description: This is the same value as given in the request
schema:
type: string
responseSchema:
type: string
'500':
description: Runtime Fault
headers:
X-OECID:
type: string
description: This is the same value as given in the request
schema:
$ref: '#/definitions/atsAtsOpapErrorInfo'
responseSchema:
$ref: '#/definitions/atsAtsOpapErrorInfo'
post:
tags:
- Retrieve document Service
summary: ATS will use this in order to instruct the server to create the hashes if documents for a specified date time period for verification purposes. The response could be synchronous if the System can generate the list in "real time" or asynchronous. If asynchronous an id is returned in order for the ATS to poll for the data.
description: ''
operationId: retrieveDocuments
consumes:
- application/json
produces:
- application/json
parameters:
- name: X-OECID
in: header
description: Execution Context ID Header. Will be received and must be used when logging and the same should be send back with the response in order to be able to correlate logs within the same context
required: true
type: string
- name: Authorization
in: header
description: Used to authenticate the caller. In the format of Authorization Bearer <Pre-Shared Access Token generated by the Gaming System>
required: true
type: string
- name: X-Auth-System-ID
in: header
description: Provided by the Gaming System and Identifies connecting System.
required: false
type: integer
format: int32
- in: body
name: body
description: The submit document request from L5
required: true
schema:
$ref: '#/definitions/atsAtsRetrieveDocumentsRequestDto'
responses:
'202':
description: Accepted. The server has started creating the report.
schema:
$ref: '#/definitions/atsAtsRetrieveDocumentsResponseDto'
responseSchema:
$ref: '#/definitions/atsAtsRetrieveDocumentsResponseDto'
'400':
description: Business Fault (e.g. Error talking to the Gaming System)
headers:
X-OECID:
type: string
description: This is the same value as given in the request
schema:
$ref: '#/definitions/atsAtsOpapErrorInfo'
responseSchema:
$ref: '#/definitions/atsAtsOpapErrorInfo'
'401':
description: Unauthorized Error
headers:
WWW_Authenticate:
type: string
description: UnauthorizedError
'404':
description: Document Not Found
headers:
X-OECID:
type: string
description: This is the same value as given in the request
schema:
type: string
responseSchema:
type: string
'500':
description: Runtime Fault
headers:
X-OECID:
type: string
description: This is the same value as given in the request
schema:
$ref: '#/definitions/atsAtsOpapErrorInfo'
responseSchema:
$ref: '#/definitions/atsAtsOpapErrorInfo'
'/api/v1.0/promotions/{promoId}/message':
get:
tags:
- promotions
summary: get a specific message by version and type
description: get a specific message by version and type
operationId: getMessageByPromoId
produces:
- application/json
parameters:
- name: promoId
in: path
description: The id of the promotion to retrieve messages
required: true
type: integer
format: int32
- name: type
in: query
description: 'The type of the promotion message. Available values :promotionTitle, messageTitle, messageBody, messageCDU, messageTerminal'
required: true
type: string
enum:
- promotionTitle
- messageTitle
- messageBody
- messageCDU
- messageTerminal
- name: Guid
in: header
description: Guid
required: true
type: string
- name: version
in: query
description: if version is not passed the latest message version will be searched
required: false
type: integer
format: int32
responses:
'200':
description: Expected response to a valid request
schema:
$ref: '#/definitions/promotionengineGetMessageTextReply'
responseSchema:
$ref: '#/definitions/promotionengineGetMessageTextReply'
default:
description: unexpected error
schema:
$ref: '#/definitions/promotionengineError'
responseSchema:
$ref: '#/definitions/promotionengineError'
/oauth/token_key:
get:
tags:
- Authentication
summary: Get the verification key for jwt token signatures
description: ''
operationId: getTokenKey
produces:
- application/json
parameters: []
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/authTokenKey'
responseSchema:
$ref: '#/definitions/authTokenKey'
/api/v1.0/retailers:
get:
tags:
- Retailer Management - Services
summary: Retieve a page of Retailers
description: ''
operationId: getRetailers
produces:
- application/json
parameters:
- name: retailerId
in: query
required: false
type: integer
format: int32
- name: name
in: query
required: false
type: string
- name: address
in: query
required: false
type: string
- name: status
in: query
description: '0: Inactive, 1: Active, 2: Pending, 3:Cancelled'
required: false
type: integer
format: int32
- name: page
in: query
required: false
type: integer
default: 0
- name: limit
in: query
required: false
type: integer
default: 10
- name: sort
in: query
required: false
type: string
default: asc
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/pulsePageRetailerDTO'
responseSchema:
$ref: '#/definitions/pulsePageRetailerDTO'
'/api/v1.0/retailers/{id}/rewards/{prizeId}':
put:
tags:
- Retailer Management - Services
summary: Reward Retailer Prize
description: ''
operationId: rewardPrize
produces:
- application/json
parameters:
- name: id
in: path
required: true
type: integer
format: int32
- name: prizeId
in: path
required: true
type: integer
format: int32
responses:
default:
description: successful operation
'/api/v1.0/tickets/categories/{id}/sub-categories/{subCatId}':
get:
tags:
- Ticket Categories Configuration
summary: Retrieve a subcategory for a ticket category
description: Retrieve a subcategory for a ticket category
operationId: getTicketCategorySubCategory
produces:
- application/json
parameters:
- name: id
in: path
description: The ticket category id
required: true
type: integer
format: int32
- name: subCatId
in: path
description: The subcategory id
required: true
type: integer
format: int32
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesTicketSubCategoryDTO'
responseSchema:
$ref: '#/definitions/consumablesTicketSubCategoryDTO'
put:
tags:
- Ticket Categories Configuration
summary: Update a subcategory for a ticket category
description: Update a subcategory for a ticket category
operationId: updateTicketCategorySubCategory
produces:
- application/json
parameters:
- name: id
in: path
description: The ticket category id
required: true
type: integer
format: int32
- name: subCatId
in: path
description: The subcategory id
required: true
type: integer
format: int32
- in: body
name: body
required: false
schema:
$ref: '#/definitions/consumablesThe subcategory update request'
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesTicketSubCategoryDTO'
responseSchema:
$ref: '#/definitions/consumablesTicketSubCategoryDTO'
delete:
tags:
- Ticket Categories Configuration
summary: Delete a subcategory for a ticket category
description: Delete a subcategory for a ticket category
operationId: deleteTicketCategorySubCategory
produces:
- application/json
parameters:
- name: id
in: path
description: The ticket category id
required: true
type: integer
format: int32
- name: subCatId
in: path
description: The subcategory id
required: true
type: integer
format: int32
- name: Authorization
in: header
required: false
type: string
responses:
default:
description: successful operation
/api/v1.0/loyalty/profiles:
get:
tags:
- Loyalty Profiles Configuration
summary: Retrieve a page of all Loyalty Profiles
description: ''
operationId: findAllLoyaltyProfiles
produces:
- application/json
parameters:
- name: Authorization
in: header
required: false
type: string
- name: page
in: query
required: false
type: integer
default: 0
- name: limit
in: query
required: false
type: integer
default: 10
- name: sort
in: query
required: false
type: string
default: asc
- name: column
in: query
required: false
type: string
default: id
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesPageLoyaltyProfileDTO'
responseSchema:
$ref: '#/definitions/consumablesPageLoyaltyProfileDTO'
post:
tags:
- Loyalty Profiles Configuration
summary: Register a new Loyalty Profile
description: ''
operationId: registerLoyaltyProfile
produces:
- application/json
parameters:
- in: body
name: body
required: false
schema:
$ref: '#/definitions/consumablesLoyaltyProfileRegistrationRequest'
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesLoyaltyProfileDTO'
responseSchema:
$ref: '#/definitions/consumablesLoyaltyProfileDTO'
/oauth/token:
post:
tags:
- Authentication
summary: Grant authorization token
description: ''
operationId: token
consumes:
- application/x-www-form-urlencoded
produces:
- application/json
parameters:
- name: grant_type
in: formData
description: 'The type of the authorization grant (password, refresh_token, client_credentials, authorization_code)'
required: true
type: string
- name: username
in: formData
description: The username/email of the user to be authenticated. Required if grant_type='password'
required: false
type: string
- name: password
in: formData
description: The password of the user to be authenticated. Required if grant_type='password'
required: false
type: string
- name: refresh_token
in: formData
description: The refresh token instead of username/password. Required if grant_type='refresh_token'
required: false
type: string
- name: redirectUri
in: formData
description: The redirect uri if grant type='authorization_code'
required: false
type: string
- name: code
in: formData
description: The code if grant type='authorization_code'
required: false
type: string
- name: scope
in: formData
description: The requested scope (space separated)
required: false
type: string
- name: Authorization
in: header
description: Basic authorization
required: true
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/authTokenResponse'
responseSchema:
$ref: '#/definitions/authTokenResponse'
delete:
tags:
- Authentication
summary: Revoke the given token
description: ''
operationId: revokeToken
parameters:
- name: token
in: query
required: true
type: string
- name: Authorization
in: header
description: Basic authorization
required: false
type: string
responses:
default:
description: successful operation
'/api/v1.0/games/{gameId}/versions/{recordId}':
get:
tags:
- Games
summary: Returns the specified record for the specified game
description: |-
<p>This API call returns the configuration for the given game record for the given game.</p>
<p>See the table below the possible status codes it replies in case of a non 200 response.</p>
<table>
<thead>
<tr>
<th><em>Code</em></th>
<th><em>Description</em></th>
<th><em>Http Code</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>1004</td>
<td>Unauthorized</td>
<td>401</td>
</tr>
<tr>
<td>5004</td>
<td>Game record not found</td>
<td>404</td>
</tr>
<tr>
<td>5006</td>
<td>Unexpected error</td>
<td>500</td>
</tr>
</tbody>
</table>
operationId: getV10GamesGameidVersionsRecordid
parameters:
- name: authorization
in: header
description: Provide the JWT token. The value should start with Bearer
required: true
type: string
- name: guid
in: header
description: Provide GUID string
required: true
type: string
- name: gameId
in: path
description: The id of the game.
required: true
type: integer
- name: recordId
in: path
description: The id of the record.
required: true
type: integer
responses:
'200':
description: OK
schema:
$ref: '#/definitions/gamemanagementGameParametersResource'
responseSchema:
$ref: '#/definitions/gamemanagementGameParametersResource'
'401':
description: The request is not authorized
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'500':
description: Internal Server Error
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'/api/v1.0/states/{stateId}/entity':
get:
tags:
- Entity state operations
summary: Get entity by state id
description: Get entity by state id. It contains only the entity body.
operationId: getEntityState
produces:
- application/json
parameters:
- name: stateId
in: path
description: State identifier
required: true
type: integer
format: int64
- name: subscriberId
in: query
description: Subscriber id
required: false
type: integer
format: int32
responses:
'200':
description: OK
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'404':
description: NOT FOUND
'500':
description: APPLICATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'502':
description: BAD GATEWAY
'503':
description: SERVICE UNAVAILABLE
'/api/v1.0/consumables/{id}':
get:
tags:
- Consumables Configuration
summary: Retrieve a single consumable
description: Retrieve a single consumable
operationId: getConsumable
produces:
- application/json
parameters:
- name: id
in: path
description: The consumable id
required: true
type: integer
format: int32
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesConsumableDTO'
responseSchema:
$ref: '#/definitions/consumablesConsumableDTO'
put:
tags:
- Consumables Configuration
summary: Update a consumable
description: "\n Update a consumable\n\n Possible error codes:\n\n| *Code*|                *Description*                             |\n|-------|----------------------------------------------------------|\n| 10003  |\tConsumable already in use                 |\n|"
operationId: updateConsumable
produces:
- application/json
parameters:
- name: id
in: path
description: The consumable id
required: true
type: integer
format: int32
- in: body
name: body
required: false
schema:
$ref: '#/definitions/consumablesThe consumable update request'
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesConsumableDTO'
responseSchema:
$ref: '#/definitions/consumablesConsumableDTO'
delete:
tags:
- Consumables Configuration
summary: Delete a consumable
description: Delete a consumable
operationId: deleteConsumable
produces:
- application/json
parameters:
- name: id
in: path
description: The consumable id
required: true
type: integer
format: int32
- name: Authorization
in: header
required: false
type: string
responses:
default:
description: successful operation
'/api/v3.0/draws/{gameId}/last/{limit}':
get:
tags:
- Draw operations V3.0
summary: Get last draws for a game
description: Get last draws for a game. By default the active draw is included in the response if it exists.
operationId: getLastDraws
produces:
- application/json
parameters:
- name: gameId
in: path
description: Game identifier
required: true
type: integer
format: int32
- name: limit
in: path
description: 'Limit, the number of total draws'
required: true
type: integer
maximum: 100
minimum: 1
format: int32
- name: includeActive
in: query
description: Whether to include the active draw if it exists
required: false
type: boolean
- name: status
in: query
description: The status in which the last draws should be. By default results and pendingResults are returned.
required: false
type: array
items:
type: string
enum:
- pendingResults
- results
collectionFormat: multi
- name: property
in: query
description: 'Specifies which properties to include, by default all properties are included in the response'
required: false
type: array
items:
type: string
collectionFormat: multi
- name: Etag
in: header
description: 'Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag'
required: false
type: string
responses:
'200':
description: OK
schema:
type: array
items:
$ref: '#/definitions/infostoreDrawV3'
responseSchema:
type: array
items:
$ref: '#/definitions/infostoreDrawV3'
'304':
description: NOT MODIFIED
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'500':
description: APPLICATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'502':
description: BAD GATEWAY
'503':
description: SERVICE UNAVAILABLE
'/api/v1.0/games/{gameId}/channels/versions/{channelRecordId}':
get:
tags:
- ChannelGames
summary: Returns the active channel record
description: |-
<p>This API call returns the configuration for the given channel record for the given game, operator and channel.</p>
<p>See the table below the possible status codes it replies in case of a non 200 response.</p>
<table>
<thead>
<tr>
<th><em>Code</em></th>
<th><em>Description</em></th>
<th><em>Http Code</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>1004</td>
<td>Unauthorized</td>
<td>401</td>
</tr>
<tr>
<td>5004</td>
<td>Channel record not found</td>
<td>404</td>
</tr>
<tr>
<td>5006</td>
<td>Unexpected error</td>
<td>500</td>
</tr>
</tbody>
</table>
operationId: getV10GamesGameidChannelsVersionsChannelrecordid
parameters:
- name: authorization
in: header
description: Provide the JWT token. The value should start with Bearer
required: true
type: string
- name: guid
in: header
description: Provide GUID string
required: true
type: string
- name: gameId
in: path
description: The game id
required: true
type: integer
- name: channelRecordId
in: path
description: The channel record id
required: true
type: integer
- name: operator
in: query
description: Operator Id
required: true
type: integer
- name: channel
in: query
description: Channel Id
required: true
type: integer
responses:
'200':
description: OK
schema:
$ref: '#/definitions/gamemanagementGameChannelResource'
responseSchema:
$ref: '#/definitions/gamemanagementGameChannelResource'
'401':
description: The request is not authorized
'404':
description: A channel game with the given ids was not found
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'500':
description: Internal Server Error
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
/api/v1.0/game-families:
get:
tags:
- Game Family Configuration
summary: Retrieve Game Families
description: ''
operationId: findGameFamilies
produces:
- application/json
parameters:
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
type: array
items:
$ref: '#/definitions/consumablesGameFamily'
responseSchema:
type: array
items:
$ref: '#/definitions/consumablesGameFamily'
'/api/v3.0/draws/{gameId}/upcoming/{limit}':
get:
tags:
- Draw operations V3.0
summary: Get upcoming draws for a game
description: Get upcoming(future) draws for a game and optionally the active one. By default the active draw is included in the response if it exists.
operationId: getUpcomingDraws
produces:
- application/json
parameters:
- name: gameId
in: path
description: Game identifier
required: true
type: integer
format: int32
- name: limit
in: path
description: 'Limit, the number of total draws'
required: true
type: integer
maximum: 100
minimum: 1
format: int32
- name: includeActive
in: query
description: Whether to include the active draw if it exists
required: false
type: boolean
- name: property
in: query
description: 'Specifies which properties to include, by default all properties are included in the response'
required: false
type: array
items:
type: string
collectionFormat: multi
- name: Etag
in: header
description: 'Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag'
required: false
type: string
responses:
'200':
description: OK
schema:
type: array
items:
$ref: '#/definitions/infostoreDrawV3'
responseSchema:
type: array
items:
$ref: '#/definitions/infostoreDrawV3'
'304':
description: NOT MODIFIED
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'500':
description: APPLICATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'502':
description: BAD GATEWAY
'503':
description: SERVICE UNAVAILABLE
'/api/v1.0/retailers/{id}/rewards':
get:
tags:
- Retailer Management - Services
summary: Retieve a page of Retailer Rewards
description: ''
operationId: getRetailerRewards
produces:
- application/json
parameters:
- name: id
in: path
required: true
type: integer
format: int32
- name: page
in: query
required: false
type: integer
default: 0
- name: limit
in: query
required: false
type: integer
default: 10
- name: sort
in: query
required: false
type: string
default: asc
- name: column
in: query
required: false
type: string
default: prizeName
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/pulsePage_RetailerReward'
responseSchema:
$ref: '#/definitions/pulsePage_RetailerReward'
'/api/v1.0/draws/{gameStateId}/{drawNumber}/draw':
get:
tags:
- Draw operations V1.0
summary: Get draw
description: 'Get the draw information for a specific game, for a specific number'
operationId: getDraw
produces:
- application/json
parameters:
- name: gameStateId
in: path
description: The game identifier
required: true
type: integer
format: int32
- name: drawNumber
in: path
description: Draw number to search for
required: true
type: integer
format: int32
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/infostoreDrawV1'
responseSchema:
$ref: '#/definitions/infostoreDrawV1'
'/api/v3.0/draws/{gameId}/draw-date/{fromDate}/{toDate}/draw-id':
get:
tags:
- Draw operations V3.0
summary: Get draw ids for a game by date range
description: Get draw ids for a game by date range.
operationId: getDrawIdsForGameByDate
produces:
- application/json
parameters:
- name: gameId
in: path
description: Game identifier
required: true
type: integer
format: int32
- name: fromDate
in: path
description: The from date filter. Must be in 'yyyy-MM-dd' format.
required: true
type: string
pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
- name: toDate
in: path
description: The to date filter. Must be in 'yyyy-MM-dd' format.
required: true
type: string
pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
- name: timezone
in: header
description: The timezone in which the date filters were provided. Default is UTC.
required: false
type: string
- name: status
in: query
description: 'Filter draws by status, multiple statuses filters allowed. By default results status is used.'
required: false
type: array
items:
type: string
enum:
- future
- active
- pendingResults
- results
collectionFormat: multi
- name: Etag
in: header
description: 'Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag'
required: false
type: string
responses:
'200':
description: OK
schema:
type: array
items:
type: integer
format: int32
responseSchema:
type: array
items:
type: integer
format: int32
'304':
description: NOT MODIFIED
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'500':
description: APPLICATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'502':
description: BAD GATEWAY
'503':
description: SERVICE UNAVAILABLE
/api/v1.0/promotions/cancellation:
put:
tags:
- promotions
summary: Cancel a promotion
description: Cancel a promotion
operationId: cancelPromotion
produces:
- application/json
parameters:
- name: xactionid
in: query
description: transaction id
required: true
type: integer
format: int32
- name: Guid
in: header
description: Guid
required: true
type: string
responses:
'200':
description: Success
default:
description: Error
schema:
$ref: '#/definitions/promotionengineError'
responseSchema:
$ref: '#/definitions/promotionengineError'
'/api/v1.0/products/{productId}/update':
post:
tags:
- ProductBundling
summary: Triggers the service to send notifications for the update
description: |-
<p>This API call triggers a mechanism via web sockets and notifies all connected clients with the configuration of the given product. This API call is used to notify clients when a change for the given product is made.</p>
<p>See the table below the possible status codes it replies in case of a non 200 response.</p>
<table>
<thead>
<tr>
<th><em>Code</em></th>
<th><em>Description</em></th>
<th><em>Http Code</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>1004</td>
<td>Unauthorized</td>
<td>401</td>
</tr>
<tr>
<td>5004</td>
<td>Product not found</td>
<td>404</td>
</tr>
<tr>
<td>5006</td>
<td>Unexpected error</td>
<td>500</td>
</tr>
</tbody>
</table>
operationId: postV10ProductsProductidUpdate
parameters:
- name: authorization
in: header
description: Provide the JWT token. The value should start with Bearer
required: true
type: string
- name: guid
in: header
description: Provide GUID string
required: true
type: string
- name: productId
in: path
description: The product id
required: true
type: integer
responses:
'200':
description: OK
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'401':
description: The request is not authorized
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'404':
description: A channel game with the given ids was not found
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'500':
description: Internal Server Error
schema:
$ref: '#/definitions/gamemanagementResponseOutput'
responseSchema:
$ref: '#/definitions/gamemanagementResponseOutput'
'/api/v3.0/draws/{gameId}/draw-date/{fromDate}/{toDate}':
get:
tags:
- Draw operations V3.0
summary: Get draws for a game by date range
description: Get draws for a game by date range.
operationId: getDrawsForGameByDate
produces:
- application/json
parameters:
- name: gameId
in: path
description: Game identifier
required: true
type: integer
format: int32
- name: fromDate
in: path
description: The from date filter. Must be in 'yyyy-MM-dd' format.
required: true
type: string
pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
- name: toDate
in: path
description: The to date filter. Must be in 'yyyy-MM-dd' format.
required: true
type: string
pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
- name: timezone
in: header
description: The timezone in which the date filters were provided. Default is UTC.
required: false
type: string
- name: status
in: query
description: 'Filter draws by status, multiple statuses filters allowed. By default results status is used.'
required: false
type: array
items:
type: string
enum:
- future
- active
- pendingResults
- results
collectionFormat: multi
- name: property
in: query
description: 'Specifies which properties to include, by default all properties are included in the response'
required: false
type: array
items:
type: string
collectionFormat: multi
- name: Etag
in: header
description: 'Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag'
required: false
type: string
- name: page
in: query
description: Page number
required: false
type: integer
default: 0
- name: limit
in: query
description: Results per page
required: false
type: integer
default: 10
maximum: 100
minimum: 1
- name: sort
in: query
description: 'Sorting order. Options: asc, desc. Default is desc.'
required: false
type: string
default: desc
- name: column
in: query
description: 'Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.'
required: false
type: string
default: drawId
responses:
'200':
description: OK
schema:
$ref: '#/definitions/infostorePageDrawV3'
responseSchema:
$ref: '#/definitions/infostorePageDrawV3'
'304':
description: NOT MODIFIED
'400':
description: VALIDATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'500':
description: APPLICATION ERROR
schema:
$ref: '#/definitions/infostoreFaultInfo'
responseSchema:
$ref: '#/definitions/infostoreFaultInfo'
'502':
description: BAD GATEWAY
'503':
description: SERVICE UNAVAILABLE
/api/v1.0/tickets:
get:
tags:
- Tickets Configuration
summary: Retrieve a page of all tickets
description: Retrieve a page of all tickets
operationId: findTickets
produces:
- application/json
parameters:
- name: insertedFrom
in: query
description: The inserted start date
required: false
type: string
format: date-time
- name: insertedTo
in: query
description: The inserted end date
required: false
type: string
format: date-time
- name: resolvedFrom
in: query
description: The resolved start date
required: false
type: string
format: date-time
- name: resolvedTo
in: query
description: The resolved end date
required: false
type: string
format: date-time
- name: retailerId
in: query
description: The ticket retailer id
required: false
type: integer
format: int32
- name: statusId
in: query
description: The ticket status id
required: false
type: integer
format: int32
- name: type
in: query
description: The ticket type
required: false
type: integer
format: int32
- name: keyword
in: query
description: The ticket keyword
required: false
type: string
- name: page
in: query
required: false
type: integer
default: 0
- name: limit
in: query
required: false
type: integer
default: 10
- name: sort
in: query
required: false
type: string
default: asc
- name: column
in: query
required: false
type: string
default: id
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesTicketPage'
responseSchema:
$ref: '#/definitions/consumablesTicketPage'
post:
tags:
- Tickets Configuration
summary: Register a new ticket
description: Register a new ticket
operationId: registerTicket
produces:
- application/json
parameters:
- in: body
name: body
required: false
schema:
$ref: '#/definitions/consumablesThe ticket registration request'
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesTicketDTO'
responseSchema:
$ref: '#/definitions/consumablesTicketDTO'
/api/v1.0/tickets/statuses:
get:
tags:
- Ticket Status Configuration
summary: Retrieve a page of all ticket statuses
description: Retrieve a page of all ticket statuses
operationId: findAllTicketStatuses
produces:
- application/json
parameters:
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
type: array
items:
$ref: '#/definitions/consumablesTicketStatusDTO'
responseSchema:
type: array
items:
$ref: '#/definitions/consumablesTicketStatusDTO'
post:
tags:
- Ticket Status Configuration
summary: Register a new ticket status
description: Register a new ticket status
operationId: registerTicketStatus
produces:
- application/json
parameters:
- in: body
name: body
required: false
schema:
$ref: '#/definitions/consumablesThe ticket status registration request'
- name: Authorization
in: header
required: false
type: string
responses:
'200':
description: successful operation
schema:
$ref: '#/definitions/consumablesTicketStatusDTO'
responseSchema:
$ref: '#/definitions/consumablesTicketStatusDTO'
definitions:
consumablesThe ticket status registration request:
type: object
required:
- name
- order
properties:
name:
type: string
minLength: 1
maxLength: 64
order:
type: integer
format: int32
description:
type: string
minLength: 0
maxLength: 128
promotionengineOutcomeMetaData:
type: object
properties:
RebateDiscount:
type: object
properties:
Type:
type: string
enum:
- Percentage
- Amount
Value:
type: integer
format: int32
description: ''
required:
- Type
- Value
IncrMultiDraws:
$ref: '#/definitions/promotionengineOutcomeIncrMultiDraws'
BonusMoney:
$ref: '#/definitions/promotionengineOutcomeBonusMoney'
RealMoney:
type: object
properties:
Amount:
type: integer
format: int32
description: ''
required:
- Amount
CashOutTurnover:
$ref: '#/definitions/promotionengineOutcomeCashOutTurnover'
SecondChanceDrawTickets:
type: object
properties:
secondChanceDrawTicket:
type: integer
format: int32
Gifts:
type: object
properties:
SerialNumber:
type: string
description: ''
Value:
type: integer
format: int32
description: ''
Description:
type: string
description: ''
required:
- SerialNumber
- Value
NormalBets:
$ref: '#/definitions/promotionengineOutcomeNormalBets'
FreeBets:
$ref: '#/definitions/promotionengineOutcomeFreeBets'
Vouchers:
type: object
properties:
voucherId:
type: integer
format: int32
description: ''
required:
- voucherId
title: OutcomeMetaData
consumablesConsumableCategoryDTO:
type: object
required:
- id
- name
properties:
id:
type: integer
format: int32
description: The consumable category id
name:
type: string
description: The consumable category name
minLength: 1
maxLength: 64
promotionenginePromotionBody:
type: object
properties:
metaData:
$ref: '#/definitions/promotionengineInputMetaData'
payload:
type: array
items:
type: object
properties: {}
title: PromotionBody
atsAtsRetrieveDocumentsResponseDto:
type: object
properties:
id:
type: integer
format: int64
msg:
type: string
consumablesOrderItem:
type: object
required:
- basePrice
- consumableId
- description
- price
- quantity
- type
properties:
type:
type: integer
format: int32
description: The order item type
consumableId:
type: integer
format: int32
description: The order item consumable id
description:
type: string
description: The order item description
price:
type: number
description: The order item price
quantity:
type: integer
format: int32
description: The order item quantity
basePrice:
type: number
description: The order item base price
categoryId:
type: integer
format: int32
description: The order item category id
categoryDescription:
type: string
description: The order item category description
gamemanagementGameParametersResources:
type: array
items:
$ref: '#/definitions/gamemanagementGameParametersResource'
consumablesLoyaltyPoint_:
type: object
required:
- credits
- gameId
- points
properties:
gameId:
type: integer
format: int32
points:
type: integer
format: int64
credits:
type: number
gamemanagementRoundingParams:
type: object
required:
- digits
- type
properties:
digits:
type: integer
description: Digits
type:
type: string
description: Type
infostoreJackpotCategoryAmountsDTO:
type: object
properties:
categoryId:
type: integer
format: int32
guaranteed:
type: number
format: double
estimated:
type: number
format: double
current:
type: number
format: double
promotionengineOutcomeFreeBets:
type: object
required:
- GameId
- NumFreeBets
- NumGroups
- NumMultipleDraws
properties:
GameId:
type: integer
format: int32
description: ''
NumFreeBets:
type: integer
format: int32
description: ''
NumGroups:
type: integer
format: int32
description: ''
NumMultipleDraws:
type: integer
format: int32
description: ''
Optional:
type: array
description: ''
items:
$ref: '#/definitions/promotionengineOutcomeOptionalFields'
title: FreeBets
atsAtsRetrieveDocumentResponseDto:
type: object
required:
- documentDate
- documentId
- documentSchemaVersion
- documentTypeId
- hash
- hashCreationTimeStamp
- systemId
properties:
systemId:
type: integer
format: int32
example: 0
description: System Id identifier
documentTypeId:
type: integer
format: int32
example: 1
description: Document Type Id
documentId:
type: string
example: string
description: Document Id
documentSchemaVersion:
type: integer
format: int32
example: 0
description: The Schema Version of the Document and Hash generated
hash:
type: string
example: string
description: The hash of the document as it is now in the system
hashCreationTimeStamp:
type: string
example: '2018-07-06T07:20:45.486Z'
description: The timestamp in UTC the hash was generated in the system. (Since this asynchronous the datetime that the hash as produced is returned)
documentDate:
type: string
example: '2018-07-06T07:20:45.486Z'
description: The creation timestamp in UTC of the document as it is now in the system
gamemanagementColumnLimit:
type: object
required:
- minBoards
- minColumns
properties:
betConfirmation:
type: integer
description: The bet confirmation
boardMultipliers:
$ref: '#/definitions/gamemanagementboardMultipliers'
maxBoards:
type: integer
description: The maximum boards
maxColumns:
type: integer
description: The maximum columns
minBoards:
type: integer
description: The minimum boards
minColumns:
type: integer
description: The minimum columns
infostorePageDrawV2:
type: object
properties:
totalPages:
type: integer
format: int32
totalElements:
type: integer
format: int32
size:
type: integer
format: int32
numberOfElements:
type: integer
format: int32
content:
type: array
items:
$ref: '#/definitions/infostoreDrawV2'
number:
type: integer
format: int32
first:
type: boolean
last:
type: boolean
sort:
$ref: '#/definitions/infostoreSort'
gamemanagementPickXPanel:
type: object
required:
- digits
- maxSelection
- minSelection
- rangeFrom
- rangeTo
properties:
digits:
type: integer
description: Digits
maxSelection:
type: integer
description: Maximum selected numbers
minSelection:
type: integer
description: Minimum selected numbers
rangeFrom:
type: integer
description: Range from
rangeTo:
type: integer
description: Range to
gamemanagementwinningColumnsDetails:
type: array
items:
$ref: '#/definitions/gamemanagementWinningColumnsDetails'
infostorePageDrawV3:
type: object
properties:
totalPages:
type: integer
format: int32
totalElements:
type: integer
format: int32
size:
type: integer
format: int32
numberOfElements:
type: integer
format: int32
content:
type: array
items:
$ref: '#/definitions/infostoreDrawV3'
number:
type: integer
format: int32
first:
type: boolean
last:
type: boolean
sort:
$ref: '#/definitions/infostoreSort'
gamemanagementLottoParams:
type: object
required:
- bet
- win
properties:
bet:
$ref: '#/definitions/gamemanagementLottoBetParams'
win:
$ref: '#/definitions/gamemanagementNormalWinCategories'
consumablesError:
type: object
properties:
index:
type: integer
format: int32
info:
type: object
properties: {}
gamemanagementvalidationAmountsLimits:
type: array
items:
$ref: '#/definitions/gamemanagementValidationAmountsLimits'
SelectionPartModel:
type: object
required:
- data
properties:
data:
type: array
description: data
items:
type: string
gamemanagementdraw:
type: object
required:
- desc
- id
- symbol
properties:
id:
type: integer
description: The symbol Id
desc:
type: string
description: The symbol Description
symbol:
type: string
description: The symbol character
minLength: 1
description: Draw
FreeBetBonusAmountModel:
type: object
required:
- amount
- type
properties:
amount:
type: integer
format: int32
description: amount
type:
type: string
description: type
consumablesSort:
type: object
pulsePageable:
type: object
properties:
offset:
type: integer
format: int64
sort:
$ref: '#/definitions/pulseSort'
pageSize:
type: integer
format: int32
paged:
type: boolean
unpaged:
type: boolean
pageNumber:
type: integer
format: int32
promotionengineOutcomeNormalBets:
type: object
required:
- GameId
- NumFreeBets
- NumGroups
- NumMultipleDraws
properties:
GameId:
type: integer
format: int32
description: ''
NumFreeBets:
type: integer
format: int32
description: ''
NumGroups:
type: integer
format: int32
description: ''
NumMultipleDraws:
type: integer
format: int32
description: ''
Optional:
type: array
description: ''
items:
$ref: '#/definitions/promotionengineOutcomeOptionalFields'
title: OutcomeNormalBets
pulseSort:
type: object
properties:
sorted:
type: boolean
unsorted:
type: boolean
pulsePageSegmentDTO:
type: object
properties:
totalElements:
type: integer
format: int64
totalPages:
type: integer
format: int32
size:
type: integer
format: int32
content:
type: array
items:
$ref: '#/definitions/pulseSegmentDTO'
number:
type: integer
format: int32
sort:
$ref: '#/definitions/pulseSort'
first:
type: boolean
numberOfElements:
type: integer
format: int32
pageable:
$ref: '#/definitions/pulsePageable'
last:
type: boolean
gamemanagementCheckType:
type: object
required:
- DrawLevel
- WagerLevel
properties:
DrawLevel:
type: number
WagerLevel:
type: number
atsL5Header:
type: object
required:
- game
- transactionId
properties:
transactionId:
type: integer
format: int64
example: 1
description: transactionId
game:
type: integer
format: int32
example: 1100
description: game
status:
type: integer
format: int32
example: 1
description: status
description: L5 Header
consumablesTicketCategoryBulkItem:
type: object
required:
- categoryName
- type
properties:
type:
type: string
description: The ticket category type
pattern: inquiry|request|troubleshoot|complaint|order
categoryName:
type: string
description: The ticket category name
minLength: 1
maxLength: 64
subCategoryName:
type: string
description: The ticket sub category name
minLength: 1
maxLength: 64
validationsLotteryClaimRequest:
type: object
required:
- firstName
- idNumber
- idType
- lastName
- phoneNumberOne
properties:
lastName:
type: string
description: Claimant last name
firstName:
type: string
description: Claimant first name
address:
type: string
description: Claimant postal address
city:
type: string
description: Claimant city
postalCode:
type: string
description: Claimant postal code
phoneNumberOne:
type: string
description: Claimant phone number
phoneNumberTwo:
type: string
description: Claimant second phone number
idType:
type: integer
format: int32
description: Claimant type of identification
idNumber:
type: string
description: Claimant identification code
claimAgentCode:
type: integer
format: int32
description: Retailer code where claim was made
claimTerminalId:
type: integer
format: int32
description: Terminal identifier where claim was made
claimDateTime:
type: string
description: Date/time of claim in local settings
consumablesThe consumable category registration request:
type: object
required:
- name
properties:
name:
type: string
description: The consumable category name
minLength: 1
maxLength: 64
consumablesTicketCategoryDTO:
type: object
required:
- id
- name
- type
properties:
id:
type: integer
format: int32
description: The ticket category id
type:
type: integer
format: int32
description: The ticket category type
name:
type: string
description: The ticket category name
minLength: 1
maxLength: 64
subCategories:
type: array
description: The ticket sub categories
items:
$ref: '#/definitions/consumablesTicketSubCategoryDTO'
gamemanagementhome:
type: object
required:
- desc
- id
- symbol
properties:
id:
type: integer
description: The symbol Id
desc:
type: string
description: The symbol Description
symbol:
type: string
description: The symbol character
minLength: 1
description: Home
gamemanagementMatchXParameters:
type: object
required:
- bet
- win
properties:
bet:
$ref: '#/definitions/gamemanagementMatchXBetParams'
win:
$ref: '#/definitions/gamemanagementNormalWinCategories'
gamemanagementKenoWinCategories:
type: array
items:
$ref: '#/definitions/gamemanagementKenoWinCaterory'
gamemanagementKenoPanel:
type: object
required:
- drawNumbers
- maxSpot
- minSpot
- rangeFrom
- rangeTo
properties:
drawNumbers:
type: integer
description: Draw Numbers
maxSpot:
type: integer
description: Max spot
minSpot:
type: integer
description: Min spot
rangeFrom:
type: integer
description: Range from
rangeTo:
type: integer
description: Range to
atsUpdateDocumentsRequest:
type: object
required:
- header
properties:
header:
description: header
$ref: '#/definitions/atsL5Header'
draws:
type: array
description: Array of completed draws
items:
$ref: '#/definitions/atsL5DrawsFilePathDto'
description: L5 Complete Draws Request
validationsValidationResponseDTO:
type: object
required:
- cost
- endDraw
- gameId
- startDraw
- totalAmounts
properties:
gameId:
type: integer
format: int32
description: Game identifier
totalAmounts:
description: Sum of amounts of all winnings
$ref: '#/definitions/validationsAmountsDTO'
startDraw:
type: integer
format: int64
description: First participating draw of the wager
endDraw:
type: integer
format: int64
description: Last participating draw of the wager
paidDraws:
type: array
description: Array of draw numbers already paid
items:
type: integer
format: int32
details:
type: array
description: Array of detailed winnings
items:
$ref: '#/definitions/validationsDetailsDTO'
summary:
description: Summarized draws status counters
$ref: '#/definitions/validationsSummaryDataDTO'
dbg:
description: Draw-based game data
$ref: '#/definitions/validationsDrawBasedGameDTO'
status:
type: string
description: Final status of the wager
enum:
- None
- Winning
- WinningButNeedsAuthorization
- WinningButCannotPay
- WinningButNeedsClaim
- Pending
- PendingWinningNumbers
- PendingResults
- Paid
- Claimed
- Expired
- Lost
- OperatorNotIssuer
paymentStatus:
type: string
description: Payment status of the wager winnings
enum:
- Cash
- CashOrClaim
- ClaimOnly
- OverLimit
claimCode:
type: string
description: Claim code
cost:
type: integer
format: int64
description: Response for the validation or winnings endpoints
MetadataModel:
type: object
required:
- trnsTime
properties:
playerInfo:
$ref: '#/definitions/PlayerInfoModel'
promotionInfo:
$ref: '#/definitions/PromotionInfoModel'
trnsTime:
type: string
description: trnsTime
gamemanagementblacklistedPlaySlips:
type: array
description: List of blacklisted play slip ids
items:
type: integer
pulse_RetailerLoyaltyPoint:
type: object
properties:
levelProgramId:
type: integer
format: int32
levelProgramRevisionId:
type: integer
format: int32
levelSegmentId:
type: integer
format: int32
segmentId:
type: integer
format: int32
series:
type: integer
format: int32
seriesPeriodMonths:
type: integer
format: int32
activeStartPeriod:
type: string
format: date-time
activeEndPeriod:
type: string
format: date-time
totalPeriodPoints:
type: integer
format: int32
minPoints:
type: integer
format: int32
maxPoints:
type: integer
format: int32
programName:
type: string
levelStatus:
type: string
promotionengineGetMessageTextReply:
type: object
properties:
message:
type: string
description: ''
title: GetMessageTextReply
gamemanagementDrawExpressions Info:
type: array
items:
$ref: '#/definitions/gamemanagementDrawSchedule'
gamemanagementRecordStatus:
type: object
required:
- Active
- Deleted
- Draft
- Expired
- Inactive
- Pending
- Rejected
properties:
Inactive:
type: number
Active:
type: number
Expired:
type: number
Deleted:
type: number
Draft:
type: number
Pending:
type: number
Rejected:
type: number
promotionengineOutcomeCashOutTurnover:
type: object
required:
- Type
- Value
properties:
Type:
$ref: '#/definitions/promotionenginePercentageOrAmountType'
Value:
type: integer
format: int32
description: ''
title: OutcomeCashOutTurnover
consumablesThe subcategory registration request:
type: object
required:
- name
properties:
name:
type: string
description: The subcategory name
minLength: 1
maxLength: 64
validationsSummaryDataDTO:
type: object
properties:
winning:
type: integer
format: int32
description: Winning draws count
expired:
type: integer
format: int32
description: Expired draws count
paid:
type: integer
format: int32
description: Paid draws count
nonWinning:
type: integer
format: int32
description: Non-winning draws count
pending:
type: integer
format: int32
description: Pending draws count
description: Summary counters for each draw status
infostoreSubscriberDTO:
type: object
properties:
subscriberId:
type: integer
format: int32
name:
type: string
entities:
type: array
items:
type: string
enum:
- draw
- transactions
- validations
gameIds:
type: array
items:
type: integer
format: int32
messageBody:
type: string
enum:
- none
- notification
- entity
method:
type: string
enum:
- rest
path:
type: string
httpMethod:
type: string
maxRetries:
type: integer
format: int32
retryInterval:
type: integer
format: int32
options:
type: object
additionalProperties:
$ref: '#/definitions/infostoreSubscribableEntityOptions'
gamemanagementGameOperations:
type: object
required:
- checkType
properties:
exchange:
type: boolean
description: Exchange
noAutoPay:
type: boolean
description: No auto pay
normal:
type: boolean
description: Normal
payCompleteDraws:
type: boolean
description: Pay Complete Draws
pilot:
type: boolean
description: Pilot
riskMgt:
type: boolean
description: Risk management
repeat:
type: string
description: Repeat
checkType:
$ref: '#/definitions/gamemanagementCheckType'
authUserDTO:
type: object
properties:
id:
type: integer
format: int32
username:
type: string
accountLocked:
type: boolean
email:
type: string
firstName:
type: string
lastName:
type: string
fatherName:
type: string
motherName:
type: string
phonePrimary:
type: string
phoneSecondary:
type: string
phoneMobile:
type: string
birthDate:
type: string
format: date-time
failures:
type: integer
format: int32
userType:
type: integer
format: int32
createdDate:
type: string
format: date-time
lockedDate:
type: string
format: date-time
lastUpdateDate:
type: string
format: date-time
lastPasswordUpdateDate:
type: string
format: date-time
lastLoginDate:
type: string
format: date-time
currencyId:
type: integer
format: int32
langId:
type: string
lotteryBranchCode:
type: integer
format: int32
status:
type: integer
format: int32
pgpKey:
type: string
accessTokenValiditySeconds:
type: integer
format: int32
expirationDate:
type: string
format: date-time
personalId:
type: string
address:
type: string
zipCode:
type: string
city:
type: string
region:
type: string
authorities:
type: array
items:
$ref: '#/definitions/authUserGrantedAuthority'
operators:
type: array
items:
type: integer
format: int32
gamemanagementMatchXProgram:
type: array
items:
$ref: '#/definitions/gamemanagementMatchXMatch'
gamemanagementGameChannelParameters:
type: object
required:
- activationTime
- checkPaymentLimits
- columnLimit
- maxAdvanceDraws
- maxMultipleDraws
- qrCodePlayslip
- status
properties:
activationTime:
type: integer
description: The activation time
autoPayment:
$ref: '#/definitions/gamemanagementAutoPaymentParameters'
cancelationDeadlines:
$ref: '#/definitions/gamemanagementcancelationDeadlines'
columnLimit:
$ref: '#/definitions/gamemanagementColumnLimit'
maxAdvanceDraws:
type: integer
description: The maximum advance draws
maxMultipleDraws:
type: integer
description: The maximum multiple draws
minPayable:
type: number
description: The minimum payable
minPayableWithReceipt:
type: number
description: The minimum payable with receipt
minPayableWithoutReceipt:
type: number
description: The minimum payable without receipt
predefinedSystem:
$ref: '#/definitions/gamemanagementModel 1'
qrCodePlayslip:
type: boolean
description: A flag that enables the functionality to accept or reject plays generated through QR code
blacklistedPlaySlips:
$ref: '#/definitions/gamemanagementblacklistedPlaySlips'
checkPaymentLimits:
type: string
description: 'Sets where payment limits should be checked (allowed values: PayDraw, PlayDraw)'
payBonus:
$ref: '#/definitions/gamemanagementPayBonus'
salesEnd:
type: integer
description: The sales end
salesStart:
type: integer
description: The sales start
status:
type: integer
description: The status
syndicate:
type: boolean
description: The syndicate
validationAmountsLimits:
$ref: '#/definitions/gamemanagementvalidationAmountsLimits'
playMethod:
$ref: '#/definitions/gamemanagementplayMethod'
gamemanagementNormalWinCategories:
type: array
items:
$ref: '#/definitions/gamemanagementNormalWinCategory'
gamemanagementboardMultipliers:
type: array
description: List of available Board Multipliers
items:
type: integer
DatePatternModel:
type: object
properties:
date:
type: string
format: date-time
description: date
index:
type: integer
format: int32
description: index
atsSubmitDocumentRequestDto:
type: object
required:
- drawClosedDate
- drawId
- ftpPath
- gameId
- revisionNumber
- schemaVersion
properties:
gameId:
type: integer
format: int32
example: 1100
description: The game id
drawId:
type: integer
format: int32
example: 684138
description: The draw id
revisionNumber:
type: integer
format: int32
example: 1
description: The revision number
drawClosedDate:
type: string
format: date-time
example: '2018-06-18T13:21:44.000Z'
description: The date the draw closed in UTC
schemaVersion:
type: integer
format: int32
example: 1
description: The Schema version
ftpPath:
type: string
example: /1100/AT_Cpns_1100_684138_rev1.TXT
description: The file path in the FTP server
description: The SubmitDocumentRequest Request DTO
infostoreSubscribableEntityOptions:
type: object
properties:
variation:
type: string
properties:
type: array
items:
type: string
infostoreIIFErrorCode:
type: object
properties:
code:
type: integer
format: int32
type:
type: string
pulsePageRetailerDTO:
type: object
properties:
totalElements:
type: integer
format: int64
totalPages:
type: integer
format: int32
size:
type: integer
format: int32
content:
type: array
items:
$ref: '#/definitions/pulseRetailerDTO'
number:
type: integer
format: int32
sort:
$ref: '#/definitions/pulseSort'
first:
type: boolean
numberOfElements:
type: integer
format: int32
pageable:
$ref: '#/definitions/pulsePageable'
last:
type: boolean
InstantWagerGroupModel:
type: object
properties:
poolId:
type: integer
format: int32
description: poolId
prizeType:
type: string
description: prizeType
recorcdId:
type: integer
format: int32
description: recorcdId
selection:
type: array
description: selection
items:
$ref: '#/definitions/SelectionPartModel'
tier:
type: integer
format: int32
description: tier
winningAmount:
type: integer
format: int32
description: winningAmount
gamemanagementaway:
type: object
required:
- desc
- id
- symbol
properties:
id:
type: integer
description: The symbol Id
desc:
type: string
description: The symbol Description
symbol:
type: string
description: The symbol character
minLength: 1
description: Away
gamemanagementPlayTaxation:
type: object
properties:
amount:
type: number
description: Amount
percentage:
type: number
description: Percentage
type:
type: string
description: Taxation type
vatAmount:
type: number
description: Vat amount
vatPercentage:
type: number
description: Vat percentage
vatType:
type: string
description: Vat type
pulseRetailerGameView:
type: object
properties:
gameId:
type: integer
format: int32
operatorId:
type: integer
format: int32
consumablesGameFamily:
type: object
properties:
id:
type: integer
format: int32
name:
type: string
games:
type: array
items:
$ref: '#/definitions/consumablesGame'
gamemanagementplayMethod:
type: object
required:
- QRC
- betslip
- verbal
properties:
betslip:
type: integer
verbal:
type: integer
QRC:
type: integer
description: Available play methods
promotionengineTimeInterval:
type: object
properties:
from:
type: string
description: ''
to:
type: string
description: ''
title: TimeInterval
LotteryBoardDataDTO:
type: object
required:
- boardId
- panels
properties:
boardId:
type: integer
format: int32
description: Board identifier
betType:
type: string
description: Bet type
multipliers:
type: array
description: Array of multipliers
items:
type: integer
format: int32
panels:
type: array
description: Array of Lottery panel data
items:
$ref: '#/definitions/LotteryPanelDataDTO'
options:
type: array
description: Array of options
items:
type: string
quickPick:
type: boolean
description: Flag for quick-pick
description: Lottery board data
gamemanagementGameInfo:
type: object
required:
- operators
properties:
id:
type: number
description: Game Code
name:
type: string
description: Description
familyId:
type: number
description: Family ID
familyDesc:
type: string
description: Family Description
operators:
$ref: '#/definitions/gamemanagementoperators'
infostoreDrawV3:
type: object
required:
- drawBreak
- drawId
- drawTime
- gameId
- gameRuleVersion
- pricePoints
- prizeCategories
- status
- statusNr
- visualDraw
properties:
gameId:
type: integer
format: int32
description: Game code
drawId:
type: integer
format: int32
description: Draw number
drawTime:
type: integer
format: int64
description: Draw time in UTC in milliseconds
status:
type: string
description: Draw status (enumeration)
enum:
- future
- active
- pendingResults
- results
statusNr:
type: integer
format: int32
description: Draw status (number)
drawBreak:
type: integer
format: int64
description: Draw break in milliseconds
visualDraw:
type: integer
format: int32
description: 'Visual draw number, a recurring draw number'
gameRuleVersion:
type: integer
format: int64
description: Game rule version
pricePoints:
description: Price points
$ref: '#/definitions/infostorePricePointsV3DTO'
winningNumbers:
type: array
description: Array of winning numbers for each winning column.
items:
$ref: '#/definitions/infostoreWinningNumbersV3DTO'
prizeCategories:
type: array
description: Prize categories
items:
$ref: '#/definitions/infostoreDrawResultV3'
wagerStatistics:
description: Wager statistics
$ref: '#/definitions/infostoreWagerStatisticsDTO'
animation:
description: Draw animation. Provides centralized information on how the draw should be animated. It is not available on all games and it is not inlcuded by default.
$ref: '#/definitions/infostoreDrawAnimationV3DTO'
drawType:
type: string
description: DAY or EVE indicator. Applicable only for games that have day and eve draws
infostoreDrawV2:
type: object
required:
- drawBreak
- drawId
- drawTime
- gameId
- gameRuleVersion
- pricePoints
- prizeCategories
- status
- visualDraw
properties:
gameId:
type: integer
format: int32
description: Game code
drawId:
type: integer
format: int32
description: Draw number
drawTime:
type: integer
format: int64
description: Draw time in UTC in milliseconds
status:
type: integer
format: int32
description: Draw status
drawBreak:
type: integer
format: int64
description: Draw break in milliseconds
visualDraw:
type: integer
format: int32
description: 'Visual draw number, a recurring draw number'
gameRuleVersion:
type: integer
format: int64
description: Game rule version
pricePoints:
description: Price points
$ref: '#/definitions/infostorePricePointsV2DTO'
winningNumbers:
type: array
description: Array of winning numbers corresponding to winning column. List of String where each String corresponds to the winning numbers of each winning column. Winning numbers of each winning column are comma separated.
items:
type: string
prizeCategories:
type: array
description: Prize categories
items:
$ref: '#/definitions/infostoreDrawResultV2'
wagersStatistics:
type: array
description: Wager statistics
items:
$ref: '#/definitions/infostoreWagerStatisticsDTO'
winningRevision:
type: integer
format: int32
description: Winning revision
activationTime:
type: integer
format: int64
description: Time that the draw was activated
gamemanagementMatchXBetParams:
type: object
required:
- betTypes
- panels
- symbols
properties:
matchesForRefund:
type: integer
description: Matches for refund
panels:
$ref: '#/definitions/gamemanagementMatchXPanels'
symbols:
$ref: '#/definitions/gamemanagementMatchXSymbols'
betTypes:
$ref: '#/definitions/gamemanagementbetTypes'
infostoreDrawV1:
type: object
properties:
game:
description: a reference to the state of the game
$ref: '#/definitions/infostoreGameStateV1'
id:
type: integer
format: int32
xml:
attribute: true
description: a unique internal identifier for the draw
drawNumber:
type: integer
format: int32
xml:
attribute: true
description: a unique number for the draw
columnPrice:
type: integer
format: int64
xml:
attribute: true
description: the unit price
drawDate:
type: string
format: date-time
description: the date of the draw
status:
type: integer
format: int32
xml:
attribute: true
description: the status of the draw
salesStart:
type: string
format: date-time
xml:
attribute: true
description: the date sales start
salesEnd:
type: string
format: date-time
xml:
attribute: true
description: the date sales end
winnersLoaded:
type: boolean
xml:
attribute: true
description: a flag indicating if the winners are loaded
totalColumns:
type: integer
format: int32
xml:
attribute: true
description: the total number of columns
totalColumns1:
type: integer
format: int32
xml:
attribute: true
description: more information on the total number of columns
virtualDrawNumber:
type: integer
format: int32
xml:
attribute: true
description: virtual number of the draw
maxAdvandedDraws:
type: integer
format: int32
xml:
attribute: true
description: Maximum advanced draws
specialDraw:
type: integer
format: int32
xml:
attribute: true
description: a flag indicating if this is a special draw
jackpotAmount:
type: integer
format: int64
xml:
attribute: true
description: the jackpot Amount
results:
type: array
description: a list of artifacts representing the results of a draw
items:
$ref: '#/definitions/infostoreDrawResultV1'
prizes:
type: array
description: a list of artifacts representing the winning categories of the draw
items:
$ref: '#/definitions/infostorePrizeCategoryV1'
BetModel:
type: object
required:
- selections
properties:
accountBonusId:
type: integer
format: int64
description: The total price of the bet
autoCashout:
description: The total price of the bet
$ref: '#/definitions/AutoCashoutModel'
barcode:
type: string
description: barcode for this bet
betId:
type: integer
format: int64
description: The bet id
betNo:
type: integer
format: int32
description: The bet number
betTime:
type: integer
format: int64
description: Datetime of bet
bonusCodeAwarded:
type: string
description: The bonus code awarded. Server side generated
bonusCodeRulesOfUse:
type: string
description: bonusCodeRulesOfUse
bonusStake:
$ref: '#/definitions/StakeModel'
bonusWinnings:
type: integer
format: int32
description: 'For bets in an ACCEPTED state, this will be the potential bonus winnings if the bet wins, for WINNING or SETTLED bets it will be the actual bonus winnings'
cashOut:
type: boolean
description: In case this bet can be cashed out
channelId:
type: integer
format: int64
description: Channel ID that this bet part was played
checkOdds:
type: integer
format: int32
description: 'Check type of the additional odds data. The system will reject a coupons when: 1. a selected forecast has lower current Odds or different current Handicap / UO value than these the player has seen 2. a selected forecast has different current Odds / Handicap / UO value than these the player has seen 3. a selected forecast has different Handicap / UO value than these the player has seen'
childBetId:
type: string
description: The child bet id. This should exist after an Edit or Patially cashout bet
currentlyInplay:
type: boolean
discountBonusAmount:
type: integer
format: int32
description: discountBonusAmount
discountBonusId:
type: integer
format: int32
description: discountBonusId
displayStatus:
type: string
description: Status of the part bet
extBetId:
type: integer
format: int32
freeBet:
type: boolean
description: Free bet indicator
freeBetBonusAmount:
$ref: '#/definitions/FreeBetBonusAmountModel'
limitedStake:
type: integer
format: int32
description: 'When bet limit or stake limit validation fails, this contains the maximum stake the user can enter, in their currency'
liveBet:
type: boolean
description: In case this is live bet or not
originalCashoutBetId:
type: integer
format: int64
description: 'If this bet is a child bet from partial cashout, this betId is its parent'
overAskId:
type: string
description: Over/Ask identification number
parentBetId:
type: string
description: The parent bet id. This should exist after an Edit or Patially cashout bet
partialCashoutBetIds:
type: array
description: If this bet is a parent of partial cashout those betIds are their children
items:
type: integer
format: int64
payout:
type: integer
format: int32
description: Settled winning amount
potentialBonusWinnings:
type: integer
format: int32
potentialPayout:
type: integer
format: int32
description: The potential payout
promoDescription:
type: string
description: promoDescription
referralPath:
type: string
description: Canvas might have this field as registration source
refund:
type: integer
format: int32
description: refund
rejectionReason:
type: string
description: The reason why a bet has been rejected
selections:
type: array
description: The bet selections
items:
$ref: '#/definitions/SelectionModel'
stake:
description: The stake amount
$ref: '#/definitions/StakeModel'
status:
type: string
description: 'Status of the part bet, e.g. ACCEPTED, REJECTED, VOID'
system:
description: The selected bet system
$ref: '#/definitions/SystemModel'
taxOnReturnsPcnt:
type: number
format: double
description: If this bet is a parent of partial cashout those betIds are their children
totalCost:
type: integer
format: int32
description: Bet’s total cost that the player have pay
totalDiscountStake:
type: integer
format: int32
description: The discounted bet stake. Server side generated
totalOdds:
type: number
format: double
description: Total odds of the specific bet part
totalPrice:
type: number
format: double
description: The total price of the bet
totalStake:
type: integer
format: int32
description: Total selection stake
transactionId:
type: integer
format: int64
description: The transaction id
voucherCode:
type: string
description: The bonus code awarded. Server side generated
voucherCodeUsed:
type: string
description: voucherCodeUsed
winType:
type: string
description: 'Win bet data type,WIN, PLACE, EACH_WAY'
DrawBasedGameDTO:
type: object
required:
- boards
- gameId
- multipliers
properties:
blockStatus:
type: string
description: Wager block status
enum:
- NA
- Unblocked
- Blocked
- PartiallyBlocked
boards:
type: array
description: Lottery board data
items:
$ref: '#/definitions/LotteryBoardDataDTO'
columns:
type: integer
format: int32
description: Columns played in wager
cost:
type: number
description: Cost of wager
creationTime:
type: integer
format: int64
description: Unix epoch of wager creation timestamp
gameId:
type: integer
format: int32
description: Game identifier
multipliers:
type: array
description: Array of multipliers
items:
type: integer
format: int32
options:
type: array
description: Array of options
items:
type: string
participatingDraws:
description: Participating draws data
$ref: '#/definitions/ParticipatingDrawsDTO'
quickPick:
type: boolean
description: Flag for quick-pick
status:
type: string
description: Internal wager status
enum:
- NA
- Played
- Canceled
- InternalPlayedRollback
teamShares:
type: integer
format: int32
description: Count of team shares
description: Draw-based game data
consumablesThe ticket update request:
type: object
properties:
retailerId:
type: integer
format: int32
description: The ticket retailer id
userId:
type: integer
format: int32
description: The ticket user id
type:
type: integer
format: int32
name:
type: string
description: The ticket name
minLength: 1
maxLength: 64
description:
type: string
description: The ticket description
minLength: 0
maxLength: 128
categoryId:
type: integer
format: int32
description: The ticket category
subCategoryId:
type: integer
format: int32
description: The ticket sub category
priority:
type: integer
format: int32
description: The ticket priority
statusId:
type: integer
format: int32
description: The ticket status
items:
type: array
description: The ticket order items
items:
$ref: '#/definitions/consumablesThe order item'
consumablesPageLoyaltyProfileDTO:
type: object
properties:
totalPages:
type: integer
format: int32
totalElements:
type: integer
format: int64
numberOfElements:
type: integer
format: int32
last:
type: boolean
first:
type: boolean
sort:
$ref: '#/definitions/consumablesSort'
size:
type: integer
format: int32
content:
type: array
items:
$ref: '#/definitions/consumablesLoyaltyProfileDTO'
number:
type: integer
format: int32
authTokenResponse:
type: object
required:
- access_token
- expires_in
- scope
- token_type
properties:
scope:
type: string
description: the scope of the generated token (space separated)
jti:
type: string
description: the jti (JWT ID) claim in case of JWT token
access_token:
type: string
description: the generated authorization token
token_type:
type: string
description: the type of the generated token
refresh_token:
type: string
description: 'the token used to refresh current token. Applicable for grant types: password, client_credentials, authorization_code'
expires_in:
type: integer
format: int32
description: the time in seconds of the duration of the token
BoardModel:
type: object
required:
- boardId
- panels
properties:
systemId:
type: integer
format: int32
betType:
type: integer
format: int32
description: 'bet type option depend on the game. e.g Straight, Box, Front-2, …, for Pick-x)'
boardId:
type: integer
format: int32
multipliers:
type: array
description: per board multipliers
items:
type: integer
format: int32
options:
type: array
description: 'special options depend on the game, in board level'
items:
type: string
panels:
type: array
description: panels thas this board holds
items:
$ref: '#/definitions/PanelModel'
quickPick:
type: boolean
description: quick pick flag for this particular board
gamemanagementdata:
type: object
pulseRetailerPaymentLevelView:
type: object
properties:
operatorId:
type: integer
format: int32
paymentLevel:
type: integer
format: int32
pulseRetailerIncentiveDTO:
type: object
properties:
id:
type: integer
format: int32
type:
type: string
title:
type: string
description:
type: string
completed:
type: boolean
fromDate:
type: string
format: date-time
toDate:
type: string
format: date-time
games:
type: array
items:
type: integer
format: int32
currentPrize:
type: integer
format: int64
minGoal:
type: integer
format: int64
maxGoal:
type: integer
format: int64
prizeDescription:
type: string
prizeValue:
type: integer
format: int64
active:
type: boolean
infostoreAddOnPricePointsV3DTO:
type: object
properties:
amount:
type: number
format: double
gameType:
type: string
OutcomeMetaDataModel:
type: object
properties:
Amount:
type: integer
format: int32
description: Amount
Description:
type: string
description: Description
GameId:
type: integer
format: int32
description: GameId
NumDraws:
type: integer
format: int32
description: NumDraws
NumFreeBets:
type: integer
format: int32
description: NumFreeBets
NumGroups:
type: integer
format: int32
description: NumGroups
NumMultipleDraws:
type: integer
format: int32
description: NumMultipleDraws
Optional:
type: array
items:
$ref: '#/definitions/OptionalPromotionModel'
PcgDraws:
type: integer
format: int32
description: PcgDraws
Type:
type: string
description: Type
Value:
type: integer
format: int64
description: Value
voucherId:
type: string
description: voucherId
SERIALNUMBER:
type: string
PanelModel:
type: object
required:
- requested
- selection
properties:
QPSelections:
type: integer
format: int32
options:
type: array
description: 'special options depend on the game, in panel level'
items:
type: string
quickPick:
type: boolean
description: quick pick flag for this particular panel
requested:
type: integer
format: int32
description: this value should be equally to the draw numbers that has configured in the Game Parameters
selection:
type: array
description: 'the player selected numbers. E.g. 1, 5, 8, 30, 35, 45 for a Lotto 6/49'
items:
type: integer
format: int32
PlayerInfoModel:
type: object
properties:
groupId:
type: integer
format: int32
description: groupId
payMethod:
type: string
description: payMethod
pin:
type: string
description: Players pin. Mandatory for Bit8 PAM
playerId:
type: string
description: playerId
sessionToken:
type: string
description: sessionToken
subscriptionId:
type: integer
format: int64
description: subscriptionId
infostoreAn simple object that contains information about a state change of an entity:
type: object
required:
- namespace
- stateId
properties:
stateId:
type: integer
format: int64
previousStateId:
type: integer
format: int64
namespace:
type: string
authTokenKey:
type: object
properties:
value:
type: string
alg:
type: string
gamemanagementGameParameters:
type: object
required:
- activationTime
- approverId
- betLimits
- drawConfig
- gameId
- name
- operators
- pricePoints
- record
- roundingParams
- status
- type
properties:
activationTime:
type: integer
description: The Activation Time
approverId:
type: string
description: The user who approved the record
betLimits:
$ref: '#/definitions/gamemanagementBetLimits'
deactivationTime:
type: integer
description: The Deactivation Time
drawConfig:
$ref: '#/definitions/gamemanagementDrawConfiguration'
gameId:
type: integer
description: The Game Id
gameOperations:
$ref: '#/definitions/gamemanagementGameOperations'
name:
type: string
description: Name of the game
operators:
$ref: '#/definitions/gamemanagementOperators'
pricePoints:
$ref: '#/definitions/gamemanagementPricePoints'
record:
type: integer
description: The Record Id
roundingParams:
$ref: '#/definitions/gamemanagementRoundingParams'
status:
$ref: '#/definitions/gamemanagementRecordStatus'
type:
type: string
description: Game Type
userId:
type: string
description: The user who created the record
teamPlayParams:
$ref: '#/definitions/gamemanagementTeamPlay'
promotionengineError:
type: object
required:
- code
- guid
- message
- source
- type
properties:
code:
type: integer
format: int32
description: ''
message:
type: string
description: ''
source:
type: string
description: ''
type:
type: string
description: ''
guid:
type: integer
format: int64
description: ''
title: Error
TerminalSignonRequest:
type: object
properties:
username:
type: string
password:
type: string
newPassword:
type: string
WagerDataModel:
type: object
properties:
posInfo:
$ref: '#/definitions/PosInfo'
dbg:
type: array
description: dbg
items:
$ref: '#/definitions/DBGWagerModel'
instant:
$ref: '#/definitions/InstantWagerModel'
spbt:
$ref: '#/definitions/TerminalPlaceBetsInModel'
sportsbook:
$ref: '#/definitions/SportsBookPlayRequestModel'
atsRetrieveDocumentsStatusCompleteDto:
type: object
required:
- id
properties:
id:
type: integer
format: int64
example: 1
description: id
documentHashes:
type: array
description: Array of document hashed
items:
$ref: '#/definitions/atsDocumentHashesDto'
description: RetrieveDocumentsStatusCompleteDto
gamemanagementpredefinedSystem:
type: array
description: Predefined System
items:
type: integer
infostorePricePointsV3DTO:
type: object
properties:
addOn:
type: array
items:
$ref: '#/definitions/infostoreAddOnPricePointsV3DTO'
amount:
type: number
format: double
gamemanagementProducts:
type: array
items:
$ref: '#/definitions/gamemanagementProductFields'
SummaryDataDTO:
type: object
properties:
winning:
type: integer
format: int32
description: Winning draws count
expired:
type: integer
format: int32
description: Expired draws count
paid:
type: integer
format: int32
description: Paid draws count
nonWinning:
type: integer
format: int32
description: Non-winning draws count
pending:
type: integer
format: int32
description: Pending draws count
description: Summary counters for each draw status
infostoreSubscriberUpdateRequest:
type: object
properties:
name:
type: string
entities:
type: array
items:
type: string
enum:
- draw
- transactions
- validations
gameIds:
type: array
items:
type: integer
format: int32
messageBody:
type: string
enum:
- none
- notification
- entity
path:
type: string
httpMethod:
type: string
pattern: ^(GET|HEAD|POST|PUT|PATCH|DELETE|OPTIONS|TRACE)$
maxRetries:
type: integer
format: int32
minimum: 0
maximum: 100
retryInterval:
type: integer
format: int32
minimum: 500
options:
type: object
additionalProperties:
$ref: '#/definitions/infostoreSubscribableEntityOptions'
infostoreWagerStatisticsDTO:
type: object
required:
- columns
properties:
columns:
type: integer
format: int32
description: Total columns
wagers:
type: integer
format: int32
description: Total wagers
TerminalSystemInModel:
type: object
required:
- request
- stake
properties:
request:
type: integer
format: int32
description: System value
stake:
description: stake data
$ref: '#/definitions/StakeModel'
atsL5DrawsFilePathDto:
type: object
required:
- draw
- filePath
- revision
- schemaVersion
properties:
draw:
type: integer
format: int32
example: 1100
description: drawId
filePath:
type: string
example: /1100/AT_Cpns_1100_684138_rev1.TXT
description: filePath
schemaVersion:
type: integer
format: int32
example: 1
description: '1'
revision:
type: integer
format: int32
example: 1
description: '1'
description: Array of draws entity
validationsLotteryPanelDataDTO:
type: object
required:
- requested
- selection
properties:
quickPick:
type: boolean
description: Flag for quick-pick
qpSelections:
type: integer
format: int32
description: Count of quick-pick selections
requested:
type: integer
format: int32
description: Count of requested quick-pick selections
selection:
type: array
description: Array of actual quick-pick selections
items:
type: integer
format: int32
options:
type: array
description: Array of options
items:
type: string
description: Lottery panel data
consumablesThe subcategory update request:
type: object
properties:
name:
type: string
description: The subcategory name
minLength: 1
maxLength: 64
gamemanagementWinnersParams:
type: object
required:
- dsbRoundingParams
- winnersRoundingParams
properties:
distributionPercentage:
type: number
description: Distribution Percentage
distributionType:
type: string
description: Distribution Type
dsbRoundingParams:
$ref: '#/definitions/gamemanagementRoundingParams'
highLimit:
type: number
description: High limit
validationDeadlines:
$ref: '#/definitions/gamemanagementValidationDeadline'
winnersRoundingParams:
$ref: '#/definitions/gamemanagementRoundingParams'
InstantWagerModel:
type: object
required:
- gameId
- type
properties:
creationTime:
type: string
description: creationTime
gameId:
type: integer
format: int32
description: gameId
type:
type: string
description: type
wager:
type: array
description: wager
items:
$ref: '#/definitions/InstantWagerGroupModel'
pulseRetailerOperationalHourResponse:
type: object
properties:
key:
type: integer
format: int32
day:
type: string
hours:
type: array
items:
$ref: '#/definitions/pulseRetailerOperationalHourDTO'
pulse_RetailerReward:
type: object
properties:
prizeId:
type: integer
format: int32
totalPoints:
type: integer
format: int32
levelProgramId:
type: integer
format: int32
levelSegmentId:
type: integer
format: int32
prizeName:
type: string
prizeDescription:
type: string
points:
type: integer
format: int32
status:
type: integer
format: int32
promotionengineOutcomeIncrMultiDraws:
type: object
required:
- Type
- Value
properties:
Value:
type: integer
format: int32
description: ''
Type:
$ref: '#/definitions/promotionengineIncrMultiDrawsType'
title: OutcomeIncrMultiDraws
gamemanagementcancelationDeadlines:
type: array
items:
$ref: '#/definitions/gamemanagementCancelationDeadlines'
consumablesTicketDTO:
type: object
required:
- categoryDescription
- categoryId
- id
- inserted
- name
- priority
- retailerId
- statusId
- type
- userId
properties:
id:
type: integer
format: int32
description: The ticket id
retailerId:
type: integer
format: int32
description: The ticket retailer id
userId:
type: integer
format: int32
description: The ticket user id
type:
type: integer
format: int32
description: The ticket type
name:
type: string
description: The ticket name
minLength: 1
maxLength: 64
description:
type: string
description: The ticket description
minLength: 0
maxLength: 128
categoryId:
type: integer
format: int32
description: The ticket category
categoryDescription:
type: string
description: The ticket category description
subCategoryId:
type: integer
format: int32
description: The ticket sub category
subCategoryDescription:
type: string
description: The ticket sub category description
priority:
type: integer
format: int32
description: The ticket priority
statusId:
type: integer
format: int32
description: The ticket status
inserted:
type: string
format: date-time
description: The ticket inserted date
resolved:
type: string
format: date-time
description: The ticket resolved date
items:
type: array
description: The ticket order items
items:
$ref: '#/definitions/consumablesOrderItem'
infostoreStepV3:
type: object
properties:
bonusNumber:
type: boolean
hopToNumber:
type: integer
format: int32
winningNumber:
type: boolean
example: false
description: 'Denotes whether the API consumer should mark at this specific step the number as part of the winning ones. If false, then an additional step is expected for that winning number'
authUserGrantedAuthority:
type: object
properties:
id:
type: integer
format: int32
name:
type: string
FaultInfo:
type: object
properties:
code:
type: integer
format: int32
description: The error code
message:
type: string
description: The error message
data:
type: array
description: The error data which is an abstract object that may be used to provide any error metadata
items:
type: object
source:
type: string
description: The application at which the API error occured
type:
type: string
description: 'The error family, e.g. RUNTIME, VALIDATION, etc'
description: The FaultInfo object contains all the details assosiated with an API error
infostoreFaultInfo:
type: object
properties:
code:
type: integer
format: int32
description: The error code
message:
type: string
description: The error message
data:
type: array
description: The error data which is an abstract object that may be used to provide any error metadata
items:
type: object
properties: {}
source:
type: string
description: The application at which the API error occured
type:
type: string
description: 'The error family, e.g. RUNTIME, VALIDATION, etc'
guid:
type: string
description: The unique identifier of the error process
description: The FaultInfo object contains all the details assosiated with an API error
pulseRetailerSummaryReportSection:
type: object
properties:
type:
type: string
totalCount:
type: integer
format: int32
totalAmounts:
type: object
additionalProperties:
type: number
data:
type: array
items:
$ref: '#/definitions/pulseRetailerSummaryReportSectionData'
consumablesConsumableDTO:
type: object
required:
- categoryId
- id
- inserted
- price
- status
- title
properties:
id:
type: integer
format: int32
description: The consumable id
categoryId:
type: integer
format: int32
description: The consumable category id
title:
type: string
description: The consumable title
minLength: 1
maxLength: 64
description:
type: string
description: The consumable description
minLength: 1
maxLength: 128
status:
type: integer
format: int32
description: The consumable status
minimum: 0
maximum: 1
supplier:
type: string
description: The consumable supplier
partNumber:
type: string
description: The consumable part number
price:
type: number
description: The consumable price
inserted:
type: string
format: date-time
description: The consumable inserted date
consumablesLoyaltyProfileRegistrationRequest:
type: object
properties:
name:
type: string
minLength: 1
maxLength: 64
description:
type: string
minLength: 0
maxLength: 128
points:
type: array
items:
$ref: '#/definitions/consumablesLoyaltyPoint_'
promotionengineOutcomeOptionalFields:
type: object
properties:
name:
type: string
description: ''
type:
type: string
description: ''
value:
type: string
description: ''
title: OutcomeOptionalFields
PosInfo:
type: object
properties:
retailerId:
type: integer
format: int32
terminalId:
type: integer
format: int32
userId:
type: string
infostoreSort:
type: object
gamemanagementGameChannelResource:
type: object
required:
- approverId
- content
- gameId
- gameRecord
- record
- userId
properties:
approverId:
type: string
description: The user who approved the record
channelId:
type: string
description: The channel id
content:
$ref: '#/definitions/gamemanagementGameChannelParameters'
gameId:
type: integer
description: The game id
gameRecord:
type: integer
description: The game record
operatorId:
type: string
description: The operator id
record:
type: integer
description: The record
userId:
type: string
description: The user who created the record
gamemanagementAutoPaymentParameters:
type: object
required:
- drawTimeOffset
- interval
properties:
drawTimeOffset:
type: integer
description: Draw time offset
enabled:
type: boolean
description: Parameter enabled
interval:
type: integer
description: Auto payment interval
uploadLoosers:
type: boolean
description: Upload loosers
gamemanagementareas:
type: array
description: The Product Areas for Games
items:
$ref: '#/definitions/gamemanagementAreas'
LotteryPanelDataDTO:
type: object
required:
- requested
- selection
properties:
quickPick:
type: boolean
description: Flag for quick-pick
qpSelections:
type: integer
format: int32
description: Count of quick-pick selections
requested:
type: integer
format: int32
description: Count of requested quick-pick selections
selection:
type: array
description: Array of actual quick-pick selections
items:
type: integer
format: int32
options:
type: array
description: Array of options
items:
type: string
description: Lottery panel data
consumablesThe consumable update request:
type: object
required:
- status
properties:
categoryId:
type: integer
format: int32
description: The consumable category id
title:
type: string
description: The consumable title
minLength: 1
maxLength: 64
description:
type: string
description: The consumable description
minLength: 0
maxLength: 128
status:
type: integer
format: int32
description: 'The consumable status (0 -> INACTIVE, 1 -> ACTIVE)'
minimum: 0
maximum: 1
supplier:
type: string
description: The consumable supplier
partNumber:
type: string
description: The consumable part number
price:
type: number
description: The consumable price
promotionengineCreateVouchers:
type: object
required:
- promotionId
properties:
promotionId:
type: integer
format: int32
serialized:
type: object
title: Serialized
properties:
from:
type: integer
format: int32
description: ''
to:
type: integer
format: int32
description: ''
nonserialized:
type: object
title: NonSerialized
properties:
count:
type: integer
format: int32
description: ''
code:
type: integer
format: int32
description: ''
validationsFaultInfo:
type: object
properties:
code:
type: integer
format: int32
description: The error code
message:
type: string
description: The error message
data:
type: array
description: The error data which is an abstract object that may be used to provide any error metadata
items:
type: object
properties: {}
source:
type: string
description: The application at which the API error occured
type:
type: string
description: 'The error family, e.g. RUNTIME, VALIDATION, etc'
guid:
type: string
description: The unique identifier of the error process
description: The FaultInfo object contains all the details assosiated with an API error
consumablesThe consumable category update request:
type: object
properties:
name:
type: string
description: The consumable category name
minLength: 1
maxLength: 64
consumablesLoyaltyProfileUpdateRequest:
type: object
properties:
name:
type: string
minLength: 1
maxLength: 64
description:
type: string
minLength: 0
maxLength: 128
points:
type: array
items:
$ref: '#/definitions/consumablesLoyaltyPoint_'
gamemanagementTeamPlay:
type: object
required:
- teamPlay
properties:
teamPlay:
type: boolean
description: Team Play
minShares:
type: integer
description: Min Shares
maxShares:
type: integer
description: Max Shares
promotionengineOutcomeReply:
type: object
properties:
outcomeId:
type: integer
format: int32
description: ''
xactionId:
type: integer
format: int32
description: ''
isRedeemed:
type: integer
format: int32
description: ''
parentId:
type: integer
format: int32
description: ''
promotionId:
type: integer
format: int32
description: ''
playerId:
type: integer
format: int32
description: ''
outcomeType:
type: string
enum:
- CashoutTurnover
- RebateDiscount
- BonusMoney
- RealMoney
- FreeBets
- NormalBets
- Voucher
- Gifts
- IncrMultipleDraws
- SecondChanceTickets
- SecondChanceDrawTickets
operator:
type: integer
format: int32
description: ''
client:
type: integer
format: int32
description: ''
channel:
type: integer
format: int32
description: ''
payload:
type: string
description: ''
title: OutcomeReply
infostoreGameStateV1:
type: object
required:
- active
- columnPrice
- columnPrices
- deadline
- drawNumber
- gameCode
- gameStateId
- highestPrice
- lastUpdated
- mainGameCode
- maxAllowedColumns
- maxMultiDraws
- minAllowedColumns
- originalDeadline
- salesEnd
- salesStart
properties:
gameStateId:
type: integer
format: int32
xml:
attribute: true
description: the id of the state of the game
mainGameCode:
type: integer
format: int32
xml:
attribute: true
description: the code of the main game
gameCode:
type: integer
format: int32
xml:
attribute: true
description: the code of the game
columnPrice:
type: integer
format: int64
xml:
attribute: true
description: the unit price
columnPrices:
type: array
description: a list containing the column prices
items:
type: integer
format: int64
active:
type: boolean
xml:
attribute: true
description: a flag indicating if it is empty
drawNumber:
type: integer
format: int32
xml:
attribute: true
description: the draw number associated
virtualDrawNumber:
type: integer
format: int32
xml:
attribute: true
description: virtual number of the draw
deadline:
type: string
format: date-time
description: the final date
salesStart:
type: string
format: date-time
xml:
attribute: true
description: the date sales start
salesEnd:
type: string
format: date-time
xml:
attribute: true
description: the date sales end
originalDeadline:
type: string
format: date-time
xml:
attribute: true
description: the original deadline
minAllowedColumns:
type: integer
format: int64
xml:
attribute: true
description: the minimun number of columns allowed
maxAllowedColumns:
type: integer
format: int64
xml:
attribute: true
description: the maximum number of columns allowed
highestPrice:
type: integer
format: int64
xml:
attribute: true
description: the highest price allowed
lastUpdated:
type: string
format: date-time
xml:
attribute: true
description: the date that was last updated
maxMultiDraws:
type: integer
format: int32
xml:
attribute: true
description: ' the maximum number of multi-draws'
validationsLotteryBoardDataDTO:
type: object
required:
- boardId
- panels
properties:
boardId:
type: integer
format: int32
description: Board identifier
betType:
type: string
description: Bet type
multipliers:
type: array
description: Array of multipliers
items:
type: integer
format: int32
panels:
type: array
description: Array of Lottery panel data
items:
$ref: '#/definitions/validationsLotteryPanelDataDTO'
options:
type: array
description: Array of options
items:
type: string
quickPick:
type: boolean
description: Flag for quick-pick
description: Lottery board data
SystemModel:
type: object
required:
- type
properties:
systems:
type: array
description: The bet system multiplier. Only IFlex
items:
type: integer
format: int64
type:
type: string
description: 'Betting data type:SINGLE, MULTIPLE, DOUBLE, SYSTEM_3, SYSTEM_4, SYSTEM_5, SYSTEM_6, SYSTEM_7, SYSTEM_8, BANKER_2BANKER_3BANKER_4BANKER_5BANKER_6BANKER_7BANKER_8TRIXIECANADIAN, HEINZ, SUPER_HEINZ, PATENT, LUCKY_15, LUCKY_31, LUCKY_63, LUCKY_127YANKEE, GOLIATH, SUPER_GOLIATH, WINCAST, SCORECAST, ANYTIME_SCORECAST, TIMECAST, STRAIGHT_FORECAST, REVERSE_FORECAST, COMBINATION_FORECAST, TRICAST, COMBINATION_TRICAST'
consumablesThe consumable bulk item:
type: object
required:
- categoryName
- price
- status
- title
properties:
categoryName:
type: string
description: The consumable category name
title:
type: string
description: The consumable title
minLength: 1
maxLength: 64
description:
type: string
description: The consumable description
minLength: 1
maxLength: 128
status:
type: string
description: The consumable status
pattern: 0|1
supplier:
type: string
description: The consumable supplier
partNumber:
type: string
description: The consumable part number
price:
type: string
consumablesThe ticket status update request:
type: object
properties:
name:
type: string
minLength: 1
maxLength: 64
order:
type: integer
format: int32
description:
type: string
minLength: 0
maxLength: 128
atsAtsOpapErrorInfo:
type: object
properties:
errorCode:
type: integer
format: int32
errorMsg:
type: string
infostorePageEntityStateDTO:
type: object
properties:
totalPages:
type: integer
format: int32
totalElements:
type: integer
format: int32
size:
type: integer
format: int32
numberOfElements:
type: integer
format: int32
content:
type: array
items:
$ref: '#/definitions/infostoreEntityStateDTO'
number:
type: integer
format: int32
first:
type: boolean
last:
type: boolean
sort:
$ref: '#/definitions/infostoreSort'
infostoreEntityNotificationDTOResponse:
type: object
properties:
stateId:
type: integer
format: int64
promotionenginePercentageOrAmountType:
type: string
title: PercentageOrAmountType
example: Percentage
enum:
- Percentage
- Amount
x-enum-elements:
- name: Percentage
description: ''
- name: Amount
description: ''
gamemanagementPricePoints:
type: object
required:
- amount
- unitType
properties:
addOn:
$ref: '#/definitions/gamemanagementaddOn'
amount:
type: number
description: Base Game Unit Value
unitType:
type: string
description: Base Game Unit Type
promotionengineMessage:
type: object
properties:
text:
type: string
description: ''
type:
type: string
enum:
- promotionTitle
- messageTitle
- messageBody
- messageCDU
- messageTerminal
version:
type: integer
format: int32
description: ''
title: Message
consumablesPageConsumableDTO:
type: object
properties:
totalPages:
type: integer
format: int32
totalElements:
type: integer
format: int64
numberOfElements:
type: integer
format: int32
last:
type: boolean
first:
type: boolean
sort:
$ref: '#/definitions/consumablesSort'
size:
type: integer
format: int32
content:
type: array
items:
$ref: '#/definitions/consumablesConsumableDTO'
number:
type: integer
format: int32
infostorePricePointsV2DTO:
type: object
properties:
addOn:
type: array
items:
$ref: '#/definitions/infostoreAddOnPricePointsV2DTO'
amount:
type: number
format: double
pulseRetailerSummaryReportSimpleValue:
type: object
properties:
key:
type: string
value:
type: string
consumablesTicketPage:
type: object
properties:
content:
type: array
items:
$ref: '#/definitions/consumablesTicketDTO'
number:
type: integer
format: int32
size:
type: integer
format: int32
totalPages:
type: integer
format: int32
numberOfElements:
type: integer
format: int32
totalElements:
type: integer
format: int64
previousPage:
type: boolean
first:
type: boolean
nextPage:
type: boolean
last:
type: boolean
sort:
$ref: '#/definitions/consumablesSort'
infostorePrizeCategoryIdV1:
type: object
required:
- categoryCd
- drawCd
- gameCd
- selectedCategoryCd
properties:
gameCd:
type: integer
format: int32
xml:
attribute: true
description: the code of the game
drawCd:
type: integer
format: int32
xml:
attribute: true
description: the code of the draw
categoryCd:
type: integer
format: int32
xml:
attribute: true
description: the code of the category
selectedCategoryCd:
type: integer
format: int32
xml:
attribute: true
description: the code of the selected category
consumablesTicketStatusDTO:
type: object
required:
- id
- name
- order
properties:
id:
type: integer
format: int32
name:
type: string
minLength: 1
maxLength: 64
order:
type: integer
format: int32
description:
type: string
minLength: 0
maxLength: 128
AmountsDTO:
type: object
required:
- gross
- net
- other
- refund
- tax
properties:
gross:
type: number
description: Gross amount = Net + Other + Refund + Tax
net:
type: number
description: 'Net amount from '
other:
type: number
description: Other amount (reserved for future use)
refund:
type: number
description: Refund amount
tax:
type: number
description: Tax amount calculated using Pay Taxation options
description: Monetary amounts broken down by type
ParticipatingDrawsDTO:
type: object
required:
- multipleDraws
properties:
draws:
type: array
description: Array of participating draws
items:
type: integer
format: int64
firstDraw:
type: integer
format: int64
description: First participating draw
lastDraw:
type: integer
format: int64
description: Last participating draw
multipleDraws:
type: integer
format: int32
description: Count of participating draws
description: Participating draws data
consumablesThe ticket registration request:
type: object
required:
- name
- priority
- retailerId
- statusId
- type
- userId
discriminator: type
properties:
retailerId:
type: integer
format: int32
description: The ticket retailer id
userId:
type: integer
format: int32
description: The ticket user id
type:
type: integer
format: int32
description: The ticket type
name:
type: string
description: The ticket name
minLength: 1
maxLength: 64
description:
type: string
description: The ticket description
minLength: 0
maxLength: 128
categoryId:
type: integer
format: int32
description: The ticket category
subCategoryId:
type: integer
format: int32
description: The ticket sub category
priority:
type: integer
format: int32
description: The ticket priority
statusId:
type: integer
format: int32
description: The ticket status
items:
type: array
description: The ticket order items
items:
$ref: '#/definitions/consumablesThe order item'
promotionengineOutcomeBonusMoney:
type: object
required:
- Type
- Value
properties:
Value:
type: integer
format: int32
description: ''
Type:
$ref: '#/definitions/promotionenginePercentageOrAmountType'
title: OutcomeBonusMoney
gamemanagementPickXParams:
type: object
required:
- bet
- win
properties:
bet:
$ref: '#/definitions/gamemanagementPickXBetParams'
win:
$ref: '#/definitions/gamemanagementNormalWinCategories'
validationsAmountsDTO:
type: object
required:
- gross
- net
- other
- refund
- tax
properties:
gross:
type: number
description: Gross amount = Net + Other + Refund + Tax
net:
type: number
description: 'Net amount from '
other:
type: number
description: Other amount (reserved for future use)
refund:
type: number
description: Refund amount
tax:
type: number
description: Tax amount calculated using Pay Taxation options
description: Monetary amounts broken down by type
DayPatternModel:
type: object
properties:
day:
type: string
description: day
index:
type: integer
format: int32
description: index
atsDocumentHashesDto:
type: object
required:
- documentDate
- documentId
- documentSchemaVersion
- documentTypeId
- hash
- hashCreationTimeStamp
- systemId
properties:
systemId:
type: integer
format: int32
example: 1100
description: systemId
documentTypeId:
type: integer
format: int32
example: 1
description: documentTypeId
documentId:
type: string
example: 1100-1
description: '1'
documentSchemaVersion:
type: integer
format: int32
example: 1
description: The document schema version
hash:
type: string
example: '1'
description: The document hash
hashCreationTimeStamp:
type: string
example: '2018-06-28T12:04:16.832Z'
description: The date that hash was created
documentDate:
type: string
example: '2018-06-28T12:04:16.832Z'
description: The document date
description: The document hashes
infostoreAddOnPricePointsV2DTO:
type: object
properties:
amount:
type: number
format: double
unitType:
type: string
gameType:
type: string
promotionengineGetHappyHoursReply:
type: object
properties:
promotionId:
type: integer
format: int32
description: ''
messages:
type: array
description: ''
items:
$ref: '#/definitions/promotionengineMessage'
timeRanges:
type: array
description: ''
items:
$ref: '#/definitions/promotionengineTimeRanges'
title: GetHappyHoursReply
promotionengineIncrMultiDrawsType:
type: string
title: IncrMultiDrawsType
example: PcgDraws
enum:
- PcgDraws
- NumDraws
x-enum-elements:
- name: PcgDraws
description: ''
- name: NumDraws
description: ''
ParticipatingDrawModel:
type: object
required:
- multipleDraws
properties:
playedDraw:
type: integer
format: int64
datePattern:
type: array
description: 'incoming parameter: option to participate in future draws based on date(s) selection'
items:
$ref: '#/definitions/DatePatternModel'
dayPattern:
type: array
description: 'incoming parameter: option to participate in future draws based on day(s) selection'
items:
$ref: '#/definitions/DayPatternModel'
drawOffsets:
type: array
description: 'incoming parameter: Advance draw index'
items:
type: integer
format: int32
draws:
type: array
description: 'outcome parameter: it holds the actual participated draws'
items:
type: integer
format: int32
firstDraw:
type: integer
format: int32
description: 'outcome parameter: it holds the first participated draw'
firstDrawTime:
type: string
description: 'outcome parameter: it holds the first participated draw date'
lastDraw:
type: integer
format: int32
description: 'outcome parameter: it holds the last participated draw'
lastDrawTime:
type: string
description: 'outcome parameter: it holds the last participated draw date'
multipleDraws:
type: integer
format: int32
description: 'incoming parameter: it hold the number of consecutive draws'
gamemanagementKenoParams:
type: object
required:
- bet
- win
properties:
bet:
$ref: '#/definitions/gamemanagementKenoBetParams'
win:
$ref: '#/definitions/gamemanagementKenoWinCategories'
atsFaultInfo:
type: object
properties:
code:
type: integer
format: int32
description: The error code
message:
type: string
description: The error message
data:
type: array
description: The error data which is an abstract object that may be used to provide any error metadata
items:
type: object
properties: {}
source:
type: string
description: The application at which the API error occured
type:
type: string
description: 'The error family, e.g. RUNTIME, VALIDATION, etc'
description: The FaultInfo object contains all the details assosiated with an API error
infostoreIIFApplicationException:
type: object
properties:
errorCode:
$ref: '#/definitions/infostoreIIFErrorCode'
errorData:
type: array
items:
type: object
properties: {}
source:
type: string
message:
type: string
consumablesPageProduct:
type: object
properties:
totalPages:
type: integer
format: int32
totalElements:
type: integer
format: int64
numberOfElements:
type: integer
format: int32
last:
type: boolean
first:
type: boolean
sort:
$ref: '#/definitions/consumablesSort'
size:
type: integer
format: int32
content:
type: array
items:
$ref: '#/definitions/consumablesProduct'
number:
type: integer
format: int32
infostoreLastResultDrawAndActiveV3:
type: object
properties:
last:
$ref: '#/definitions/infostoreDrawV3'
active:
$ref: '#/definitions/infostoreDrawV3'
gamemanagementDrawConfiguration:
type: object
required:
- drawSchedules
- drawTimezone
- maxAdvance
- maxConsecutive
- maxFutureDraws
- minAdvance
- minConsecutive
properties:
drawBreak:
type: integer
description: The Draw break
drawOffset:
type: integer
description: The Draw offset
drawSchedules:
$ref: '#/definitions/gamemanagementDrawExpressions Info'
drawTimezone:
type: string
description: The Draw Timezone
maxAdvance:
type: integer
description: Max Advance Draws
maxConsecutive:
type: integer
description: Max Consecutive  Draws
maxFutureDraws:
type: integer
description: Max Future Draws
minAdvance:
type: integer
description: Min Advance Draws
minConsecutive:
type: integer
description: Min Consecutive Draws
description: Draw configuration
gamemanagementLottoBetParams:
type: object
required:
- betTypes
- panels
properties:
panels:
$ref: '#/definitions/gamemanagementpanels'
predefinedSystem:
$ref: '#/definitions/gamemanagementpredefinedSystem'
betTypes:
$ref: '#/definitions/gamemanagementbetTypes'
infostoreAn object that contains information about a state change of an entity:
type: object
required:
- namespace
- stateId
properties:
stateId:
type: integer
format: int64
previousStateId:
type: integer
format: int64
namespace:
type: string
draw:
type: object
additionalProperties:
type: object
additionalProperties:
type: object
properties: {}
transactionsControl:
type: object
properties: {}
validationsState:
type: object
properties: {}
PromotionInfoModel:
type: object
properties:
optIn:
type: array
description: optIn
items:
type: integer
format: int32
outcomeId:
type: integer
format: int64
description: outcomeId
promotionId:
type: integer
format: int32
description: promotionId
voucherId:
type: string
description: voucherId
DBGWagerModel:
type: object
required:
- boards
- gameId
- multipliers
properties:
addOn:
type: array
items:
$ref: '#/definitions/AddOn'
blockStatus:
type: string
boards:
type: array
description: data related to the player prognostic selections
items:
$ref: '#/definitions/BoardModel'
columns:
type: integer
format: int32
description: the produced number of columns per participated draw
cost:
type: number
description: Wager's total cost
creationTime:
type: integer
format: int64
discount:
type: integer
format: int32
description: amount that has been substracted from the cost when that wager participated in promotion
gameId:
type: integer
format: int32
multipliers:
type: array
description: multipliers
items:
type: integer
format: int32
options:
type: array
description: 'special options depend on the game, in wager level'
items:
type: string
participatingDraws:
description: data related to the wager participated draws
$ref: '#/definitions/ParticipatingDrawModel'
quickPick:
type: boolean
description: quickPick flag
status:
type: string
teamShares:
type: integer
format: int32
validationsWinningsPerCategoryDTO:
type: object
required:
- categoryAmounts
properties:
categoryAmounts:
description: Amounts won in category
$ref: '#/definitions/validationsAmountsDTO'
categoryId:
type: integer
format: int32
description: Category identifier
subCategoryId:
type: integer
format: int32
description: Sub-category identifier
successes:
type: integer
format: int32
description: Count of category successes
description: Detailed description of winnings for a winning category
promotionenginePromoReply:
type: object
required:
- messages
- outcomeId
- outcomeMetaData
- outcomeType
- promotionId
properties:
promotionId:
type: integer
format: int32
description: ''
outcomeId:
type: integer
format: int32
description: ''
outcomeType:
type: string
enum:
- CashoutTurnover
- RebateDiscount
- BonusMoney
- RealMoney
- FreeBets
- NormalBets
- Voucher
- Gifts
- IncrMultipleDraws
- SecondChanceTickets
- SecondChanceDrawTickets
outcomeMetaData:
$ref: '#/definitions/promotionengineOutcomeMetaData'
messages:
type: array
description: ''
items:
$ref: '#/definitions/promotionengineMessage'
title: PromoReply
pulseRetailerSummaryReportSectionData:
type: object
properties:
description:
type: string
count:
type: integer
format: int32
amounts:
type: object
additionalProperties:
type: number
consumablesThe consumable bulk insert response:
type: object
properties:
errors:
type: array
items:
$ref: '#/definitions/consumablesError'
gamemanagementbetTypes:
type: array
description: Bet Types
items:
$ref: '#/definitions/gamemanagementBetType'
consumablesLoyaltyProfileDTO:
type: object
required:
- id
- name
properties:
id:
type: integer
format: int32
name:
type: string
minLength: 1
maxLength: 64
description:
type: string
minLength: 0
maxLength: 128
points:
type: array
items:
$ref: '#/definitions/consumablesLoyaltyPoint'
DetailsDTO:
type: object
required:
- draw
- status
properties:
detailAmounts:
description: Sum of amounts of winnings for the draw
$ref: '#/definitions/AmountsDTO'
draw:
type: integer
format: int32
description: Draw identifier
purgeTime:
type: integer
format: int64
description: Unix epoch timestamp of winnings expiration
status:
type: string
description: Draw status
enum:
- None
- Win
- Expired
- Paid
- NoWin
- Pending
- PendingWinningNumbers
- PendingResults
- Claimed
winningsPerCategory:
type: array
description: Array of winnings details per winning category
items:
$ref: '#/definitions/WinningsPerCategoryDTO'
description: Detailed description of winnings for a draw
consumablesThe order item:
type: object
required:
- consumableId
- quantity
- type
discriminator: type
properties:
type:
type: integer
format: int32
description: The order item type
consumableId:
type: integer
format: int32
description: The order item consumable id
quantity:
type: integer
format: int32
description: The order item quantity
validationsDrawBasedGameDTO:
type: object
required:
- boards
- gameId
- multipliers
properties:
blockStatus:
type: string
description: Wager block status
enum:
- NA
- Unblocked
- Blocked
- PartiallyBlocked
boards:
type: array
description: Lottery board data
items:
$ref: '#/definitions/validationsLotteryBoardDataDTO'
columns:
type: integer
format: int32
description: Columns played in wager
cost:
type: number
description: Cost of wager
creationTime:
type: integer
format: int64
description: Unix epoch of wager creation timestamp
gameId:
type: integer
format: int32
description: Game identifier
multipliers:
type: array
description: Array of multipliers
items:
type: integer
format: int32
options:
type: array
description: Array of options
items:
type: string
participatingDraws:
description: Participating draws data
$ref: '#/definitions/validationsParticipatingDrawsDTO'
quickPick:
type: boolean
description: Flag for quick-pick
status:
type: string
description: Internal wager status
enum:
- NA
- Played
- Canceled
- InternalPlayedRollback
teamShares:
type: integer
format: int32
description: Count of team shares
description: Draw-based game data
promotionengineTimeRanges:
type: object
properties:
days:
type: string
enum:
- MON
- TUE
- WED
- THU
- FRI
- SAT
- SUN
times:
type: array
description: ''
items:
$ref: '#/definitions/promotionengineTimeInterval'
title: TimeRanges
infostoreEntityStateDTO:
type: object
properties:
stateId:
type: integer
format: int64
namespace:
type: string
draw:
type: object
additionalProperties:
type: object
additionalProperties:
type: object
properties: {}
transactionsControl:
type: object
properties: {}
validationsState:
type: object
properties: {}
validationsParticipatingDrawsDTO:
type: object
required:
- multipleDraws
properties:
draws:
type: array
description: Array of participating draws
items:
type: integer
format: int64
firstDraw:
type: integer
format: int64
description: First participating draw
lastDraw:
type: integer
format: int64
description: Last participating draw
multipleDraws:
type: integer
format: int32
description: Count of participating draws
description: Participating draws data
gamemanagementpanels:
type: array
items:
$ref: '#/definitions/gamemanagementLottoPanel'
PlayResponseModel:
type: object
required:
- serialNumber
- wager
properties:
pilot:
type: boolean
description: pilot/demo flag. Server side value
promotionOutcomes:
type: array
items:
$ref: '#/definitions/PromotionOutcomeModel'
serialNumber:
type: string
description: serialNumber
wager:
$ref: '#/definitions/WagerDataModel'
gamemanagementModel 1:
type: array
description: Blacklisted Play Slips
items:
type: integer
gamemanagementKenoBetParams:
type: object
required:
- betTypes
- panel
properties:
panel:
$ref: '#/definitions/gamemanagementKenoPanel'
betTypes:
$ref: '#/definitions/gamemanagementbetTypes'
gamemanagementPayBonus:
type: object
required:
- limits
- type
properties:
level:
type: string
description: Pay bonus level
type:
type: string
description: Pay bonus type
limits:
$ref: '#/definitions/gamemanagementlimits'
description: The pay bonus
atsRetrieveDocumentsStatusPendingDto:
type: object
required:
- id
properties:
id:
type: integer
format: int64
example: 1
description: id
status:
type: string
description: pending
msg:
type: string
description: message for pending
description: RetrieveDocumentsStatusPendingDto
gamemanagementWinningColumn:
type: object
required:
- entries
- winningColumnsDetails
properties:
entries:
type: integer
description: Entries
winningColumnsDetails:
$ref: '#/definitions/gamemanagementwinningColumnsDetails'
pulseRetailerOperationalHourDTO:
type: object
properties:
from:
type: string
format: date-time
to:
type: string
format: date-time
OptionalPromotionModel:
type: object
required:
- name
- type
- value
properties:
name:
type: string
description: name
type:
type: string
description: type
value:
type: string
description: value
gamemanagementlimits:
type: array
items:
$ref: '#/definitions/gamemanagementLimitDetails'
consumablesProduct:
type: object
properties:
id:
type: integer
format: int32
name:
type: string
price:
type: number
gamemanagementValidationDeadline:
type: array
items:
$ref: '#/definitions/gamemanagementValidationDeadlines'
consumablesTicketSubCategoryDTO:
type: object
required:
- id
- name
properties:
id:
type: integer
format: int32
description: The ticket sub category id
name:
type: string
description: The ticket sub category name
minLength: 1
maxLength: 64
consumablesTicketCategoryUpdateRequest:
type: object
properties:
type:
type: integer
format: int32
description: The ticket category name
name:
type: string
description: The ticket category type
minLength: 1
maxLength: 64
gamemanagementOperators:
type: array
items:
$ref: '#/definitions/gamemanagementOperator'
SportsBookPlayRequestModel:
type: object
required:
- bets
- gameId
properties:
acceptOdds:
type: integer
format: int32
description: 'Accept odds types: 1 = Higher Odds, 2 = All, 3 = None, Only same odds'
acceptPriceChange:
type: boolean
description: The accept price change
betSlipId:
type: integer
format: int64
bets:
type: array
description: List of placed bets
items:
$ref: '#/definitions/BetModel'
employeeId:
type: integer
format: int64
freeBets:
type: array
items:
type: string
gameId:
type: integer
format: int32
multifactor:
type: integer
format: int64
placedTime:
type: integer
format: int64
totalCount:
type: integer
format: int32
description: 'In response only, The total number of bets'
gamemanagementProductFields:
type: object
required:
- areas
- ean
- id
- name
- status
- subscriptions
properties:
id:
type: integer
description: Product Id
name:
type: string
description: Product Name
description:
type: string
description: Product Description
subscriptions:
type: integer
description: Available For Subscriptions
status:
type: integer
description: Is Product Active
ean:
type: string
description: Product EAN Number
areas:
$ref: '#/definitions/gamemanagementareas'
gamemanagementOigBetParams:
type: object
required:
- expirationTime
- nearWins
- nextPoolThreshold
- nextToCurrentRatio
- poolSize
- transactionControl
- winningChances
properties:
expirationTime:
type: integer
description: Expiration Time
nearWins:
type: integer
description: Near wins
nextPoolThreshold:
type: integer
description: Next Pool threshold
nextToCurrentRatio:
type: integer
description: Next to current ratio
poolSize:
type: integer
description: Pool size
transactionControl:
type: boolean
description: Transaction control
winningChances:
type: integer
description: Winning chances
gamemanagementOigParams:
type: object
required:
- bet
- win
properties:
bet:
$ref: '#/definitions/gamemanagementOigBetParams'
win:
$ref: '#/definitions/gamemanagementOigWinCategories'
gamemanagementGameSpecificParameters:
type: object
required:
- winnersParams
- winningColumn
properties:
keno:
$ref: '#/definitions/gamemanagementKenoParams'
lotto:
$ref: '#/definitions/gamemanagementLottoParams'
oig:
$ref: '#/definitions/gamemanagementOigParams'
pickx:
$ref: '#/definitions/gamemanagementPickXParams'
matchx:
$ref: '#/definitions/gamemanagementMatchXParameters'
playTaxation:
$ref: '#/definitions/gamemanagementPlayTaxation'
payTaxation:
$ref: '#/definitions/gamemanagementPayTaxations'
winnersParams:
$ref: '#/definitions/gamemanagementWinnersParams'
winningColumn:
$ref: '#/definitions/gamemanagementWinningColumn'
consumablesGame:
type: object
properties:
id:
type: integer
format: int32
name:
type: string
infostoreGameSummaryDTO:
type: object
properties:
gameStateId:
type: integer
format: int32
description: the unique identifier of the game
name:
type: string
description: the name of the game
category:
type: string
description: the category of the game
enum:
- DBG
- IWG
status:
type: integer
format: int32
description: the status of the game
validationsDetailsDTO:
type: object
required:
- draw
- status
properties:
detailAmounts:
description: Sum of amounts of winnings for the draw
$ref: '#/definitions/validationsAmountsDTO'
draw:
type: integer
format: int32
description: Draw identifier
purgeTime:
type: integer
format: int64
description: Unix epoch timestamp of winnings expiration
status:
type: string
description: Draw status
enum:
- None
- Win
- Expired
- Paid
- NoWin
- Pending
- PendingWinningNumbers
- PendingResults
- Claimed
winningsPerCategory:
type: array
description: Array of winnings details per winning category
items:
$ref: '#/definitions/validationsWinningsPerCategoryDTO'
description: Detailed description of winnings for a draw
TerminalSelectionInModel:
type: object
required:
- eventId
- selectionId
properties:
banker:
type: boolean
description: Banker indicator of selection
eventId:
type: integer
format: int32
description: Identification number of event
group:
type: integer
format: int32
description: 'Group with one of the following values: 0 : non-group,similar to lack of this attribute. 1..10 : Group A, B, C, D, AB, AC, AD, BC, BD, CD, 11..20 : R Group A, B, C, D, AB, AC, AD, BC, BD, CD'
lines:
type: array
description: Handicaps or Under/Over values of selection
items:
type: number
format: double
odds:
description: Odds of selection
$ref: '#/definitions/OddsModel'
selectionId:
type: integer
format: int32
description: Identification number of selection
singleStake:
description: Single stake of selection
$ref: '#/definitions/StakeModel'
PromotionOutcomeModel:
type: object
required:
- outcomeId
- outcomeMetaData
- outcomeType
- promotionId
properties:
messages:
type: array
description: messages
items:
$ref: '#/definitions/PromotionOutcomeModelMessages'
outcomeId:
type: integer
format: int32
description: outcomeId
outcomeMetaData:
$ref: '#/definitions/OutcomeMetaDataModel'
outcomeType:
type: string
description: outcomeType
promotionId:
type: integer
format: int32
description: promotionId
AddOn:
type: object
properties:
columns:
type: integer
format: int32
cost:
type: number
gameTypeId:
type: integer
format: int32
infostoreDrawResultV1:
type: object
required:
- id
- number
- order
properties:
id:
type: integer
format: int64
description: a unique internal identifier for the draw
number:
type: string
description: the specific number selected
order:
type: integer
format: int32
description: a number identifying the order in an asceding fashion
categoryCd:
type: integer
format: int32
description: the code of the category
boardTypeId:
type: integer
format: int32
gamemanagementBetLimits:
type: object
required:
- maxBoards
- maxColumns
- maxWagerMultiplier
- minBoards
- minColumns
- minWagerMultiplier
properties:
maxBoardMultiplier:
type: integer
description: General Multiplier Max
maxBoards:
type: integer
description: Maximum number of Boards
maxColumns:
type: integer
description: The maximum columns
maxWagerMultiplier:
type: integer
description: The maximum wager multiplier
minBoardMultiplier:
type: integer
description: General Multiplier Min
minBoards:
type: integer
description: Minimum number of Boards
minColumns:
type: integer
description: The minimum columns
minWagerMultiplier:
type: integer
description: The minimum wager multiplier
description: Game bet limits
gamemanagementMatchXSymbols:
type: object
required:
- away
- cancel
- draw
- home
properties:
home:
$ref: '#/definitions/gamemanagementhome'
draw:
$ref: '#/definitions/gamemanagementdraw'
away:
$ref: '#/definitions/gamemanagementaway'
cancel:
$ref: '#/definitions/gamemanagementcancel'
pulseRetailerSummaryReport:
type: object
properties:
fromDate:
type: string
format: date-time
toDate:
type: string
format: date-time
totals:
type: array
items:
$ref: '#/definitions/pulseRetailerSummaryReportSection'
keyValues:
type: array
items:
$ref: '#/definitions/pulseRetailerSummaryReportSimpleValue'
pulseSegmentDTO:
type: object
properties:
id:
type: integer
format: int32
startDate:
type: string
format: date-time
description:
type: string
title:
type: string
active:
type: boolean
gamemanagementResponseOutput:
type: object
required:
- code
- guid
- message
properties:
code:
type: integer
description: Message response
message:
type: string
description: Message response
type:
type: string
guid:
type: string
description: guid
x-format:
guid: true
source:
type: string
data:
$ref: '#/definitions/gamemanagementdata'
detail:
type: string
ValidationResponseDTO:
type: object
required:
- cost
- endDraw
- gameId
- startDraw
- totalAmounts
properties:
gameId:
type: integer
format: int32
description: Game identifier
totalAmounts:
description: Sum of amounts of all winnings
$ref: '#/definitions/AmountsDTO'
startDraw:
type: integer
format: int64
description: First participating draw of the wager
endDraw:
type: integer
format: int64
description: Last participating draw of the wager
paidDraws:
type: array
description: Array of draw numbers already paid
items:
type: integer
format: int32
details:
type: array
description: Array of detailed winnings
items:
$ref: '#/definitions/DetailsDTO'
summary:
description: Summarized draws status counters
$ref: '#/definitions/SummaryDataDTO'
dbg:
description: Draw-based game data
$ref: '#/definitions/DrawBasedGameDTO'
status:
type: string
description: Final status of the wager
enum:
- None
- Winning
- WinningButNeedsAuthorization
- WinningButCannotPay
- WinningButNeedsClaim
- Pending
- PendingWinningNumbers
- PendingResults
- Paid
- Claimed
- Expired
- Lost
- OperatorNotIssuer
paymentStatus:
type: string
description: Payment status of the wager winnings
enum:
- Cash
- CashOrClaim
- ClaimOnly
- OverLimit
playedDraw:
type: integer
format: int32
teamShares:
type: integer
format: int32
saleRetailerId:
type: integer
format: int32
cost:
type: integer
format: int64
description: Response for the validation or winnings endpoints
TerminalBetsInModel:
type: object
required:
- selections
- systems
properties:
selections:
type: array
description: selections data
items:
$ref: '#/definitions/TerminalSelectionInModel'
systems:
type: array
description: system
items:
$ref: '#/definitions/TerminalSystemInModel'
SelectionModel:
type: object
required:
- odds
- partNo
- selectionId
properties:
banker:
type: boolean
description: The banker definition
eventId:
type: integer
format: int64
getiMarket:
type: integer
format: int64
description: 'The index market, -1:No i-market 0..19: i-market played position OR 0..127: Live Home Team Score when the forecast=724..729)'
groupValue:
type: array
description: 'Mandatory for Iflex. 0: No group, 1..10 : groups A, B, C, D, AB, AC, AD, BC, BD, CD, 11..20: R-groups A, B, C, D, AB, AC, AD, BC, BD, CD, +100 : Banker selection'
items:
type: integer
format: int64
imarket:
type: integer
format: int64
description: imarket
lines:
type: array
description: 'The Handicap/Under-Over value. Only IFlex will have 2 indexes: var0, var1'
items:
type: number
format: double
odds:
description: The odds data object
$ref: '#/definitions/OddDataModel'
partNo:
type: integer
format: int64
description: 'The number of the selection. If there are 3 selections they should have 1,2,3 respectively'
scores:
type: array
description: 'The match score. Indexed by team A score{0} & team B score {1}'
items:
type: integer
format: int64
selectionId:
type: string
description: The selection id. For Iflex will be MARK_CODE_EVENT_CODE
status:
type: string
description: 'The status of the selection, equivalent to the status of the BetPartPlacementResult'
infostoreWinningNumbersV3DTO:
type: object
properties:
list:
type: array
description: Winning numbers list
items:
type: integer
format: int32
pulseSegmentSnapshotDTO:
type: object
properties:
id:
type: integer
format: int32
startDate:
type: string
format: date-time
description:
type: string
infostoreDrawResultV2:
type: object
properties:
id:
type: integer
format: int32
description: The unique id of the result
tierType:
type: integer
format: int32
description: 'Number of total picks for tier ie. 1/10, 2/10, 3/10 where 10 is the tier type'
tierLevel:
type: integer
format: int32
description: 'Number of winning bets for tier ie. 1/10, 2/10, 3/10 where 1,2,3 is the tier level'
distributedAmount:
type: integer
format: int64
description: Distributed amount to all winners of category
dividentAmount:
type: integer
format: int64
description: Gross divident amount per winner of category
taxationAmount:
type: integer
format: int64
description: Taxation amount per winner of category
roundingAmount:
type: integer
format: int64
description: Rounding amount per winner of category
bonusAmount:
type: integer
format: int64
description: Bonus amount per winner of category
jackpotAmount:
type: integer
format: int64
description: Jackpot amount per winner of category
netDividentAmount:
type: integer
format: int64
description: Net divident amount per winner of category
winners:
type: integer
format: int32
description: Number of category winners
infostoreDrawResultV3:
type: object
properties:
id:
type: integer
format: int32
description: The unique id of the result
divident:
type: number
format: double
description: Divident amount per winner of category
winners:
type: integer
format: int32
description: Number of category winners
distributed:
type: number
format: double
description: Distributed amount to all winners of category (net amount)
jackpot:
type: number
format: double
description: Jackpot amount of category
fixed:
type: number
format: double
description: Fixed winning amount of category
categoryType:
type: integer
format: int32
description: 'The type of category. 0:NormalDividend, 1:FixedAmount, 2:FixedOdds, 3:DividendSharedWithOther, 4:PromotionWinner, 5:ProgressiveJackpot'
promotionId:
type: integer
format: int64
description: Promotion id of category. It will be null if not applicable.
gameType:
type: string
description: The game type related to the category.
infostoreJackpotDTO:
type: object
properties:
jackpot:
type: array
items:
$ref: '#/definitions/infostoreJackpotCategoryAmountsDTO'
gamemanagementPayTaxations:
type: array
items:
$ref: '#/definitions/gamemanagementPayTaxation'
PromotionOutcomeModelMessages:
type: object
required:
- type
- version
properties:
type:
type: string
description: type
version:
type: integer
format: int32
description: version
consumablesThe consumable registration request:
type: object
required:
- categoryId
- price
- status
- title
properties:
categoryId:
type: integer
format: int32
description: The consumable category id
title:
type: string
description: The consumable title
minLength: 1
maxLength: 64
description:
type: string
description: The consumable description
minLength: 0
maxLength: 128
status:
type: integer
format: int32
description: 'The consumable status (0 -> INACTIVE, 1 -> ACTIVE)'
minimum: 0
maximum: 1
supplier:
type: string
description: The consumable supplier
partNumber:
type: string
description: The consumable part number
price:
type: number
description: The consumable price
pulsePageSegmentSnapshotDTO:
type: object
properties:
totalElements:
type: integer
format: int64
totalPages:
type: integer
format: int32
size:
type: integer
format: int32
content:
type: array
items:
$ref: '#/definitions/pulseSegmentSnapshotDTO'
number:
type: integer
format: int32
sort:
$ref: '#/definitions/pulseSort'
first:
type: boolean
numberOfElements:
type: integer
format: int32
pageable:
$ref: '#/definitions/pulsePageable'
last:
type: boolean
pulsePage_RetailerReward:
type: object
properties:
totalElements:
type: integer
format: int64
totalPages:
type: integer
format: int32
size:
type: integer
format: int32
content:
type: array
items:
$ref: '#/definitions/pulse_RetailerReward'
number:
type: integer
format: int32
sort:
$ref: '#/definitions/pulseSort'
first:
type: boolean
numberOfElements:
type: integer
format: int32
pageable:
$ref: '#/definitions/pulsePageable'
last:
type: boolean
infostorePrizeCategoryV1:
type: object
required:
- id
properties:
id:
description: a unique internal identifier of the winning
$ref: '#/definitions/infostorePrizeCategoryIdV1'
divident:
type: integer
format: int64
xml:
attribute: true
description: the divident to be shared
winners:
type: integer
format: int32
xml:
attribute: true
description: the numbers of winners for this category
winningAmount:
type: integer
format: int64
xml:
attribute: true
description: the total winning amount
jackpot:
type: integer
format: int64
xml:
attribute: true
description: 'the jackpot amount, if applicable'
fixedWinningAmount:
type: integer
format: int64
xml:
attribute: true
description: the fixed winning amount
categoryType:
type: integer
format: int32
xml:
attribute: true
description: the type of the winning category
promotionId:
type: integer
format: int32
xml:
attribute: true
description: the id of the promotion if applicable
consolidatedAmount:
type: integer
format: int64
xml:
attribute: true
description: the consolidated amount that is either the fixed amount or the dividend
extraInfo:
type: string
xml:
attribute: true
description: a generic description that may include extra prize info
xml:
name: PrizeCategory
infostoreDrawAnimationV3DTO:
type: object
properties:
startTimestamp:
type: integer
format: int64
description: Denotes in UTC the timestamp that an animation starts
stayDuration:
type: integer
format: int32
description: Denotes how long (in milliseconds) an animation hop will last
steps:
type: array
description: Denotes the list of steps before a number is finally marked as a winning one. Note that maximum X steps are specified before reaching an actual winning number
items:
$ref: '#/definitions/infostoreStepV3'
TokenResponse:
type: object
required:
- access_token
- expires_in
- scope
- token_type
properties:
scope:
type: string
description: the scope of the generated token (space separated)
jti:
type: string
description: the jti (JWT ID) claim in case of JWT token
access_token:
type: string
description: the generated authorization token
token_type:
type: string
description: the type of the generated token
refresh_token:
type: string
description: 'the token used to refresh current token. Applicable for grant types: password, client_credentials, authorization_code'
expires_in:
type: integer
format: int32
description: the time in seconds of the duration of the token
WinningsPerCategoryDTO:
type: object
required:
- categoryAmounts
properties:
categoryAmounts:
description: Amounts won in category
$ref: '#/definitions/AmountsDTO'
categoryId:
type: integer
format: int32
description: Category identifier
subCategoryId:
type: integer
format: int32
description: Sub-category identifier
successes:
type: integer
format: int32
description: Count of category successes
description: Detailed description of winnings for a winning category
pulsePageRetailerIncentiveDTO:
type: object
properties:
totalElements:
type: integer
format: int64
totalPages:
type: integer
format: int32
size:
type: integer
format: int32
content:
type: array
items:
$ref: '#/definitions/pulseRetailerIncentiveDTO'
number:
type: integer
format: int32
sort:
$ref: '#/definitions/pulseSort'
first:
type: boolean
numberOfElements:
type: integer
format: int32
pageable:
$ref: '#/definitions/pulsePageable'
last:
type: boolean
gamemanagementPickXBetParams:
type: object
required:
- betTypes
- panel
properties:
panel:
$ref: '#/definitions/gamemanagementPickXPanel'
sequential:
$ref: '#/definitions/gamemanagementsequential'
betTypes:
$ref: '#/definitions/gamemanagementbetTypes'
gamemanagementsequential:
type: array
description: Sequential
items:
type: string
gamemanagementoperators:
type: array
description: Game operators
items:
$ref: '#/definitions/gamemanagementGameOperator'
StakeModel:
type: object
required:
- amount
- currency
properties:
amount:
type: integer
format: int32
description: Betting amount on each combination will be produced from those parts
currency:
type: string
description: Description of the currency with letters e.g. "GBP"
promotionengineInputMetaData:
type: object
required:
- cost
properties:
cost:
type: array
description: ''
items:
type: integer
format: int32
bundle:
type: object
properties:
id:
type: integer
format: int32
description: bundle id
session:
type: integer
format: int32
description: bundle session
title: InputMetaData
promotionengineGetPromotionReply:
type: object
properties:
id:
type: integer
format: int32
description: ''
name:
type: string
description: ''
description:
type: string
description: ''
startDate:
type: string
description: ''
endDate:
type: string
description: ''
budget:
type: string
description: ''
priority:
type: integer
format: int32
description: ''
purgeDate:
type: string
description: ''
status:
type: string
description: ''
type:
type: string
description: ''
style:
type: string
description: ''
repeat:
type: boolean
description: ''
optIn:
type: boolean
description: ''
operator:
type: integer
format: int32
description: ''
client:
type: integer
format: int32
description: ''
channels:
type: string
description: ''
playerLimit:
type: integer
format: int32
description: ''
player:
type: integer
format: int32
description: ''
terminal:
type: integer
format: int32
description: ''
title: GetPromotionReply
gamemanagementMatchXPanels:
type: array
items:
$ref: '#/definitions/gamemanagementMatchXPanel'
AutoCashoutModel:
type: object
properties:
ascOdds:
type: number
format: double
description: This will be Odds that are Greater than the odds of the bet
descOdds:
type: number
format: double
description: This will be Odds that are Less than the odds of the bet
stopLoss:
type: number
format: double
description: This will be a value less than the stake of the bet
stopWin:
type: number
format: double
description: This will be a Value that is Greater than the stake of the bet
gamemanagementGamesInfo:
type: array
description: Games information
items:
$ref: '#/definitions/gamemanagementGameInfo'
pulseRetailerLoyaltyStatus:
type: object
properties:
totalPoints:
type: integer
format: int64
points:
type: array
items:
$ref: '#/definitions/pulse_RetailerLoyaltyPoint'
gamemanagementOigWinCategories:
type: array
items:
$ref: '#/definitions/gamemanagementOigWinCategory'
infostoreSubscriberRegistrationRequest:
type: object
required:
- name
properties:
name:
type: string
entities:
type: array
items:
type: string
enum:
- draw
- transactions
- validations
gameIds:
type: array
items:
type: integer
format: int32
messageBody:
type: string
enum:
- none
- notification
- entity
method:
type: string
enum:
- rest
path:
type: string
httpMethod:
type: string
pattern: ^(GET|HEAD|POST|PUT|PATCH|DELETE|OPTIONS|TRACE)$
maxRetries:
type: integer
format: int32
minimum: 0
maximum: 100
retryInterval:
type: integer
format: int32
minimum: 500
options:
type: object
additionalProperties:
$ref: '#/definitions/infostoreSubscribableEntityOptions'
consumablesLoyaltyPoint:
type: object
required:
- credits
- gameId
- points
properties:
gameId:
type: integer
format: int32
points:
type: integer
format: int64
credits:
type: integer
format: int64
WagerPlayRequestModel:
type: object
required:
- metadata
- wager
properties:
isecure:
type: array
description: isecure
items:
type: integer
format: int64
metadata:
$ref: '#/definitions/MetadataModel'
wager:
$ref: '#/definitions/WagerDataModel'
pulseRetailerDTO:
type: object
properties:
id:
type: integer
format: int32
name:
type: string
phone:
type: string
mobile:
type: string
address:
type: string
zipCode:
type: string
taxNumber:
type: string
status:
type: integer
format: int32
type:
type: integer
format: int32
gamemanagementaddOn:
type: array
items:
$ref: '#/definitions/gamemanagementAddOnPricePoints'
gamemanagementcancel:
type: object
required:
- desc
- id
- symbol
properties:
id:
type: integer
description: The symbol Id
desc:
type: string
description: The symbol Description
symbol:
type: string
description: The symbol character
minLength: 1
description: Cancel
OddDataModel:
type: object
required:
- decimal
properties:
decimal:
type: number
format: double
description: 'Decimal odds of each selection. e.g. 2,60'
fractional:
type: string
description: Fractional representation of odds. E.g. 8/5
consumablesThe ticket category registration request:
type: object
required:
- name
- type
properties:
type:
type: integer
format: int32
description: The ticket category type
name:
type: string
description: The ticket category name
minLength: 1
maxLength: 64
OddsModel:
type: object
required:
- decimal
properties:
decimal:
type: number
format: double
description: 'Decimal odds of each selection, e.g. 2,60'
fractional:
type: string
description: 'Fractional representation of odds,e.g. 8/5'
priceType:
type: string
atsAtsRetrieveDocumentsRequestDto:
type: object
required:
- documentTypeId
- fromDatetime
- systemId
- toDatetime
properties:
systemId:
type: integer
format: int32
example: 5
description: systemId
documentTypeId:
type: integer
format: int32
example: 1
description: documentTypeId
fromDatetime:
type: string
format: date-time
example: '2018-06-18T13:00:00.000Z'
description: The from date time in UTC
toDatetime:
type: string
format: date-time
example: '2018-06-18T14:00:00.000Z'
description: The to date time in UTC
description: Documents Hash creation and retrieval
TerminalPlaceBetsInModel:
type: object
required:
- bets
- gameId
properties:
acceptOdds:
type: integer
format: int32
description: 'Price change option needed always in case the acceptPriceChange = true Its possible values are: Accept only same or higher odds Accept all odds Accept only same odds, similar case with acceptedPriceChange = false'
acceptPriceChange:
type: boolean
description: 'If there is or not any price change, true or false. In case of false, odds change is not permitted. In case of true, the arrtibute acceptOdds must be checked. In case of its absence, selections odds no needed as no checks will be done on them'
bets:
description: Bet  data
$ref: '#/definitions/TerminalBetsInModel'
extendedResponse:
type: boolean
description: Extended flag
gameId:
type: integer
format: int64
description: 'New returned betting game ID, always equal to 15000'
voucherCode:
type: string
gamemanagementGameParametersResource:
type: object
required:
- gameSpecific
- generic
properties:
generic:
$ref: '#/definitions/gamemanagementGameParameters'
gameSpecific:
$ref: '#/definitions/gamemanagementGameSpecificParameters'
