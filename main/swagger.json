{
  "swagger" : "2.0",
  "info" : {
    "description" : "Below you can find the API documentation for operations of Information Store.",
    "version" : "1.0",
    "title" : "Information Store",
    "contact" : {
      "name" : "Intralot S.A. "
    }
  },
  "basePath" : "/api",
  "tags" : [ {
    "name" : "Draw operations V1.0"
  }, {
    "name" : "Draw operations V2.0"
  }, {
    "name" : "Draw operations V3.0"
  }, {
    "name" : "Draw update operations V2.0"
  }, {
    "name" : "Game operations V1.0"
  }, {
    "name" : "Sample subscriber operations V1.0"
  }, {
    "name" : "Entity state operations"
  }, {
    "name" : "Subscriber operations"
  } ],
  "paths" : {
    "/v1.0/draws/{gameStateId}/{drawNumber}/prizes" : {
      "get" : {
        "tags" : [ "Draw operations V1.0" ],
        "summary" : "Get Prize Categories",
        "description" : "Get the prize categories for a specific game and draw, as a list of <i>'DrawResult'</i> objects.",
        "operationId" : "getPrizeCategories",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "gameStateId",
          "in" : "path",
          "description" : "The game identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "drawNumber",
          "in" : "path",
          "description" : "The draw number to search the prizes for",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PrizeCategoryV1"
              }
            }
          }
        }
      }
    },
    "/v1.0/draws/{gameStateId}/{drawNumber}/results" : {
      "get" : {
        "tags" : [ "Draw operations V1.0" ],
        "summary" : "Get results for a draw by draw number",
        "description" : "Get draw results information for a specific draw number.",
        "operationId" : "getDrawResultsForDrawNumber",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "gameStateId",
          "in" : "path",
          "description" : "The game identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "drawNumber",
          "in" : "path",
          "description" : "Draw number to search for",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/DrawV1"
            }
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/IIFApplicationException"
            }
          },
          "401" : {
            "description" : "AUTHENTICATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/IIFApplicationException"
            }
          }
        }
      }
    },
    "/v1.0/draws/{gameStateId}/{drawNumber}/draw" : {
      "get" : {
        "tags" : [ "Draw operations V1.0" ],
        "summary" : "Get draw",
        "description" : "Get the draw information for a specific game, for a specific number",
        "operationId" : "getDraw",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "gameStateId",
          "in" : "path",
          "description" : "The game identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "drawNumber",
          "in" : "path",
          "description" : "Draw number to search for",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DrawV1"
            }
          }
        }
      }
    },
    "/v2.0/draws/{gameId}/last/{limit}" : {
      "get" : {
        "tags" : [ "Draw operations V2.0" ],
        "summary" : "Get last draws for a game",
        "description" : "Get last draws for a game. By default the active draw is included in the response if it exists.",
        "operationId" : "getLastDraws",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "gameId",
          "in" : "path",
          "description" : "Game identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "limit",
          "in" : "path",
          "description" : "Limit, the number of total draws",
          "required" : true,
          "type" : "integer",
          "maximum" : 100,
          "minimum" : 1,
          "format" : "int32"
        }, {
          "name" : "includeActive",
          "in" : "query",
          "description" : "Whether to include the active draw if it exists",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The status in which the last draws should be. By default all non-active and non-future draws are included.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DrawV2"
              }
            }
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v2.0/draws/{gameId}/upcoming/{limit}" : {
      "get" : {
        "tags" : [ "Draw operations V2.0" ],
        "summary" : "Get upcoming draws for a game",
        "description" : "Get upcoming draws for a game. By default the active draw is included in the response if it exists.",
        "operationId" : "getUpcomingDraws",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "gameId",
          "in" : "path",
          "description" : "Game identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "limit",
          "in" : "path",
          "description" : "Limit, the number of total draws",
          "required" : true,
          "type" : "integer",
          "maximum" : 100,
          "minimum" : 1,
          "format" : "int32"
        }, {
          "name" : "includeActive",
          "in" : "query",
          "description" : "Whether to include the active draw if it exists",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DrawV2"
              }
            }
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v2.0/draws/{gameId}/active" : {
      "get" : {
        "tags" : [ "Draw operations V2.0" ],
        "summary" : "Get the active draw for a game",
        "description" : "Get the active draw for a game",
        "operationId" : "getActiveDrawForGame",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "gameId",
          "in" : "path",
          "description" : "Game identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/DrawV2"
            }
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v2.0/draws/active" : {
      "get" : {
        "tags" : [ "Draw operations V2.0" ],
        "summary" : "Get active draws",
        "description" : "Get all active draws for all games",
        "operationId" : "getActiveDraws",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page number",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "maximum" : 100,
          "minimum" : 1
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sorting order. Options: asc, desc. Default is desc.",
          "required" : false,
          "type" : "string",
          "default" : "desc"
        }, {
          "name" : "column",
          "in" : "query",
          "description" : "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
          "required" : false,
          "type" : "string",
          "default" : "gameId"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageDrawV2"
            }
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v2.0/draws/{gameId}/draw-date/{fromDate}/{toDate}" : {
      "get" : {
        "tags" : [ "Draw operations V2.0" ],
        "summary" : "Get draws for a game by date range",
        "description" : "Get draws for a game by date range.",
        "operationId" : "getDrawsForGameByDate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "gameId",
          "in" : "path",
          "description" : "Game identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "fromDate",
          "in" : "path",
          "description" : "The fromDate date in UTC in milliseconds",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "toDate",
          "in" : "path",
          "description" : "The toDate date in UTC in milliseconds",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "maximum" : 100,
          "minimum" : 1
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sorting order. Options: asc, desc. Default is desc.",
          "required" : false,
          "type" : "string",
          "default" : "desc"
        }, {
          "name" : "column",
          "in" : "query",
          "description" : "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
          "required" : false,
          "type" : "string",
          "default" : "drawId"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageDrawV2"
            }
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v2.0/draws/{gameId}/draw-id/{fromDrawId}/{toDrawId}" : {
      "get" : {
        "tags" : [ "Draw operations V2.0" ],
        "summary" : "Get draws for a game by draw id range",
        "description" : "Get draws for a game using a draw number range.",
        "operationId" : "getDrawsForGame",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "gameId",
          "in" : "path",
          "description" : "Game identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "fromDrawId",
          "in" : "path",
          "description" : "The start draw id",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "toDrawId",
          "in" : "path",
          "description" : "The end draw id",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "maximum" : 100,
          "minimum" : 1
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sorting order. Options: asc, desc. Default is desc.",
          "required" : false,
          "type" : "string",
          "default" : "desc"
        }, {
          "name" : "column",
          "in" : "query",
          "description" : "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
          "required" : false,
          "type" : "string",
          "default" : "drawId"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageDrawV2"
            }
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v2.0/draws/{gameId}/{drawId}" : {
      "get" : {
        "tags" : [ "Draw operations V2.0" ],
        "summary" : "Get draw",
        "description" : "Get draw for a game by draw id",
        "operationId" : "getDrawForGame",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "gameId",
          "in" : "path",
          "description" : "Game identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "drawId",
          "in" : "path",
          "description" : "Draw identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/DrawV2"
            }
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Draw update operations V2.0" ],
        "summary" : "Register or update a draw",
        "description" : "",
        "operationId" : "registerOrUpdate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "gameId",
          "in" : "path",
          "description" : "Game identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "drawId",
          "in" : "path",
          "description" : "Draw identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "providerId",
          "in" : "header",
          "description" : "Provider identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "stateId",
          "in" : "header",
          "description" : "State identifier used for idempotency",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/InfoStoreDrawUpdateRequestV2"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/InfoStoreDrawV2DTO"
            }
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "500" : {
            "description" : "APPLICATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "502" : {
            "description" : "BAD GATEWAY"
          },
          "503" : {
            "description" : "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v2.0/draws/{gameId}/visual-draw/{visualDraw}" : {
      "get" : {
        "tags" : [ "Draw operations V2.0" ],
        "summary" : "Get draw for a game by visual draw number",
        "description" : "Get draw for a game by visual draw number. The visual draw number depending on the game is either the same as the draw id, or is a number where the first four digits denote the year and the rest digits a yearly recurring draw number.",
        "operationId" : "getDrawForGameByVisualDraw",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "gameId",
          "in" : "path",
          "description" : "Game identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "visualDraw",
          "in" : "path",
          "description" : "Visual draw number",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/DrawV3"
            }
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "404" : {
            "description" : "NOT FOUND"
          },
          "500" : {
            "description" : "APPLICATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "502" : {
            "description" : "BAD GATEWAY"
          },
          "503" : {
            "description" : "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/{gameId}/last/{limit}" : {
      "get" : {
        "tags" : [ "Draw operations V3.0" ],
        "summary" : "Get last draws for a game",
        "description" : "Get last draws for a game. By default the active draw is included in the response if it exists.",
        "operationId" : "getLastDraws",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "gameId",
          "in" : "path",
          "description" : "Game identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "limit",
          "in" : "path",
          "description" : "Limit, the number of total draws",
          "required" : true,
          "type" : "integer",
          "maximum" : 100,
          "minimum" : 1,
          "format" : "int32"
        }, {
          "name" : "includeActive",
          "in" : "query",
          "description" : "Whether to include the active draw if it exists",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The status in which the last draws should be. By default results and pendingResults are returned.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "pendingResults", "results" ]
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "property",
          "in" : "query",
          "description" : "Specifies which properties to include, by default all properties are included in the response",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "Etag",
          "in" : "header",
          "description" : "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DrawV3"
              }
            }
          },
          "304" : {
            "description" : "NOT MODIFIED"
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "500" : {
            "description" : "APPLICATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "502" : {
            "description" : "BAD GATEWAY"
          },
          "503" : {
            "description" : "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/{gameId}/upcoming/{limit}" : {
      "get" : {
        "tags" : [ "Draw operations V3.0" ],
        "summary" : "Get upcoming draws for a game",
        "description" : "Get upcoming(future) draws for a game and optionally the active one. By default the active draw is included in the response if it exists.",
        "operationId" : "getUpcomingDraws",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "gameId",
          "in" : "path",
          "description" : "Game identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "limit",
          "in" : "path",
          "description" : "Limit, the number of total draws",
          "required" : true,
          "type" : "integer",
          "maximum" : 100,
          "minimum" : 1,
          "format" : "int32"
        }, {
          "name" : "includeActive",
          "in" : "query",
          "description" : "Whether to include the active draw if it exists",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "property",
          "in" : "query",
          "description" : "Specifies which properties to include, by default all properties are included in the response",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "Etag",
          "in" : "header",
          "description" : "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DrawV3"
              }
            }
          },
          "304" : {
            "description" : "NOT MODIFIED"
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "500" : {
            "description" : "APPLICATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "502" : {
            "description" : "BAD GATEWAY"
          },
          "503" : {
            "description" : "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/{gameId}/active" : {
      "get" : {
        "tags" : [ "Draw operations V3.0" ],
        "summary" : "Get the active draw for a game",
        "description" : "Get the active draw for a game",
        "operationId" : "getActiveDrawForGame",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "gameId",
          "in" : "path",
          "description" : "Game identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "property",
          "in" : "query",
          "description" : "Specifies which properties to include, by default all properties are included in the response",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "Etag",
          "in" : "header",
          "description" : "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/DrawV3"
            }
          },
          "304" : {
            "description" : "NOT MODIFIED"
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "500" : {
            "description" : "APPLICATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "502" : {
            "description" : "BAD GATEWAY"
          },
          "503" : {
            "description" : "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/active" : {
      "get" : {
        "tags" : [ "Draw operations V3.0" ],
        "summary" : "Get active draws",
        "description" : "Get all active draws for all games",
        "operationId" : "getActiveDraws",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "property",
          "in" : "query",
          "description" : "Specifies which properties to include, by default all properties are included in the response",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "Etag",
          "in" : "header",
          "description" : "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "maximum" : 100,
          "minimum" : 1
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sorting order. Options: asc, desc. Default is desc.",
          "required" : false,
          "type" : "string",
          "default" : "desc"
        }, {
          "name" : "column",
          "in" : "query",
          "description" : "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
          "required" : false,
          "type" : "string",
          "default" : "gameId"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageDrawV3"
            }
          },
          "304" : {
            "description" : "NOT MODIFIED"
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "500" : {
            "description" : "APPLICATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "502" : {
            "description" : "BAD GATEWAY"
          },
          "503" : {
            "description" : "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/{gameId}/last-result-and-active" : {
      "get" : {
        "tags" : [ "Draw operations V3.0" ],
        "summary" : "Get the last draw with results or pending results and the active draw for a game.",
        "description" : "Get the last draw with results or pending results and the active draw for a game. includeAnimation parameter can be used to force the retrieval of animation for the last resulted draw.",
        "operationId" : "getLastAndActiveDraws",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "gameId",
          "in" : "path",
          "description" : "Game identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "includeAnimation",
          "in" : "query",
          "description" : "Parameter to force inclusion of animation object",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The status in which the last draws should be. By default results and pendingResults are returned.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "pendingResults", "results" ]
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "property",
          "in" : "query",
          "description" : "Specifies which properties to include, by default all properties are included in the response",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "Etag",
          "in" : "header",
          "description" : "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/LastResultDrawAndActiveV3"
            }
          },
          "304" : {
            "description" : "NOT MODIFIED"
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "404" : {
            "description" : "NOT FOUND",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "500" : {
            "description" : "APPLICATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "502" : {
            "description" : "BAD GATEWAY"
          },
          "503" : {
            "description" : "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/{gameId}/draw-date/{fromDate}/{toDate}" : {
      "get" : {
        "tags" : [ "Draw operations V3.0" ],
        "summary" : "Get draws for a game by date range",
        "description" : "Get draws for a game by date range.",
        "operationId" : "getDrawsForGameByDate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "gameId",
          "in" : "path",
          "description" : "Game identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "fromDate",
          "in" : "path",
          "description" : "The from date filter. Must be in 'yyyy-MM-dd' format.",
          "required" : true,
          "type" : "string",
          "pattern" : "[0-9]{4}-[0-9]{2}-[0-9]{2}"
        }, {
          "name" : "toDate",
          "in" : "path",
          "description" : "The to date filter. Must be in 'yyyy-MM-dd' format.",
          "required" : true,
          "type" : "string",
          "pattern" : "[0-9]{4}-[0-9]{2}-[0-9]{2}"
        }, {
          "name" : "timezone",
          "in" : "header",
          "description" : "The timezone in which the date filters were provided. Default is UTC.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Filter draws by status, multiple statuses filters allowed. By default results status is used.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "future", "active", "pendingResults", "results" ]
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "property",
          "in" : "query",
          "description" : "Specifies which properties to include, by default all properties are included in the response",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "Etag",
          "in" : "header",
          "description" : "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "maximum" : 100,
          "minimum" : 1
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sorting order. Options: asc, desc. Default is desc.",
          "required" : false,
          "type" : "string",
          "default" : "desc"
        }, {
          "name" : "column",
          "in" : "query",
          "description" : "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
          "required" : false,
          "type" : "string",
          "default" : "drawId"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageDrawV3"
            }
          },
          "304" : {
            "description" : "NOT MODIFIED"
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "500" : {
            "description" : "APPLICATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "502" : {
            "description" : "BAD GATEWAY"
          },
          "503" : {
            "description" : "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/{gameId}/draw-date/{fromDate}/{toDate}/draw-id" : {
      "get" : {
        "tags" : [ "Draw operations V3.0" ],
        "summary" : "Get draw ids for a game by date range",
        "description" : "Get draw ids for a game by date range.",
        "operationId" : "getDrawIdsForGameByDate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "gameId",
          "in" : "path",
          "description" : "Game identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "fromDate",
          "in" : "path",
          "description" : "The from date filter. Must be in 'yyyy-MM-dd' format.",
          "required" : true,
          "type" : "string",
          "pattern" : "[0-9]{4}-[0-9]{2}-[0-9]{2}"
        }, {
          "name" : "toDate",
          "in" : "path",
          "description" : "The to date filter. Must be in 'yyyy-MM-dd' format.",
          "required" : true,
          "type" : "string",
          "pattern" : "[0-9]{4}-[0-9]{2}-[0-9]{2}"
        }, {
          "name" : "timezone",
          "in" : "header",
          "description" : "The timezone in which the date filters were provided. Default is UTC.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Filter draws by status, multiple statuses filters allowed. By default results status is used.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "future", "active", "pendingResults", "results" ]
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "Etag",
          "in" : "header",
          "description" : "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int32"
              }
            }
          },
          "304" : {
            "description" : "NOT MODIFIED"
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "500" : {
            "description" : "APPLICATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "502" : {
            "description" : "BAD GATEWAY"
          },
          "503" : {
            "description" : "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/{gameId}/draw-id/{fromDrawId}/{toDrawId}" : {
      "get" : {
        "tags" : [ "Draw operations V3.0" ],
        "summary" : "Get draws for a game by draw id range",
        "description" : "Get draws for a game using a draw number range.",
        "operationId" : "getDrawsForGame",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "gameId",
          "in" : "path",
          "description" : "Game identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "fromDrawId",
          "in" : "path",
          "description" : "The start draw id",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "toDrawId",
          "in" : "path",
          "description" : "The end draw id",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Filter draws by status, multiple statuses filters allowed. By default results status is used.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "future", "active", "pendingResults", "results" ]
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "property",
          "in" : "query",
          "description" : "Specifies which properties to include, by default all properties are included in the response",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "Etag",
          "in" : "header",
          "description" : "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "maximum" : 100,
          "minimum" : 1
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sorting order. Options: asc, desc. Default is desc.",
          "required" : false,
          "type" : "string",
          "default" : "desc"
        }, {
          "name" : "column",
          "in" : "query",
          "description" : "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
          "required" : false,
          "type" : "string",
          "default" : "drawId"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageDrawV3"
            }
          },
          "304" : {
            "description" : "NOT MODIFIED"
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "500" : {
            "description" : "APPLICATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "502" : {
            "description" : "BAD GATEWAY"
          },
          "503" : {
            "description" : "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/{gameId}/{drawId}" : {
      "get" : {
        "tags" : [ "Draw operations V3.0" ],
        "summary" : "Get draw",
        "description" : "Get draw for a game by draw id",
        "operationId" : "getDrawForGame",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "gameId",
          "in" : "path",
          "description" : "Game identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "drawId",
          "in" : "path",
          "description" : "Draw identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Status filter. If the draw found is not in one of the specified statuses, the response will be empty. Multiple statuses filters allowed. By default no status filter is applied.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "future", "active", "pendingResults", "results" ]
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "property",
          "in" : "query",
          "description" : "Specifies which properties to include, by default all properties are included in the response",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "includeAnimation",
          "in" : "query",
          "description" : "Parameter to force inclusion of animation object",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "Etag",
          "in" : "header",
          "description" : "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/DrawV3"
            }
          },
          "304" : {
            "description" : "NOT MODIFIED"
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "404" : {
            "description" : "NOT FOUND",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "500" : {
            "description" : "APPLICATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "502" : {
            "description" : "BAD GATEWAY"
          },
          "503" : {
            "description" : "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/{gameId}/visual-draw/{visualDraw}" : {
      "get" : {
        "tags" : [ "Draw operations V3.0" ],
        "summary" : "Get draw for a game by visual draw number",
        "description" : "Get draw for a game by visual draw number. The visual draw number depending on the game is either the same as the draw id, or is a number where the first four digits denote the year and the rest digits a yearly recurring draw number.",
        "operationId" : "getDrawForGameByVisualDraw",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "gameId",
          "in" : "path",
          "description" : "Game identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "visualDraw",
          "in" : "path",
          "description" : "Visual draw number",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Status filter. If the draw found is not in one of the specified statuses, the response will be empty. Multiple statuses filters allowed. By default no status filter is applied.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "future", "active", "pendingResults", "results" ]
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "property",
          "in" : "query",
          "description" : "Specifies which properties to include, by default all properties are included in the response",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "Etag",
          "in" : "header",
          "description" : "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/DrawV3"
            }
          },
          "304" : {
            "description" : "NOT MODIFIED"
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "404" : {
            "description" : "NOT FOUND",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "500" : {
            "description" : "APPLICATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "502" : {
            "description" : "BAD GATEWAY"
          },
          "503" : {
            "description" : "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v1.0/games/{gameId}/jackpot" : {
      "get" : {
        "tags" : [ "Game operations V1.0" ],
        "summary" : "Get current jackpots for game",
        "description" : "",
        "operationId" : "getCurrentJackpot",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "gameId",
          "in" : "path",
          "description" : "Game identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/JackpotDTO"
            }
          },
          "304" : {
            "description" : "NOT MODIFIED"
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "500" : {
            "description" : "APPLICATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "502" : {
            "description" : "BAD GATEWAY"
          },
          "503" : {
            "description" : "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v1.0/games/summary" : {
      "get" : {
        "tags" : [ "Game operations V1.0" ],
        "summary" : "Get games",
        "description" : "Get all games",
        "operationId" : "getGamesSummary",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/GameSummaryDTO"
              }
            }
          },
          "304" : {
            "description" : "NOT MODIFIED"
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "500" : {
            "description" : "APPLICATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "502" : {
            "description" : "BAD GATEWAY"
          },
          "503" : {
            "description" : "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v1.0/sample/update" : {
      "post" : {
        "tags" : [ "Sample subscriber operations V1.0" ],
        "summary" : "Sample subscriber notification endpoint with entity map in body",
        "description" : "",
        "operationId" : "update",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/An object that contains information about a state change of an entity"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/EntityNotificationDTOResponse"
            }
          },
          "400" : {
            "description" : "VALIDATION_ERROR"
          },
          "500" : {
            "description" : "ERROR"
          }
        }
      }
    },
    "/v1.0/sample/simple/update" : {
      "post" : {
        "tags" : [ "Sample subscriber operations V1.0" ],
        "summary" : "Sample subscriber notification endpoint with notification in body",
        "description" : "",
        "operationId" : "simpleUpdate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/An simple object that contains information about a state change of an entity"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/EntityNotificationDTOResponse"
            }
          },
          "400" : {
            "description" : "VALIDATION_ERROR"
          },
          "500" : {
            "description" : "ERROR"
          }
        }
      }
    },
    "/v1.0/sample/simple/update/{gameId}/{drawId}/{status}" : {
      "post" : {
        "tags" : [ "Sample subscriber operations V1.0" ],
        "summary" : "Sample subscriber notification endpoint with no body",
        "description" : "Sample subscriber notification endpoint with no body. The path and the path parameters can be changed as long as the properties have the specific names and format: {property} . The header parameters (stateId, previousStateId, namespace) are optional.",
        "operationId" : "simpleUpdateNoDody",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "gameId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "drawId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "status",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "stateId",
          "in" : "header",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "previousStateId",
          "in" : "header",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "namespace",
          "in" : "header",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/EntityNotificationDTOResponse"
            }
          },
          "400" : {
            "description" : "VALIDATION_ERROR"
          },
          "500" : {
            "description" : "ERROR"
          }
        }
      }
    },
    "/v1.0/states/{stateId}" : {
      "get" : {
        "tags" : [ "Entity state operations" ],
        "summary" : "Get entity state by state id",
        "description" : "Get entity by state id. It contains the entity body as well as a container object that stores the state id and the namespace.",
        "operationId" : "getState",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "stateId",
          "in" : "path",
          "description" : "State identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "subscriberId",
          "in" : "query",
          "description" : "Subscriber id",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/EntityStateDTO"
            }
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "404" : {
            "description" : "NOT FOUND"
          },
          "500" : {
            "description" : "APPLICATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "502" : {
            "description" : "BAD GATEWAY"
          },
          "503" : {
            "description" : "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v1.0/states" : {
      "get" : {
        "tags" : [ "Entity state operations" ],
        "summary" : "Get entity states",
        "description" : "Get paginated entity states. From and to parameters are optional and allow to retrieve a subset of entity states.",
        "operationId" : "getEntityStates",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "from",
          "in" : "query",
          "description" : "The start state id",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "The end state id",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "subscriberId",
          "in" : "query",
          "description" : "Subscriber id",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "maximum" : 100,
          "minimum" : 1
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sorting order. Options: asc, desc. Default is asc.",
          "required" : false,
          "type" : "string",
          "default" : "asc"
        }, {
          "name" : "column",
          "in" : "query",
          "description" : "Sorting column. Options: stateId",
          "required" : false,
          "type" : "string",
          "default" : "stateId"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageEntityStateDTO"
            }
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "500" : {
            "description" : "APPLICATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "502" : {
            "description" : "BAD GATEWAY"
          },
          "503" : {
            "description" : "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v1.0/states/{stateId}/entity" : {
      "get" : {
        "tags" : [ "Entity state operations" ],
        "summary" : "Get entity by state id",
        "description" : "Get entity by state id. It contains only the entity body.",
        "operationId" : "getEntityState",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "stateId",
          "in" : "path",
          "description" : "State identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "subscriberId",
          "in" : "query",
          "description" : "Subscriber id",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "VALIDATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "404" : {
            "description" : "NOT FOUND"
          },
          "500" : {
            "description" : "APPLICATION ERROR",
            "schema" : {
              "$ref" : "#/definitions/FaultInfo"
            }
          },
          "502" : {
            "description" : "BAD GATEWAY"
          },
          "503" : {
            "description" : "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v1.0/subscribers" : {
      "get" : {
        "tags" : [ "Subscriber operations" ],
        "summary" : "Get subscribers",
        "description" : "",
        "operationId" : "findAll",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "subscriberId",
          "in" : "query",
          "description" : "Filter by subscriberId",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Filter by name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "gameIds",
          "in" : "query",
          "description" : "Filter by gameIds",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "entities",
          "in" : "query",
          "description" : "Filter by entities",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "draw", "transactions", "validations" ]
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "column",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "subscriberId"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "asc"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SubscriberDTO"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Subscriber operations" ],
        "summary" : "Register a subscriber",
        "description" : "",
        "operationId" : "register",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The subscriber data",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SubscriberRegistrationRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubscriberDTO"
            }
          }
        }
      }
    },
    "/v1.0/subscribers/{subscriberId}" : {
      "put" : {
        "tags" : [ "Subscriber operations" ],
        "summary" : "Update a subscriber",
        "description" : "",
        "operationId" : "updateGame",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "subscriberId",
          "in" : "path",
          "description" : "The subscriber id",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The subscriber data",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SubscriberUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubscriberDTO"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Subscriber operations" ],
        "summary" : "Delete a subscriber",
        "description" : "",
        "operationId" : "deleteGame",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "subscriberId",
          "in" : "path",
          "description" : "The subscriber id",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    }
  },
  "definitions" : {
    "PrizeCategoryIdV1" : {
      "type" : "object",
      "required" : [ "categoryCd", "drawCd", "gameCd", "selectedCategoryCd" ],
      "properties" : {
        "gameCd" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "description" : "the code of the game"
        },
        "drawCd" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "description" : "the code of the draw"
        },
        "categoryCd" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "description" : "the code of the category"
        },
        "selectedCategoryCd" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "description" : "the code of the selected category"
        }
      }
    },
    "PrizeCategoryV1" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "description" : "a unique internal identifier of the winning",
          "$ref" : "#/definitions/PrizeCategoryIdV1"
        },
        "divident" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "description" : "the divident to be shared"
        },
        "winners" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "description" : "the numbers of winners for this category"
        },
        "winningAmount" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "description" : "the total winning amount"
        },
        "jackpot" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "description" : "the jackpot amount, if applicable"
        },
        "fixedWinningAmount" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "description" : "the fixed winning amount"
        },
        "categoryType" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "description" : "the type of the winning category"
        },
        "promotionId" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "description" : "the id of the promotion if applicable"
        },
        "consolidatedAmount" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "description" : "the consolidated amount that is either the fixed amount or the dividend"
        },
        "extraInfo" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "description" : "a generic description that may include extra prize info"
        }
      },
      "xml" : {
        "name" : "PrizeCategory"
      }
    },
    "DrawResultV1" : {
      "type" : "object",
      "required" : [ "id", "number", "order" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "a unique internal identifier for the draw"
        },
        "number" : {
          "type" : "string",
          "description" : "the specific number selected"
        },
        "order" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "a number identifying the order in an asceding fashion"
        },
        "categoryCd" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "the code of the category"
        },
        "boardTypeId" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "DrawV1" : {
      "type" : "object",
      "properties" : {
        "game" : {
          "description" : "a reference to the state of the game",
          "$ref" : "#/definitions/GameStateV1"
        },
        "id" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "description" : "a unique internal identifier for the draw"
        },
        "drawNumber" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "description" : "a unique number for the draw"
        },
        "columnPrice" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "description" : "the unit price"
        },
        "drawDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "the date of the draw"
        },
        "status" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "description" : "the status of the draw"
        },
        "salesStart" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          },
          "description" : "the date sales start"
        },
        "salesEnd" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          },
          "description" : "the date sales end"
        },
        "winnersLoaded" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "description" : "a flag indicating if the winners are loaded"
        },
        "totalColumns" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "description" : "the total number of columns"
        },
        "totalColumns1" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "description" : "more information on the total number of columns"
        },
        "virtualDrawNumber" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "description" : "virtual number of the draw"
        },
        "maxAdvandedDraws" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "description" : "Maximum advanced draws"
        },
        "specialDraw" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "description" : "a flag indicating if this is a special draw"
        },
        "jackpotAmount" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "description" : "the jackpot Amount"
        },
        "results" : {
          "type" : "array",
          "description" : "a list of artifacts representing the results of a draw",
          "items" : {
            "$ref" : "#/definitions/DrawResultV1"
          }
        },
        "prizes" : {
          "type" : "array",
          "description" : "a list of artifacts representing the winning categories of the draw",
          "items" : {
            "$ref" : "#/definitions/PrizeCategoryV1"
          }
        }
      }
    },
    "GameStateV1" : {
      "type" : "object",
      "required" : [ "active", "columnPrice", "columnPrices", "deadline", "drawNumber", "gameCode", "gameStateId", "highestPrice", "lastUpdated", "mainGameCode", "maxAllowedColumns", "maxMultiDraws", "minAllowedColumns", "originalDeadline", "salesEnd", "salesStart" ],
      "properties" : {
        "gameStateId" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "description" : "the id of the state of the game"
        },
        "mainGameCode" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "description" : "the code of the main game"
        },
        "gameCode" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "description" : "the code of the game"
        },
        "columnPrice" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "description" : "the unit price"
        },
        "columnPrices" : {
          "type" : "array",
          "description" : "a list containing the column prices",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "active" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "description" : "a flag indicating if it is empty"
        },
        "drawNumber" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "description" : "the draw number associated"
        },
        "virtualDrawNumber" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "description" : "virtual number of the draw"
        },
        "deadline" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "the final date"
        },
        "salesStart" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          },
          "description" : "the date sales start"
        },
        "salesEnd" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          },
          "description" : "the date sales end"
        },
        "originalDeadline" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          },
          "description" : "the original deadline"
        },
        "minAllowedColumns" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "description" : "the minimun number of columns allowed"
        },
        "maxAllowedColumns" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "description" : "the maximum number of columns allowed"
        },
        "highestPrice" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "description" : "the highest price allowed"
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          },
          "description" : "the date that was last updated"
        },
        "maxMultiDraws" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "description" : " the maximum number of multi-draws"
        }
      }
    },
    "IIFApplicationException" : {
      "type" : "object",
      "properties" : {
        "errorCode" : {
          "$ref" : "#/definitions/IIFErrorCode"
        },
        "errorData" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        },
        "source" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "IIFErrorCode" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32"
        },
        "type" : {
          "type" : "string"
        }
      }
    },
    "StackTraceElement" : {
      "type" : "object",
      "properties" : {
        "methodName" : {
          "type" : "string"
        },
        "fileName" : {
          "type" : "string"
        },
        "lineNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "className" : {
          "type" : "string"
        },
        "nativeMethod" : {
          "type" : "boolean"
        }
      }
    },
    "AddOnPricePointsV2DTO" : {
      "type" : "object",
      "properties" : {
        "amount" : {
          "type" : "number",
          "format" : "double"
        },
        "unitType" : {
          "type" : "string"
        },
        "gameType" : {
          "type" : "string"
        }
      }
    },
    "DrawResultV2" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The unique id of the result"
        },
        "tierType" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of total picks for tier ie. 1/10, 2/10, 3/10 where 10 is the tier type"
        },
        "tierLevel" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of winning bets for tier ie. 1/10, 2/10, 3/10 where 1,2,3 is the tier level"
        },
        "distributedAmount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Distributed amount to all winners of category"
        },
        "dividentAmount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Gross divident amount per winner of category"
        },
        "taxationAmount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Taxation amount per winner of category"
        },
        "roundingAmount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Rounding amount per winner of category"
        },
        "bonusAmount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Bonus amount per winner of category"
        },
        "jackpotAmount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Jackpot amount per winner of category"
        },
        "netDividentAmount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Net divident amount per winner of category"
        },
        "winners" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of category winners"
        }
      }
    },
    "DrawV2" : {
      "type" : "object",
      "required" : [ "drawBreak", "drawId", "drawTime", "gameId", "gameRuleVersion", "pricePoints", "prizeCategories", "status", "visualDraw" ],
      "properties" : {
        "gameId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Game code"
        },
        "drawId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Draw number"
        },
        "drawTime" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Draw time in UTC in milliseconds"
        },
        "status" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Draw status"
        },
        "drawBreak" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Draw break in milliseconds"
        },
        "visualDraw" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Visual draw number, a recurring draw number"
        },
        "gameRuleVersion" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Game rule version"
        },
        "pricePoints" : {
          "description" : "Price points",
          "$ref" : "#/definitions/PricePointsV2DTO"
        },
        "winningNumbers" : {
          "type" : "array",
          "description" : "Array of winning numbers corresponding to winning column. List of String where each String corresponds to the winning numbers of each winning column. Winning numbers of each winning column are comma separated.",
          "items" : {
            "type" : "string"
          }
        },
        "prizeCategories" : {
          "type" : "array",
          "description" : "Prize categories",
          "items" : {
            "$ref" : "#/definitions/DrawResultV2"
          }
        },
        "wagersStatistics" : {
          "type" : "array",
          "description" : "Wager statistics",
          "items" : {
            "$ref" : "#/definitions/WagerStatisticsDTO"
          }
        },
        "winningRevision" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Winning revision"
        },
        "activationTime" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Time that the draw was activated"
        }
      }
    },
    "PricePointsV2DTO" : {
      "type" : "object",
      "properties" : {
        "addOn" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AddOnPricePointsV2DTO"
          }
        },
        "amount" : {
          "type" : "number",
          "format" : "double"
        }
      }
    },
    "WagerStatisticsDTO" : {
      "type" : "object",
      "required" : [ "columns" ],
      "properties" : {
        "columns" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total columns"
        },
        "wagers" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total wagers"
        }
      }
    },
    "FaultInfo" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The error code"
        },
        "message" : {
          "type" : "string",
          "description" : "The error message"
        },
        "data" : {
          "type" : "array",
          "description" : "The error data which is an abstract object that may be used to provide any error metadata",
          "items" : {
            "type" : "object"
          }
        },
        "source" : {
          "type" : "string",
          "description" : "The application at which the API error occured"
        },
        "type" : {
          "type" : "string",
          "description" : "The error family, e.g. RUNTIME, VALIDATION, etc"
        },
        "guid" : {
          "type" : "string",
          "description" : "The unique identifier of the error process"
        }
      },
      "description" : "The FaultInfo object contains all the details assosiated with an API error"
    },
    "Page" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "last" : {
          "type" : "boolean"
        },
        "first" : {
          "type" : "boolean"
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageDrawV2" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DrawV2"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "first" : {
          "type" : "boolean"
        },
        "last" : {
          "type" : "boolean"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        }
      }
    },
    "Sort" : {
      "type" : "object"
    },
    "AddOnPricePointsV3DTO" : {
      "type" : "object",
      "properties" : {
        "amount" : {
          "type" : "number",
          "format" : "double"
        },
        "gameType" : {
          "type" : "string"
        }
      }
    },
    "DrawAnimationV3DTO" : {
      "type" : "object",
      "properties" : {
        "startTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Denotes in UTC the timestamp that an animation starts"
        },
        "stayDuration" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Denotes how long (in milliseconds) an animation hop will last"
        },
        "steps" : {
          "type" : "array",
          "description" : "Denotes the list of steps before a number is finally marked as a winning one. Note that maximum X steps are specified before reaching an actual winning number",
          "items" : {
            "$ref" : "#/definitions/StepV3"
          }
        }
      }
    },
    "DrawResultV3" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The unique id of the result"
        },
        "divident" : {
          "type" : "number",
          "format" : "double",
          "description" : "Divident amount per winner of category"
        },
        "winners" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of category winners"
        },
        "distributed" : {
          "type" : "number",
          "format" : "double",
          "description" : "Distributed amount to all winners of category (net amount)"
        },
        "jackpot" : {
          "type" : "number",
          "format" : "double",
          "description" : "Jackpot amount of category"
        },
        "fixed" : {
          "type" : "number",
          "format" : "double",
          "description" : "Fixed winning amount of category"
        },
        "categoryType" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The type of category. 0:NormalDividend, 1:FixedAmount, 2:FixedOdds, 3:DividendSharedWithOther, 4:PromotionWinner, 5:ProgressiveJackpot"
        },
        "promotionId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Promotion id of category. It will be null if not applicable."
        },
        "gameType" : {
          "type" : "string",
          "description" : "The game type related to the category."
        }
      }
    },
    "DrawV3" : {
      "type" : "object",
      "required" : [ "drawBreak", "drawId", "drawTime", "gameId", "gameRuleVersion", "pricePoints", "prizeCategories", "status", "statusNr", "visualDraw" ],
      "properties" : {
        "gameId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Game code"
        },
        "drawId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Draw number"
        },
        "drawTime" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Draw time in UTC in milliseconds"
        },
        "status" : {
          "type" : "string",
          "description" : "Draw status (enumeration)",
          "enum" : [ "future", "active", "pendingResults", "results" ]
        },
        "statusNr" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Draw status (number)"
        },
        "drawBreak" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Draw break in milliseconds"
        },
        "visualDraw" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Visual draw number, a recurring draw number"
        },
        "gameRuleVersion" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Game rule version"
        },
        "pricePoints" : {
          "description" : "Price points",
          "$ref" : "#/definitions/PricePointsV3DTO"
        },
        "winningNumbers" : {
          "type" : "array",
          "description" : "Array of winning numbers for each winning column.",
          "items" : {
            "$ref" : "#/definitions/WinningNumbersV3DTO"
          }
        },
        "prizeCategories" : {
          "type" : "array",
          "description" : "Prize categories",
          "items" : {
            "$ref" : "#/definitions/DrawResultV3"
          }
        },
        "wagerStatistics" : {
          "description" : "Wager statistics",
          "$ref" : "#/definitions/WagerStatisticsDTO"
        },
        "animation" : {
          "description" : "Draw animation. Provides centralized information on how the draw should be animated. It is not available on all games and it is not inlcuded by default.",
          "$ref" : "#/definitions/DrawAnimationV3DTO"
        },
        "drawType" : {
          "type" : "string",
          "description" : "DAY or EVE indicator. Applicable only for games that have day and eve draws"
        }
      }
    },
    "PricePointsV3DTO" : {
      "type" : "object",
      "properties" : {
        "addOn" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AddOnPricePointsV3DTO"
          }
        },
        "amount" : {
          "type" : "number",
          "format" : "double"
        }
      }
    },
    "StepV3" : {
      "type" : "object",
      "properties" : {
        "bonusNumber" : {
          "type" : "boolean"
        },
        "hopToNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "winningNumber" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Denotes whether the API consumer should mark at this specific step the number as part of the winning ones. If false, then an additional step is expected for that winning number"
        }
      }
    },
    "WinningNumbersV3DTO" : {
      "type" : "object",
      "properties" : {
        "list" : {
          "type" : "array",
          "description" : "Winning numbers list",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      }
    },
    "PageDrawV3" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DrawV3"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "first" : {
          "type" : "boolean"
        },
        "last" : {
          "type" : "boolean"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        }
      }
    },
    "LastResultDrawAndActiveV3" : {
      "type" : "object",
      "properties" : {
        "last" : {
          "$ref" : "#/definitions/DrawV3"
        },
        "active" : {
          "$ref" : "#/definitions/DrawV3"
        }
      }
    },
    "InfoStoreDrawResultsV2DTO" : {
      "type" : "object",
      "required" : [ "bonusAmount", "distributedAmount", "dividentAmount", "id", "jackpotAmount", "netDividentAmount", "roundingAmount", "taxationAmount", "tierLevel", "tierType", "winners" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The unique id of the result",
          "minimum" : 1
        },
        "tierType" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of total picks for tier ie. 1/10, 2/10, 3/10 where 10 is the tier type",
          "minimum" : 1
        },
        "tierLevel" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of winning bets for tier ie. 1/10, 2/10, 3/10 where 1,2,3 is the tier level",
          "minimum" : 0
        },
        "distributedAmount" : {
          "type" : "number",
          "format" : "double",
          "description" : "Distributed amount to all winners of category",
          "minimum" : 0
        },
        "dividentAmount" : {
          "type" : "number",
          "format" : "double",
          "description" : "Gross divident amount per winner of category",
          "minimum" : 0
        },
        "taxationAmount" : {
          "type" : "number",
          "format" : "double",
          "description" : "Taxation amount per winner of category",
          "minimum" : 0
        },
        "roundingAmount" : {
          "type" : "number",
          "format" : "double",
          "description" : "Rounding amount per winner of category",
          "minimum" : 0
        },
        "bonusAmount" : {
          "type" : "number",
          "format" : "double",
          "description" : "Bonus amount per winner of category",
          "minimum" : 0
        },
        "jackpotAmount" : {
          "type" : "number",
          "format" : "double",
          "description" : "Jackpot amount per winner of category",
          "minimum" : 0
        },
        "netDividentAmount" : {
          "type" : "number",
          "format" : "double",
          "description" : "Net divident amount per winner of category",
          "minimum" : 0
        },
        "winners" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Number of category winners",
          "minimum" : 0
        }
      }
    },
    "InfoStoreDrawV2DTO" : {
      "type" : "object",
      "required" : [ "drawBreak", "drawId", "drawTime", "gameId", "gameRuleVersion", "status", "visualDraw", "winningRevision" ],
      "properties" : {
        "gameId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Game code"
        },
        "drawId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Draw number"
        },
        "drawTime" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Draw time in UTC in milliseconds"
        },
        "status" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Draw status"
        },
        "drawBreak" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Draw break in milliseconds"
        },
        "visualDraw" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Visual draw"
        },
        "gameRuleVersion" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Game rule version"
        },
        "winningNumbers" : {
          "type" : "array",
          "description" : "Array of winning numbers corresponding to winning column. List of String where each String corresponds to the winning numbers ofeach winning column. Winning numbers of each winning column should be comma separated.",
          "items" : {
            "type" : "string"
          }
        },
        "prizeCategories" : {
          "type" : "array",
          "description" : "Prize categories",
          "items" : {
            "$ref" : "#/definitions/InfoStoreDrawResultsV2DTO"
          }
        },
        "winningRevision" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Winning revision"
        },
        "activationTime" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Time that the draw was activated"
        },
        "wagerStatistics" : {
          "type" : "array",
          "description" : "Wager statistics",
          "items" : {
            "$ref" : "#/definitions/InfoStoreDrawWagerStatisticsV2DTO"
          }
        },
        "drawType" : {
          "type" : "string",
          "description" : "DAY or EVE indicator. Applicable only for games that have day and eve draws"
        }
      }
    },
    "InfoStoreDrawWagerStatisticsV2DTO" : {
      "type" : "object",
      "required" : [ "columns", "wagerType" ],
      "properties" : {
        "wagerType" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Wager type. 1:Play 2:Canceled, 3:Internal_Played_Rollback, 4:Tagged"
        },
        "columns" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Total columns"
        },
        "wagers" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Total wagers"
        }
      }
    },
    "InfoStoreDrawUpdateRequestV2" : {
      "type" : "object",
      "required" : [ "drawBreak", "drawTime", "gameRuleVersion", "status", "visualDraw", "winningRevision" ],
      "properties" : {
        "drawTime" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Draw time in UTC in milliseconds"
        },
        "status" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Draw status"
        },
        "drawBreak" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Draw break in milliseconds"
        },
        "visualDraw" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Visual draw"
        },
        "gameRuleVersion" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Game rule version"
        },
        "winningNumbers" : {
          "type" : "array",
          "description" : "Array of winning numbers corresponding to winning column. List of String where each String corresponds to the winning numbers ofeach winning column. Winning numbers of each winning column should be comma separated.",
          "items" : {
            "type" : "string"
          }
        },
        "prizeCategories" : {
          "type" : "array",
          "description" : "Prize categories",
          "items" : {
            "$ref" : "#/definitions/InfoStoreDrawResultsV2DTO"
          }
        },
        "winningRevision" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Winning revision"
        },
        "activationTime" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Time that the draw was activated"
        },
        "wagerStatistics" : {
          "type" : "array",
          "description" : "Wager statistics",
          "items" : {
            "$ref" : "#/definitions/InfoStoreDrawWagerStatisticsV2DTO"
          }
        },
        "drawType" : {
          "type" : "string",
          "description" : "DAY or EVE indicator. Applicable only for games that have day and eve draws"
        }
      }
    },
    "JackpotCategoryAmountsDTO" : {
      "type" : "object",
      "properties" : {
        "categoryId" : {
          "type" : "integer",
          "format" : "int32"
        },
        "guaranteed" : {
          "type" : "number",
          "format" : "double"
        },
        "estimated" : {
          "type" : "number",
          "format" : "double"
        },
        "current" : {
          "type" : "number",
          "format" : "double"
        }
      }
    },
    "JackpotDTO" : {
      "type" : "object",
      "properties" : {
        "jackpot" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/JackpotCategoryAmountsDTO"
          }
        }
      }
    },
    "GameSummaryDTO" : {
      "type" : "object",
      "properties" : {
        "gameStateId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "the unique identifier of the game"
        },
        "name" : {
          "type" : "string",
          "description" : "the name of the game"
        },
        "category" : {
          "type" : "string",
          "description" : "the category of the game",
          "enum" : [ "DBG", "IWG" ]
        },
        "status" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "the status of the game"
        }
      }
    },
    "EntityNotificationDTOResponse" : {
      "type" : "object",
      "properties" : {
        "stateId" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "An object that contains information about a state change of an entity" : {
      "type" : "object",
      "required" : [ "namespace", "stateId" ],
      "properties" : {
        "stateId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "previousStateId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "namespace" : {
          "type" : "string"
        },
        "draw" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        },
        "transactionsControl" : {
          "type" : "object"
        },
        "validationsState" : {
          "type" : "object"
        }
      }
    },
    "An simple object that contains information about a state change of an entity" : {
      "type" : "object",
      "required" : [ "namespace", "stateId" ],
      "properties" : {
        "stateId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "previousStateId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "namespace" : {
          "type" : "string"
        }
      }
    },
    "EntityStateDTO" : {
      "type" : "object",
      "properties" : {
        "stateId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "namespace" : {
          "type" : "string"
        },
        "draw" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        },
        "transactionsControl" : {
          "type" : "object"
        },
        "validationsState" : {
          "type" : "object"
        }
      }
    },
    "PageEntityStateDTO" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EntityStateDTO"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "first" : {
          "type" : "boolean"
        },
        "last" : {
          "type" : "boolean"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        }
      }
    },
    "Serializable" : {
      "type" : "object"
    },
    "SubscribableEntityOptions" : {
      "type" : "object",
      "properties" : {
        "variation" : {
          "type" : "string"
        },
        "properties" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "SubscriberDTO" : {
      "type" : "object",
      "properties" : {
        "subscriberId" : {
          "type" : "integer",
          "format" : "int32"
        },
        "name" : {
          "type" : "string"
        },
        "entities" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "draw", "transactions", "validations" ]
          }
        },
        "gameIds" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "messageBody" : {
          "type" : "string",
          "enum" : [ "none", "notification", "entity" ]
        },
        "method" : {
          "type" : "string",
          "enum" : [ "rest" ]
        },
        "path" : {
          "type" : "string"
        },
        "httpMethod" : {
          "type" : "string"
        },
        "maxRetries" : {
          "type" : "integer",
          "format" : "int32"
        },
        "retryInterval" : {
          "type" : "integer",
          "format" : "int32"
        },
        "options" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/SubscribableEntityOptions"
          }
        }
      }
    },
    "SubscriberRegistrationRequest" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "entities" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "draw", "transactions", "validations" ]
          }
        },
        "gameIds" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "messageBody" : {
          "type" : "string",
          "enum" : [ "none", "notification", "entity" ]
        },
        "method" : {
          "type" : "string",
          "enum" : [ "rest" ]
        },
        "path" : {
          "type" : "string"
        },
        "httpMethod" : {
          "type" : "string",
          "pattern" : "^(GET|HEAD|POST|PUT|PATCH|DELETE|OPTIONS|TRACE)$"
        },
        "maxRetries" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0,
          "maximum" : 100
        },
        "retryInterval" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 500
        },
        "options" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/SubscribableEntityOptions"
          }
        }
      }
    },
    "SubscriberUpdateRequest" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "entities" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "draw", "transactions", "validations" ]
          }
        },
        "gameIds" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "messageBody" : {
          "type" : "string",
          "enum" : [ "none", "notification", "entity" ]
        },
        "path" : {
          "type" : "string"
        },
        "httpMethod" : {
          "type" : "string",
          "pattern" : "^(GET|HEAD|POST|PUT|PATCH|DELETE|OPTIONS|TRACE)$"
        },
        "maxRetries" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0,
          "maximum" : 100
        },
        "retryInterval" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 500
        },
        "options" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/SubscribableEntityOptions"
          }
        }
      }
    }
  }
}